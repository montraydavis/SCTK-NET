//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from grammars/typescript/TypeScriptParser.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class TypeScriptParser : TypeScriptParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		MultiLineComment=1, SingleLineComment=2, RegularExpressionLiteral=3, OpenBracket=4, 
		CloseBracket=5, OpenParen=6, CloseParen=7, OpenBrace=8, TemplateCloseBrace=9, 
		CloseBrace=10, SemiColon=11, Comma=12, Assign=13, QuestionMark=14, Colon=15, 
		Ellipsis=16, Dot=17, PlusPlus=18, MinusMinus=19, Plus=20, Minus=21, BitNot=22, 
		Not=23, Multiply=24, Divide=25, Modulus=26, RightShiftArithmetic=27, LeftShiftArithmetic=28, 
		RightShiftLogical=29, LessThan=30, MoreThan=31, LessThanEquals=32, GreaterThanEquals=33, 
		Equals_=34, NotEquals=35, IdentityEquals=36, IdentityNotEquals=37, BitAnd=38, 
		BitXOr=39, BitOr=40, And=41, Or=42, MultiplyAssign=43, DivideAssign=44, 
		ModulusAssign=45, PlusAssign=46, MinusAssign=47, LeftShiftArithmeticAssign=48, 
		RightShiftArithmeticAssign=49, RightShiftLogicalAssign=50, BitAndAssign=51, 
		BitXorAssign=52, BitOrAssign=53, ARROW=54, NullLiteral=55, BooleanLiteral=56, 
		DecimalLiteral=57, HexIntegerLiteral=58, OctalIntegerLiteral=59, OctalIntegerLiteral2=60, 
		BinaryIntegerLiteral=61, Break=62, Do=63, Instanceof=64, Typeof=65, Case=66, 
		Else=67, New=68, Var=69, Catch=70, Finally=71, Return=72, Void=73, Continue=74, 
		For=75, Switch=76, While=77, Debugger=78, Function_=79, This=80, With=81, 
		Default=82, If=83, Throw=84, Delete=85, In=86, Try=87, As=88, From=89, 
		ReadOnly=90, Async=91, Class=92, Enum=93, Extends=94, Super=95, Const=96, 
		Export=97, Import=98, Implements=99, Let=100, Private=101, Public=102, 
		Interface=103, Package=104, Protected=105, Static=106, Yield=107, Any=108, 
		Number=109, Boolean=110, String=111, Symbol=112, TypeAlias=113, Get=114, 
		Set=115, Constructor=116, Namespace=117, Require=118, Module=119, Declare=120, 
		Abstract=121, Is=122, At=123, Identifier=124, StringLiteral=125, BackTick=126, 
		WhiteSpaces=127, LineTerminator=128, HtmlComment=129, CDataComment=130, 
		UnexpectedCharacter=131, TemplateStringStartExpression=132, TemplateStringAtom=133;
	public const int
		RULE_initializer = 0, RULE_bindingPattern = 1, RULE_typeParameters = 2, 
		RULE_typeParameterList = 3, RULE_typeParameter = 4, RULE_constraint = 5, 
		RULE_typeArguments = 6, RULE_typeArgumentList = 7, RULE_typeArgument = 8, 
		RULE_type_ = 9, RULE_unionOrIntersectionOrPrimaryType = 10, RULE_primaryType = 11, 
		RULE_predefinedType = 12, RULE_typeReference = 13, RULE_nestedTypeGeneric = 14, 
		RULE_typeGeneric = 15, RULE_typeIncludeGeneric = 16, RULE_typeName = 17, 
		RULE_objectType = 18, RULE_typeBody = 19, RULE_typeMemberList = 20, RULE_typeMember = 21, 
		RULE_arrayType = 22, RULE_tupleType = 23, RULE_tupleElementTypes = 24, 
		RULE_functionType = 25, RULE_constructorType = 26, RULE_typeQuery = 27, 
		RULE_typeQueryExpression = 28, RULE_propertySignatur = 29, RULE_typeAnnotation = 30, 
		RULE_callSignature = 31, RULE_parameterList = 32, RULE_requiredParameterList = 33, 
		RULE_parameter = 34, RULE_optionalParameter = 35, RULE_restParameter = 36, 
		RULE_requiredParameter = 37, RULE_accessibilityModifier = 38, RULE_identifierOrPattern = 39, 
		RULE_constructSignature = 40, RULE_indexSignature = 41, RULE_methodSignature = 42, 
		RULE_typeAliasDeclaration = 43, RULE_constructorDeclaration = 44, RULE_interfaceDeclaration = 45, 
		RULE_interfaceExtendsClause = 46, RULE_classOrInterfaceTypeList = 47, 
		RULE_enumDeclaration = 48, RULE_enumBody = 49, RULE_enumMemberList = 50, 
		RULE_enumMember = 51, RULE_namespaceDeclaration = 52, RULE_namespaceName = 53, 
		RULE_importAliasDeclaration = 54, RULE_decoratorList = 55, RULE_decorator = 56, 
		RULE_decoratorMemberExpression = 57, RULE_decoratorCallExpression = 58, 
		RULE_program = 59, RULE_sourceElement = 60, RULE_statement = 61, RULE_block = 62, 
		RULE_statementList = 63, RULE_abstractDeclaration = 64, RULE_importStatement = 65, 
		RULE_fromBlock = 66, RULE_multipleImportStatement = 67, RULE_exportStatement = 68, 
		RULE_variableStatement = 69, RULE_variableDeclarationList = 70, RULE_variableDeclaration = 71, 
		RULE_emptyStatement_ = 72, RULE_expressionStatement = 73, RULE_ifStatement = 74, 
		RULE_iterationStatement = 75, RULE_varModifier = 76, RULE_continueStatement = 77, 
		RULE_breakStatement = 78, RULE_returnStatement = 79, RULE_yieldStatement = 80, 
		RULE_withStatement = 81, RULE_switchStatement = 82, RULE_caseBlock = 83, 
		RULE_caseClauses = 84, RULE_caseClause = 85, RULE_defaultClause = 86, 
		RULE_labelledStatement = 87, RULE_throwStatement = 88, RULE_tryStatement = 89, 
		RULE_catchProduction = 90, RULE_finallyProduction = 91, RULE_debuggerStatement = 92, 
		RULE_functionDeclaration = 93, RULE_classDeclaration = 94, RULE_classHeritage = 95, 
		RULE_classTail = 96, RULE_classExtendsClause = 97, RULE_implementsClause = 98, 
		RULE_classElement = 99, RULE_propertyMemberDeclaration = 100, RULE_propertyMemberBase = 101, 
		RULE_indexMemberDeclaration = 102, RULE_generatorMethod = 103, RULE_generatorFunctionDeclaration = 104, 
		RULE_generatorBlock = 105, RULE_generatorDefinition = 106, RULE_iteratorBlock = 107, 
		RULE_iteratorDefinition = 108, RULE_formalParameterList = 109, RULE_formalParameterArg = 110, 
		RULE_lastFormalParameterArg = 111, RULE_functionBody = 112, RULE_sourceElements = 113, 
		RULE_arrayLiteral = 114, RULE_elementList = 115, RULE_arrayElement = 116, 
		RULE_objectLiteral = 117, RULE_propertyAssignment = 118, RULE_getAccessor = 119, 
		RULE_setAccessor = 120, RULE_propertyName = 121, RULE_arguments = 122, 
		RULE_argumentList = 123, RULE_argument = 124, RULE_expressionSequence = 125, 
		RULE_functionExpressionDeclaration = 126, RULE_singleExpression = 127, 
		RULE_asExpression = 128, RULE_arrowFunctionDeclaration = 129, RULE_arrowFunctionParameters = 130, 
		RULE_arrowFunctionBody = 131, RULE_assignmentOperator = 132, RULE_literal = 133, 
		RULE_templateStringLiteral = 134, RULE_templateStringAtom = 135, RULE_numericLiteral = 136, 
		RULE_identifierName = 137, RULE_identifierOrKeyWord = 138, RULE_reservedWord = 139, 
		RULE_keyword = 140, RULE_getter = 141, RULE_setter = 142, RULE_eos = 143;
	public static readonly string[] ruleNames = {
		"initializer", "bindingPattern", "typeParameters", "typeParameterList", 
		"typeParameter", "constraint", "typeArguments", "typeArgumentList", "typeArgument", 
		"type_", "unionOrIntersectionOrPrimaryType", "primaryType", "predefinedType", 
		"typeReference", "nestedTypeGeneric", "typeGeneric", "typeIncludeGeneric", 
		"typeName", "objectType", "typeBody", "typeMemberList", "typeMember", 
		"arrayType", "tupleType", "tupleElementTypes", "functionType", "constructorType", 
		"typeQuery", "typeQueryExpression", "propertySignatur", "typeAnnotation", 
		"callSignature", "parameterList", "requiredParameterList", "parameter", 
		"optionalParameter", "restParameter", "requiredParameter", "accessibilityModifier", 
		"identifierOrPattern", "constructSignature", "indexSignature", "methodSignature", 
		"typeAliasDeclaration", "constructorDeclaration", "interfaceDeclaration", 
		"interfaceExtendsClause", "classOrInterfaceTypeList", "enumDeclaration", 
		"enumBody", "enumMemberList", "enumMember", "namespaceDeclaration", "namespaceName", 
		"importAliasDeclaration", "decoratorList", "decorator", "decoratorMemberExpression", 
		"decoratorCallExpression", "program", "sourceElement", "statement", "block", 
		"statementList", "abstractDeclaration", "importStatement", "fromBlock", 
		"multipleImportStatement", "exportStatement", "variableStatement", "variableDeclarationList", 
		"variableDeclaration", "emptyStatement_", "expressionStatement", "ifStatement", 
		"iterationStatement", "varModifier", "continueStatement", "breakStatement", 
		"returnStatement", "yieldStatement", "withStatement", "switchStatement", 
		"caseBlock", "caseClauses", "caseClause", "defaultClause", "labelledStatement", 
		"throwStatement", "tryStatement", "catchProduction", "finallyProduction", 
		"debuggerStatement", "functionDeclaration", "classDeclaration", "classHeritage", 
		"classTail", "classExtendsClause", "implementsClause", "classElement", 
		"propertyMemberDeclaration", "propertyMemberBase", "indexMemberDeclaration", 
		"generatorMethod", "generatorFunctionDeclaration", "generatorBlock", "generatorDefinition", 
		"iteratorBlock", "iteratorDefinition", "formalParameterList", "formalParameterArg", 
		"lastFormalParameterArg", "functionBody", "sourceElements", "arrayLiteral", 
		"elementList", "arrayElement", "objectLiteral", "propertyAssignment", 
		"getAccessor", "setAccessor", "propertyName", "arguments", "argumentList", 
		"argument", "expressionSequence", "functionExpressionDeclaration", "singleExpression", 
		"asExpression", "arrowFunctionDeclaration", "arrowFunctionParameters", 
		"arrowFunctionBody", "assignmentOperator", "literal", "templateStringLiteral", 
		"templateStringAtom", "numericLiteral", "identifierName", "identifierOrKeyWord", 
		"reservedWord", "keyword", "getter", "setter", "eos"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'['", "']'", "'('", "')'", "'{'", null, "'}'", 
		"';'", "','", "'='", "'?'", "':'", "'...'", "'.'", "'++'", "'--'", "'+'", 
		"'-'", "'~'", "'!'", "'*'", "'/'", "'%'", "'>>'", "'<<'", "'>>>'", "'<'", 
		"'>'", "'<='", "'>='", "'=='", "'!='", "'==='", "'!=='", "'&'", "'^'", 
		"'|'", "'&&'", "'||'", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", 
		"'>>='", "'>>>='", "'&='", "'^='", "'|='", "'=>'", "'null'", null, null, 
		null, null, null, null, "'break'", "'do'", "'instanceof'", "'typeof'", 
		"'case'", "'else'", "'new'", "'var'", "'catch'", "'finally'", "'return'", 
		"'void'", "'continue'", "'for'", "'switch'", "'while'", "'debugger'", 
		"'function'", "'this'", "'with'", "'default'", "'if'", "'throw'", "'delete'", 
		"'in'", "'try'", "'as'", "'from'", "'readonly'", "'async'", "'class'", 
		"'enum'", "'extends'", "'super'", "'const'", "'export'", "'import'", "'implements'", 
		"'let'", "'private'", "'public'", "'interface'", "'package'", "'protected'", 
		"'static'", "'yield'", "'any'", "'number'", "'boolean'", "'string'", "'symbol'", 
		"'type'", "'get'", "'set'", "'constructor'", "'namespace'", "'require'", 
		"'module'", "'declare'", "'abstract'", "'is'", "'@'", null, null, null, 
		null, null, null, null, null, "'${'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "MultiLineComment", "SingleLineComment", "RegularExpressionLiteral", 
		"OpenBracket", "CloseBracket", "OpenParen", "CloseParen", "OpenBrace", 
		"TemplateCloseBrace", "CloseBrace", "SemiColon", "Comma", "Assign", "QuestionMark", 
		"Colon", "Ellipsis", "Dot", "PlusPlus", "MinusMinus", "Plus", "Minus", 
		"BitNot", "Not", "Multiply", "Divide", "Modulus", "RightShiftArithmetic", 
		"LeftShiftArithmetic", "RightShiftLogical", "LessThan", "MoreThan", "LessThanEquals", 
		"GreaterThanEquals", "Equals_", "NotEquals", "IdentityEquals", "IdentityNotEquals", 
		"BitAnd", "BitXOr", "BitOr", "And", "Or", "MultiplyAssign", "DivideAssign", 
		"ModulusAssign", "PlusAssign", "MinusAssign", "LeftShiftArithmeticAssign", 
		"RightShiftArithmeticAssign", "RightShiftLogicalAssign", "BitAndAssign", 
		"BitXorAssign", "BitOrAssign", "ARROW", "NullLiteral", "BooleanLiteral", 
		"DecimalLiteral", "HexIntegerLiteral", "OctalIntegerLiteral", "OctalIntegerLiteral2", 
		"BinaryIntegerLiteral", "Break", "Do", "Instanceof", "Typeof", "Case", 
		"Else", "New", "Var", "Catch", "Finally", "Return", "Void", "Continue", 
		"For", "Switch", "While", "Debugger", "Function_", "This", "With", "Default", 
		"If", "Throw", "Delete", "In", "Try", "As", "From", "ReadOnly", "Async", 
		"Class", "Enum", "Extends", "Super", "Const", "Export", "Import", "Implements", 
		"Let", "Private", "Public", "Interface", "Package", "Protected", "Static", 
		"Yield", "Any", "Number", "Boolean", "String", "Symbol", "TypeAlias", 
		"Get", "Set", "Constructor", "Namespace", "Require", "Module", "Declare", 
		"Abstract", "Is", "At", "Identifier", "StringLiteral", "BackTick", "WhiteSpaces", 
		"LineTerminator", "HtmlComment", "CDataComment", "UnexpectedCharacter", 
		"TemplateStringStartExpression", "TemplateStringAtom"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TypeScriptParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TypeScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TypeScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TypeScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(TypeScriptParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 0, RULE_initializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			Match(Assign);
			State = 289;
			singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindingPatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		public BindingPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bindingPattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterBindingPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitBindingPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBindingPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BindingPatternContext bindingPattern() {
		BindingPatternContext _localctx = new BindingPatternContext(Context, State);
		EnterRule(_localctx, 2, RULE_bindingPattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBracket:
				{
				State = 291;
				arrayLiteral();
				}
				break;
			case OpenBrace:
				{
				State = 292;
				objectLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(TypeScriptParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MoreThan() { return GetToken(TypeScriptParser.MoreThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		public TypeParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParametersContext typeParameters() {
		TypeParametersContext _localctx = new TypeParametersContext(Context, State);
		EnterRule(_localctx, 4, RULE_typeParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			Match(LessThan);
			State = 297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LessThan || _la==Identifier) {
				{
				State = 296;
				typeParameterList();
				}
			}

			State = 299;
			Match(MoreThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public TypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListContext typeParameterList() {
		TypeParameterListContext _localctx = new TypeParameterListContext(Context, State);
		EnterRule(_localctx, 6, RULE_typeParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			typeParameter();
			State = 306;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 302;
				Match(Comma);
				State = 303;
				typeParameter();
				}
				}
				State = 308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintContext constraint() {
			return GetRuleContext<ConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 8, RULE_typeParameter);
		int _la;
		try {
			State = 314;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 309;
				Match(Identifier);
				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Extends) {
					{
					State = 310;
					constraint();
					}
				}

				}
				break;
			case LessThan:
				EnterOuterAlt(_localctx, 2);
				{
				State = 313;
				typeParameters();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extends() { return GetToken(TypeScriptParser.Extends, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public ConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintContext constraint() {
		ConstraintContext _localctx = new ConstraintContext(Context, State);
		EnterRule(_localctx, 10, RULE_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			Match(Extends);
			State = 317;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(TypeScriptParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MoreThan() { return GetToken(TypeScriptParser.MoreThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 12, RULE_typeArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			Match(LessThan);
			State = 321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << LessThan))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Typeof - 65)) | (1L << (New - 65)) | (1L << (Void - 65)) | (1L << (This - 65)) | (1L << (Any - 65)) | (1L << (Number - 65)) | (1L << (Boolean - 65)) | (1L << (String - 65)) | (1L << (Symbol - 65)) | (1L << (Identifier - 65)) | (1L << (StringLiteral - 65)))) != 0)) {
				{
				State = 320;
				typeArgumentList();
				}
			}

			State = 323;
			Match(MoreThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext[] typeArgument() {
			return GetRuleContexts<TypeArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext typeArgument(int i) {
			return GetRuleContext<TypeArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public TypeArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentListContext typeArgumentList() {
		TypeArgumentListContext _localctx = new TypeArgumentListContext(Context, State);
		EnterRule(_localctx, 14, RULE_typeArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			typeArgument();
			State = 330;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 326;
				Match(Comma);
				State = 327;
				typeArgument();
				}
				}
				State = 332;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public TypeArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentContext typeArgument() {
		TypeArgumentContext _localctx = new TypeArgumentContext(Context, State);
		EnterRule(_localctx, 16, RULE_typeArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnionOrIntersectionOrPrimaryTypeContext unionOrIntersectionOrPrimaryType() {
			return GetRuleContext<UnionOrIntersectionOrPrimaryTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorTypeContext constructorType() {
			return GetRuleContext<ConstructorTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeGenericContext typeGeneric() {
			return GetRuleContext<TypeGenericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(TypeScriptParser.StringLiteral, 0); }
		public Type_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterType_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitType_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_Context type_() {
		Type_Context _localctx = new Type_Context(Context, State);
		EnterRule(_localctx, 18, RULE_type_);
		try {
			State = 340;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 335;
				unionOrIntersectionOrPrimaryType(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 336;
				functionType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 337;
				constructorType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 338;
				typeGeneric();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 339;
				Match(StringLiteral);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionOrIntersectionOrPrimaryTypeContext : ParserRuleContext {
		public UnionOrIntersectionOrPrimaryTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionOrIntersectionOrPrimaryType; } }
	 
		public UnionOrIntersectionOrPrimaryTypeContext() { }
		public virtual void CopyFrom(UnionOrIntersectionOrPrimaryTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntersectionContext : UnionOrIntersectionOrPrimaryTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnionOrIntersectionOrPrimaryTypeContext[] unionOrIntersectionOrPrimaryType() {
			return GetRuleContexts<UnionOrIntersectionOrPrimaryTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionOrIntersectionOrPrimaryTypeContext unionOrIntersectionOrPrimaryType(int i) {
			return GetRuleContext<UnionOrIntersectionOrPrimaryTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(TypeScriptParser.BitAnd, 0); }
		public IntersectionContext(UnionOrIntersectionOrPrimaryTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterIntersection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitIntersection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntersection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimaryContext : UnionOrIntersectionOrPrimaryTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryTypeContext primaryType() {
			return GetRuleContext<PrimaryTypeContext>(0);
		}
		public PrimaryContext(UnionOrIntersectionOrPrimaryTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnionContext : UnionOrIntersectionOrPrimaryTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnionOrIntersectionOrPrimaryTypeContext[] unionOrIntersectionOrPrimaryType() {
			return GetRuleContexts<UnionOrIntersectionOrPrimaryTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionOrIntersectionOrPrimaryTypeContext unionOrIntersectionOrPrimaryType(int i) {
			return GetRuleContext<UnionOrIntersectionOrPrimaryTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOr() { return GetToken(TypeScriptParser.BitOr, 0); }
		public UnionContext(UnionOrIntersectionOrPrimaryTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterUnion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitUnion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionOrIntersectionOrPrimaryTypeContext unionOrIntersectionOrPrimaryType() {
		return unionOrIntersectionOrPrimaryType(0);
	}

	private UnionOrIntersectionOrPrimaryTypeContext unionOrIntersectionOrPrimaryType(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		UnionOrIntersectionOrPrimaryTypeContext _localctx = new UnionOrIntersectionOrPrimaryTypeContext(Context, _parentState);
		UnionOrIntersectionOrPrimaryTypeContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_unionOrIntersectionOrPrimaryType, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PrimaryContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 343;
			primaryType(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 353;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 351;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new UnionContext(new UnionOrIntersectionOrPrimaryTypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_unionOrIntersectionOrPrimaryType);
						State = 345;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 346;
						Match(BitOr);
						State = 347;
						unionOrIntersectionOrPrimaryType(4);
						}
						break;
					case 2:
						{
						_localctx = new IntersectionContext(new UnionOrIntersectionOrPrimaryTypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_unionOrIntersectionOrPrimaryType);
						State = 348;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 349;
						Match(BitAnd);
						State = 350;
						unionOrIntersectionOrPrimaryType(3);
						}
						break;
					}
					} 
				}
				State = 355;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryTypeContext : ParserRuleContext {
		public PrimaryTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryType; } }
	 
		public PrimaryTypeContext() { }
		public virtual void CopyFrom(PrimaryTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RedefinitionOfTypeContext : PrimaryTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Is() { return GetToken(TypeScriptParser.Is, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryTypeContext primaryType() {
			return GetRuleContext<PrimaryTypeContext>(0);
		}
		public RedefinitionOfTypeContext(PrimaryTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterRedefinitionOfType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitRedefinitionOfType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedefinitionOfType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PredefinedPrimTypeContext : PrimaryTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredefinedTypeContext predefinedType() {
			return GetRuleContext<PredefinedTypeContext>(0);
		}
		public PredefinedPrimTypeContext(PrimaryTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPredefinedPrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPredefinedPrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredefinedPrimType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayPrimTypeContext : PrimaryTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryTypeContext primaryType() {
			return GetRuleContext<PrimaryTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(TypeScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(TypeScriptParser.CloseBracket, 0); }
		public ArrayPrimTypeContext(PrimaryTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArrayPrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArrayPrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayPrimType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedPrimTypeContext : PrimaryTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		public ParenthesizedPrimTypeContext(PrimaryTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterParenthesizedPrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitParenthesizedPrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedPrimType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThisPrimTypeContext : PrimaryTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode This() { return GetToken(TypeScriptParser.This, 0); }
		public ThisPrimTypeContext(PrimaryTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterThisPrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitThisPrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisPrimType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TuplePrimTypeContext : PrimaryTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(TypeScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleElementTypesContext tupleElementTypes() {
			return GetRuleContext<TupleElementTypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(TypeScriptParser.CloseBracket, 0); }
		public TuplePrimTypeContext(PrimaryTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTuplePrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTuplePrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuplePrimType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectPrimTypeContext : PrimaryTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectTypeContext objectType() {
			return GetRuleContext<ObjectTypeContext>(0);
		}
		public ObjectPrimTypeContext(PrimaryTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterObjectPrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitObjectPrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectPrimType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReferencePrimTypeContext : PrimaryTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ReferencePrimTypeContext(PrimaryTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterReferencePrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitReferencePrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferencePrimType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QueryPrimTypeContext : PrimaryTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeQueryContext typeQuery() {
			return GetRuleContext<TypeQueryContext>(0);
		}
		public QueryPrimTypeContext(PrimaryTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterQueryPrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitQueryPrimType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryPrimType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryTypeContext primaryType() {
		return primaryType(0);
	}

	private PrimaryTypeContext primaryType(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PrimaryTypeContext _localctx = new PrimaryTypeContext(Context, _parentState);
		PrimaryTypeContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_primaryType, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				_localctx = new ParenthesizedPrimTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 357;
				Match(OpenParen);
				State = 358;
				type_();
				State = 359;
				Match(CloseParen);
				}
				break;
			case 2:
				{
				_localctx = new PredefinedPrimTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 361;
				predefinedType();
				}
				break;
			case 3:
				{
				_localctx = new ReferencePrimTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 362;
				typeReference();
				}
				break;
			case 4:
				{
				_localctx = new ObjectPrimTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 363;
				objectType();
				}
				break;
			case 5:
				{
				_localctx = new TuplePrimTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 364;
				Match(OpenBracket);
				State = 365;
				tupleElementTypes();
				State = 366;
				Match(CloseBracket);
				}
				break;
			case 6:
				{
				_localctx = new QueryPrimTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 368;
				typeQuery();
				}
				break;
			case 7:
				{
				_localctx = new ThisPrimTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 369;
				Match(This);
				}
				break;
			case 8:
				{
				_localctx = new RedefinitionOfTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 370;
				typeReference();
				State = 371;
				Match(Is);
				State = 372;
				primaryType(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 382;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArrayPrimTypeContext(new PrimaryTypeContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_primaryType);
					State = 376;
					if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
					State = 377;
					if (!(notLineTerminator())) throw new FailedPredicateException(this, "notLineTerminator()");
					State = 378;
					Match(OpenBracket);
					State = 379;
					Match(CloseBracket);
					}
					} 
				}
				State = 384;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PredefinedTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Any() { return GetToken(TypeScriptParser.Any, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(TypeScriptParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Boolean() { return GetToken(TypeScriptParser.Boolean, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(TypeScriptParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Symbol() { return GetToken(TypeScriptParser.Symbol, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(TypeScriptParser.Void, 0); }
		public PredefinedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predefinedType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPredefinedType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPredefinedType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredefinedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredefinedTypeContext predefinedType() {
		PredefinedTypeContext _localctx = new PredefinedTypeContext(Context, State);
		EnterRule(_localctx, 24, RULE_predefinedType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (Void - 73)) | (1L << (Any - 73)) | (1L << (Number - 73)) | (1L << (Boolean - 73)) | (1L << (String - 73)) | (1L << (Symbol - 73)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedTypeGenericContext nestedTypeGeneric() {
			return GetRuleContext<NestedTypeGenericContext>(0);
		}
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 26, RULE_typeReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			typeName();
			State = 389;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 388;
				nestedTypeGeneric();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedTypeGenericContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeIncludeGenericContext typeIncludeGeneric() {
			return GetRuleContext<TypeIncludeGenericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeGenericContext typeGeneric() {
			return GetRuleContext<TypeGenericContext>(0);
		}
		public NestedTypeGenericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedTypeGeneric; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterNestedTypeGeneric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitNestedTypeGeneric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedTypeGeneric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedTypeGenericContext nestedTypeGeneric() {
		NestedTypeGenericContext _localctx = new NestedTypeGenericContext(Context, State);
		EnterRule(_localctx, 28, RULE_nestedTypeGeneric);
		try {
			State = 393;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 391;
				typeIncludeGeneric();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 392;
				typeGeneric();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeGenericContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(TypeScriptParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MoreThan() { return GetToken(TypeScriptParser.MoreThan, 0); }
		public TypeGenericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeGeneric; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeGeneric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeGeneric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeGeneric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeGenericContext typeGeneric() {
		TypeGenericContext _localctx = new TypeGenericContext(Context, State);
		EnterRule(_localctx, 30, RULE_typeGeneric);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395;
			Match(LessThan);
			State = 396;
			typeArgumentList();
			State = 397;
			Match(MoreThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeIncludeGenericContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LessThan() { return GetTokens(TypeScriptParser.LessThan); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan(int i) {
			return GetToken(TypeScriptParser.LessThan, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListContext[] typeArgumentList() {
			return GetRuleContexts<TypeArgumentListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentListContext typeArgumentList(int i) {
			return GetRuleContext<TypeArgumentListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MoreThan() { return GetTokens(TypeScriptParser.MoreThan); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MoreThan(int i) {
			return GetToken(TypeScriptParser.MoreThan, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BindingPatternContext bindingPattern() {
			return GetRuleContext<BindingPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmetic() { return GetToken(TypeScriptParser.RightShiftArithmetic, 0); }
		public TypeIncludeGenericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeIncludeGeneric; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeIncludeGeneric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeIncludeGeneric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeIncludeGeneric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeIncludeGenericContext typeIncludeGeneric() {
		TypeIncludeGenericContext _localctx = new TypeIncludeGenericContext(Context, State);
		EnterRule(_localctx, 32, RULE_typeIncludeGeneric);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			Match(LessThan);
			State = 400;
			typeArgumentList();
			State = 401;
			Match(LessThan);
			State = 402;
			typeArgumentList();
			State = 408;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MoreThan:
				{
				State = 403;
				Match(MoreThan);
				State = 404;
				bindingPattern();
				State = 405;
				Match(MoreThan);
				}
				break;
			case RightShiftArithmetic:
				{
				State = 407;
				Match(RightShiftArithmetic);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 34, RULE_typeName);
		try {
			State = 412;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 410;
				Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 411;
				namespaceName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeBodyContext typeBody() {
			return GetRuleContext<TypeBodyContext>(0);
		}
		public ObjectTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterObjectType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitObjectType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectTypeContext objectType() {
		ObjectTypeContext _localctx = new ObjectTypeContext(Context, State);
		EnterRule(_localctx, 36, RULE_objectType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			Match(OpenBrace);
			State = 416;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenParen) | (1L << LessThan) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral) | (1L << Break) | (1L << Do))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Instanceof - 64)) | (1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)))) != 0)) {
				{
				State = 415;
				typeBody();
				}
			}

			State = 418;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeMemberListContext typeMemberList() {
			return GetRuleContext<TypeMemberListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(TypeScriptParser.Comma, 0); }
		public TypeBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeBodyContext typeBody() {
		TypeBodyContext _localctx = new TypeBodyContext(Context, State);
		EnterRule(_localctx, 38, RULE_typeBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420;
			typeMemberList();
			State = 422;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SemiColon || _la==Comma) {
				{
				State = 421;
				_la = TokenStream.LA(1);
				if ( !(_la==SemiColon || _la==Comma) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeMemberListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeMemberContext[] typeMember() {
			return GetRuleContexts<TypeMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeMemberContext typeMember(int i) {
			return GetRuleContext<TypeMemberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SemiColon() { return GetTokens(TypeScriptParser.SemiColon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon(int i) {
			return GetToken(TypeScriptParser.SemiColon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public TypeMemberListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeMemberList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeMemberList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeMemberList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeMemberList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeMemberListContext typeMemberList() {
		TypeMemberListContext _localctx = new TypeMemberListContext(Context, State);
		EnterRule(_localctx, 40, RULE_typeMemberList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 424;
			typeMember();
			State = 429;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 425;
					_la = TokenStream.LA(1);
					if ( !(_la==SemiColon || _la==Comma) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 426;
					typeMember();
					}
					} 
				}
				State = 431;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertySignaturContext propertySignatur() {
			return GetRuleContext<PropertySignaturContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallSignatureContext callSignature() {
			return GetRuleContext<CallSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructSignatureContext constructSignature() {
			return GetRuleContext<ConstructSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexSignatureContext indexSignature() {
			return GetRuleContext<IndexSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodSignatureContext methodSignature() {
			return GetRuleContext<MethodSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(TypeScriptParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public TypeMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeMemberContext typeMember() {
		TypeMemberContext _localctx = new TypeMemberContext(Context, State);
		EnterRule(_localctx, 42, RULE_typeMember);
		int _la;
		try {
			State = 441;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 432;
				propertySignatur();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 433;
				callSignature();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 434;
				constructSignature();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 435;
				indexSignature();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 436;
				methodSignature();
				State = 439;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ARROW) {
					{
					State = 437;
					Match(ARROW);
					State = 438;
					type_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryTypeContext primaryType() {
			return GetRuleContext<PrimaryTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(TypeScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(TypeScriptParser.CloseBracket, 0); }
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 44, RULE_arrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 443;
			primaryType(0);
			State = 444;
			if (!(notLineTerminator())) throw new FailedPredicateException(this, "notLineTerminator()");
			State = 445;
			Match(OpenBracket);
			State = 446;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(TypeScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleElementTypesContext tupleElementTypes() {
			return GetRuleContext<TupleElementTypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(TypeScriptParser.CloseBracket, 0); }
		public TupleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTupleType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTupleType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleTypeContext tupleType() {
		TupleTypeContext _localctx = new TupleTypeContext(Context, State);
		EnterRule(_localctx, 46, RULE_tupleType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448;
			Match(OpenBracket);
			State = 449;
			tupleElementTypes();
			State = 450;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleElementTypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context[] type_() {
			return GetRuleContexts<Type_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_(int i) {
			return GetRuleContext<Type_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public TupleElementTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleElementTypes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTupleElementTypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTupleElementTypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleElementTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleElementTypesContext tupleElementTypes() {
		TupleElementTypesContext _localctx = new TupleElementTypesContext(Context, State);
		EnterRule(_localctx, 48, RULE_tupleElementTypes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 452;
			type_();
			State = 457;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 453;
				Match(Comma);
				State = 454;
				type_();
				}
				}
				State = 459;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(TypeScriptParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public FunctionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeContext functionType() {
		FunctionTypeContext _localctx = new FunctionTypeContext(Context, State);
		EnterRule(_localctx, 50, RULE_functionType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LessThan) {
				{
				State = 460;
				typeParameters();
				}
			}

			State = 463;
			Match(OpenParen);
			State = 465;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << Break) | (1L << Do))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Instanceof - 64)) | (1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (At - 64)) | (1L << (Identifier - 64)))) != 0)) {
				{
				State = 464;
				parameterList();
				}
			}

			State = 467;
			Match(CloseParen);
			State = 468;
			Match(ARROW);
			State = 469;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(TypeScriptParser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(TypeScriptParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ConstructorTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterConstructorType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitConstructorType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorTypeContext constructorType() {
		ConstructorTypeContext _localctx = new ConstructorTypeContext(Context, State);
		EnterRule(_localctx, 52, RULE_constructorType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471;
			Match(New);
			State = 473;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LessThan) {
				{
				State = 472;
				typeParameters();
				}
			}

			State = 475;
			Match(OpenParen);
			State = 477;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << Break) | (1L << Do))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Instanceof - 64)) | (1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (At - 64)) | (1L << (Identifier - 64)))) != 0)) {
				{
				State = 476;
				parameterList();
				}
			}

			State = 479;
			Match(CloseParen);
			State = 480;
			Match(ARROW);
			State = 481;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeQueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typeof() { return GetToken(TypeScriptParser.Typeof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeQueryExpressionContext typeQueryExpression() {
			return GetRuleContext<TypeQueryExpressionContext>(0);
		}
		public TypeQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeQueryContext typeQuery() {
		TypeQueryContext _localctx = new TypeQueryContext(Context, State);
		EnterRule(_localctx, 54, RULE_typeQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483;
			Match(Typeof);
			State = 484;
			typeQueryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeQueryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(TypeScriptParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(TypeScriptParser.Dot, i);
		}
		public TypeQueryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeQueryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeQueryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeQueryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeQueryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeQueryExpressionContext typeQueryExpression() {
		TypeQueryExpressionContext _localctx = new TypeQueryExpressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_typeQueryExpression);
		try {
			int _alt;
			State = 496;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 486;
				Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 490;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 487;
						identifierName();
						State = 488;
						Match(Dot);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 492;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 494;
				identifierName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySignaturContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ReadOnly() { return GetToken(TypeScriptParser.ReadOnly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(TypeScriptParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(TypeScriptParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public PropertySignaturContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySignatur; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertySignatur(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertySignatur(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySignatur(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySignaturContext propertySignatur() {
		PropertySignaturContext _localctx = new PropertySignaturContext(Context, State);
		EnterRule(_localctx, 58, RULE_propertySignatur);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 499;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 498;
				Match(ReadOnly);
				}
				break;
			}
			State = 501;
			propertyName();
			State = 503;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QuestionMark) {
				{
				State = 502;
				Match(QuestionMark);
				}
			}

			State = 506;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 505;
				typeAnnotation();
				}
			}

			State = 510;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARROW) {
				{
				State = 508;
				Match(ARROW);
				State = 509;
				type_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(TypeScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public TypeAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAnnotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeAnnotationContext typeAnnotation() {
		TypeAnnotationContext _localctx = new TypeAnnotationContext(Context, State);
		EnterRule(_localctx, 60, RULE_typeAnnotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 512;
			Match(Colon);
			State = 513;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		public CallSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterCallSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitCallSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallSignatureContext callSignature() {
		CallSignatureContext _localctx = new CallSignatureContext(Context, State);
		EnterRule(_localctx, 62, RULE_callSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LessThan) {
				{
				State = 515;
				typeParameters();
				}
			}

			State = 518;
			Match(OpenParen);
			State = 520;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << Break) | (1L << Do))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Instanceof - 64)) | (1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (At - 64)) | (1L << (Identifier - 64)))) != 0)) {
				{
				State = 519;
				parameterList();
				}
			}

			State = 522;
			Match(CloseParen);
			State = 524;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				{
				State = 523;
				typeAnnotation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RestParameterContext restParameter() {
			return GetRuleContext<RestParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 64, RULE_parameterList);
		int _la;
		try {
			int _alt;
			State = 539;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Ellipsis:
				EnterOuterAlt(_localctx, 1);
				{
				State = 526;
				restParameter();
				}
				break;
			case OpenBracket:
			case OpenBrace:
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case From:
			case ReadOnly:
			case Async:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Implements:
			case Let:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Yield:
			case String:
			case TypeAlias:
			case Get:
			case Set:
			case Require:
			case At:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 527;
				parameter();
				State = 532;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 528;
						Match(Comma);
						State = 529;
						parameter();
						}
						} 
					}
					State = 534;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
				}
				State = 537;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 535;
					Match(Comma);
					State = 536;
					restParameter();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequiredParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RequiredParameterContext[] requiredParameter() {
			return GetRuleContexts<RequiredParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RequiredParameterContext requiredParameter(int i) {
			return GetRuleContext<RequiredParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public RequiredParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requiredParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterRequiredParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitRequiredParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequiredParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequiredParameterListContext requiredParameterList() {
		RequiredParameterListContext _localctx = new RequiredParameterListContext(Context, State);
		EnterRule(_localctx, 66, RULE_requiredParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 541;
			requiredParameter();
			State = 546;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 542;
				Match(Comma);
				State = 543;
				requiredParameter();
				}
				}
				State = 548;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RequiredParameterContext requiredParameter() {
			return GetRuleContext<RequiredParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionalParameterContext optionalParameter() {
			return GetRuleContext<OptionalParameterContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 68, RULE_parameter);
		try {
			State = 551;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 549;
				requiredParameter();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 550;
				optionalParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierOrPatternContext identifierOrPattern() {
			return GetRuleContext<IdentifierOrPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorListContext decoratorList() {
			return GetRuleContext<DecoratorListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(TypeScriptParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessibilityModifierContext accessibilityModifier() {
			return GetRuleContext<AccessibilityModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		public OptionalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterOptionalParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitOptionalParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionalParameterContext optionalParameter() {
		OptionalParameterContext _localctx = new OptionalParameterContext(Context, State);
		EnterRule(_localctx, 70, RULE_optionalParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 554;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==At) {
				{
				State = 553;
				decoratorList();
				}
			}

			{
			State = 557;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 556;
				accessibilityModifier();
				}
				break;
			}
			State = 559;
			identifierOrPattern();
			State = 568;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QuestionMark:
				{
				State = 560;
				Match(QuestionMark);
				State = 562;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 561;
					typeAnnotation();
					}
				}

				}
				break;
			case Assign:
			case Colon:
				{
				State = 565;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 564;
					typeAnnotation();
					}
				}

				State = 567;
				initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(TypeScriptParser.Ellipsis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		public RestParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_restParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterRestParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitRestParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRestParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RestParameterContext restParameter() {
		RestParameterContext _localctx = new RestParameterContext(Context, State);
		EnterRule(_localctx, 72, RULE_restParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 570;
			Match(Ellipsis);
			State = 571;
			singleExpression(0);
			State = 573;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 572;
				typeAnnotation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequiredParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierOrPatternContext identifierOrPattern() {
			return GetRuleContext<IdentifierOrPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorListContext decoratorList() {
			return GetRuleContext<DecoratorListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessibilityModifierContext accessibilityModifier() {
			return GetRuleContext<AccessibilityModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		public RequiredParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requiredParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterRequiredParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitRequiredParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequiredParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequiredParameterContext requiredParameter() {
		RequiredParameterContext _localctx = new RequiredParameterContext(Context, State);
		EnterRule(_localctx, 74, RULE_requiredParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 576;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==At) {
				{
				State = 575;
				decoratorList();
				}
			}

			State = 579;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 578;
				accessibilityModifier();
				}
				break;
			}
			State = 581;
			identifierOrPattern();
			State = 583;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 582;
				typeAnnotation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessibilityModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Public() { return GetToken(TypeScriptParser.Public, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Private() { return GetToken(TypeScriptParser.Private, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Protected() { return GetToken(TypeScriptParser.Protected, 0); }
		public AccessibilityModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessibilityModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterAccessibilityModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitAccessibilityModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessibilityModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessibilityModifierContext accessibilityModifier() {
		AccessibilityModifierContext _localctx = new AccessibilityModifierContext(Context, State);
		EnterRule(_localctx, 76, RULE_accessibilityModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 585;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (Private - 101)) | (1L << (Public - 101)) | (1L << (Protected - 101)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierOrPatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BindingPatternContext bindingPattern() {
			return GetRuleContext<BindingPatternContext>(0);
		}
		public IdentifierOrPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierOrPattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifierOrPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifierOrPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierOrPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierOrPatternContext identifierOrPattern() {
		IdentifierOrPatternContext _localctx = new IdentifierOrPatternContext(Context, State);
		EnterRule(_localctx, 78, RULE_identifierOrPattern);
		try {
			State = 589;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case From:
			case ReadOnly:
			case Async:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Implements:
			case Let:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Yield:
			case String:
			case TypeAlias:
			case Get:
			case Set:
			case Require:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 587;
				identifierName();
				}
				break;
			case OpenBracket:
			case OpenBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 588;
				bindingPattern();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(TypeScriptParser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		public ConstructSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterConstructSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitConstructSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructSignatureContext constructSignature() {
		ConstructSignatureContext _localctx = new ConstructSignatureContext(Context, State);
		EnterRule(_localctx, 80, RULE_constructSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591;
			Match(New);
			State = 593;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LessThan) {
				{
				State = 592;
				typeParameters();
				}
			}

			State = 595;
			Match(OpenParen);
			State = 597;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << Break) | (1L << Do))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Instanceof - 64)) | (1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (At - 64)) | (1L << (Identifier - 64)))) != 0)) {
				{
				State = 596;
				parameterList();
				}
			}

			State = 599;
			Match(CloseParen);
			State = 601;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 600;
				typeAnnotation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(TypeScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(TypeScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(TypeScriptParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(TypeScriptParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(TypeScriptParser.String, 0); }
		public IndexSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterIndexSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitIndexSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexSignatureContext indexSignature() {
		IndexSignatureContext _localctx = new IndexSignatureContext(Context, State);
		EnterRule(_localctx, 82, RULE_indexSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 603;
			Match(OpenBracket);
			State = 604;
			Match(Identifier);
			State = 605;
			Match(Colon);
			State = 606;
			_la = TokenStream.LA(1);
			if ( !(_la==Number || _la==String) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 607;
			Match(CloseBracket);
			State = 608;
			typeAnnotation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodSignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallSignatureContext callSignature() {
			return GetRuleContext<CallSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(TypeScriptParser.QuestionMark, 0); }
		public MethodSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterMethodSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitMethodSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodSignatureContext methodSignature() {
		MethodSignatureContext _localctx = new MethodSignatureContext(Context, State);
		EnterRule(_localctx, 84, RULE_methodSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 610;
			propertyName();
			State = 612;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QuestionMark) {
				{
				State = 611;
				Match(QuestionMark);
				}
			}

			State = 614;
			callSignature();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAliasDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TypeAlias() { return GetToken(TypeScriptParser.TypeAlias, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(TypeScriptParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public TypeAliasDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAliasDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeAliasDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeAliasDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeAliasDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeAliasDeclarationContext typeAliasDeclaration() {
		TypeAliasDeclarationContext _localctx = new TypeAliasDeclarationContext(Context, State);
		EnterRule(_localctx, 86, RULE_typeAliasDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 616;
			Match(TypeAlias);
			State = 617;
			Match(Identifier);
			State = 619;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LessThan) {
				{
				State = 618;
				typeParameters();
				}
			}

			State = 621;
			Match(Assign);
			State = 622;
			type_();
			State = 623;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constructor() { return GetToken(TypeScriptParser.Constructor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessibilityModifierContext accessibilityModifier() {
			return GetRuleContext<AccessibilityModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		public ConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterConstructorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitConstructorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclarationContext constructorDeclaration() {
		ConstructorDeclarationContext _localctx = new ConstructorDeclarationContext(Context, State);
		EnterRule(_localctx, 88, RULE_constructorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 626;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (Private - 101)) | (1L << (Public - 101)) | (1L << (Protected - 101)))) != 0)) {
				{
				State = 625;
				accessibilityModifier();
				}
			}

			State = 628;
			Match(Constructor);
			State = 629;
			Match(OpenParen);
			State = 631;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || ((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (Private - 101)) | (1L << (Public - 101)) | (1L << (Protected - 101)) | (1L << (TypeAlias - 101)) | (1L << (Require - 101)) | (1L << (At - 101)) | (1L << (Identifier - 101)))) != 0)) {
				{
				State = 630;
				formalParameterList();
				}
			}

			State = 633;
			Match(CloseParen);
			State = 639;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				{
				State = 634;
				Match(OpenBrace);
				State = 635;
				functionBody();
				State = 636;
				Match(CloseBrace);
				}
				}
				break;
			case 2:
				{
				State = 638;
				Match(SemiColon);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Interface() { return GetToken(TypeScriptParser.Interface, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectTypeContext objectType() {
			return GetRuleContext<ObjectTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(TypeScriptParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Declare() { return GetToken(TypeScriptParser.Declare, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceExtendsClauseContext interfaceExtendsClause() {
			return GetRuleContext<InterfaceExtendsClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		public InterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterInterfaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitInterfaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDeclarationContext interfaceDeclaration() {
		InterfaceDeclarationContext _localctx = new InterfaceDeclarationContext(Context, State);
		EnterRule(_localctx, 90, RULE_interfaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 642;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Export) {
				{
				State = 641;
				Match(Export);
				}
			}

			State = 645;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Declare) {
				{
				State = 644;
				Match(Declare);
				}
			}

			State = 647;
			Match(Interface);
			State = 648;
			Match(Identifier);
			State = 650;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LessThan) {
				{
				State = 649;
				typeParameters();
				}
			}

			State = 653;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Extends) {
				{
				State = 652;
				interfaceExtendsClause();
				}
			}

			State = 655;
			objectType();
			State = 657;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				{
				State = 656;
				Match(SemiColon);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceExtendsClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extends() { return GetToken(TypeScriptParser.Extends, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceTypeListContext classOrInterfaceTypeList() {
			return GetRuleContext<ClassOrInterfaceTypeListContext>(0);
		}
		public InterfaceExtendsClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceExtendsClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterInterfaceExtendsClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitInterfaceExtendsClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceExtendsClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceExtendsClauseContext interfaceExtendsClause() {
		InterfaceExtendsClauseContext _localctx = new InterfaceExtendsClauseContext(Context, State);
		EnterRule(_localctx, 92, RULE_interfaceExtendsClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 659;
			Match(Extends);
			State = 660;
			classOrInterfaceTypeList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrInterfaceTypeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext[] typeReference() {
			return GetRuleContexts<TypeReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference(int i) {
			return GetRuleContext<TypeReferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public ClassOrInterfaceTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrInterfaceTypeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterClassOrInterfaceTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitClassOrInterfaceTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassOrInterfaceTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrInterfaceTypeListContext classOrInterfaceTypeList() {
		ClassOrInterfaceTypeListContext _localctx = new ClassOrInterfaceTypeListContext(Context, State);
		EnterRule(_localctx, 94, RULE_classOrInterfaceTypeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 662;
			typeReference();
			State = 667;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 663;
				Match(Comma);
				State = 664;
				typeReference();
				}
				}
				State = 669;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(TypeScriptParser.Enum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(TypeScriptParser.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumBodyContext enumBody() {
			return GetRuleContext<EnumBodyContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 96, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 671;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Const) {
				{
				State = 670;
				Match(Const);
				}
			}

			State = 673;
			Match(Enum);
			State = 674;
			Match(Identifier);
			State = 675;
			Match(OpenBrace);
			State = 677;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral) | (1L << Break) | (1L << Do))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Instanceof - 64)) | (1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)))) != 0)) {
				{
				State = 676;
				enumBody();
				}
			}

			State = 679;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumMemberListContext enumMemberList() {
			return GetRuleContext<EnumMemberListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(TypeScriptParser.Comma, 0); }
		public EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterEnumBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitEnumBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyContext enumBody() {
		EnumBodyContext _localctx = new EnumBodyContext(Context, State);
		EnterRule(_localctx, 98, RULE_enumBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 681;
			enumMemberList();
			State = 683;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 682;
				Match(Comma);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMemberListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumMemberContext[] enumMember() {
			return GetRuleContexts<EnumMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumMemberContext enumMember(int i) {
			return GetRuleContext<EnumMemberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public EnumMemberListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMemberList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterEnumMemberList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitEnumMemberList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumMemberList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumMemberListContext enumMemberList() {
		EnumMemberListContext _localctx = new EnumMemberListContext(Context, State);
		EnterRule(_localctx, 100, RULE_enumMemberList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 685;
			enumMember();
			State = 690;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 686;
					Match(Comma);
					State = 687;
					enumMember();
					}
					} 
				}
				State = 692;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(TypeScriptParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public EnumMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterEnumMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitEnumMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumMemberContext enumMember() {
		EnumMemberContext _localctx = new EnumMemberContext(Context, State);
		EnterRule(_localctx, 102, RULE_enumMember);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 693;
			propertyName();
			State = 696;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 694;
				Match(Assign);
				State = 695;
				singleExpression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Namespace() { return GetToken(TypeScriptParser.Namespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 104, RULE_namespaceDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 698;
			Match(Namespace);
			State = 699;
			namespaceName();
			State = 700;
			Match(OpenBrace);
			State = 702;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				{
				State = 701;
				statementList();
				}
				break;
			}
			State = 704;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(TypeScriptParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(TypeScriptParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(TypeScriptParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(TypeScriptParser.Dot, i);
		}
		public NamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterNamespaceName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitNamespaceName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameContext namespaceName() {
		NamespaceNameContext _localctx = new NamespaceNameContext(Context, State);
		EnterRule(_localctx, 106, RULE_namespaceName);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 706;
			Match(Identifier);
			State = 715;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 708;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 707;
						Match(Dot);
						}
						}
						State = 710;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==Dot );
					State = 712;
					Match(Identifier);
					}
					} 
				}
				State = 717;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportAliasDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(TypeScriptParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		public ImportAliasDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importAliasDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterImportAliasDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitImportAliasDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportAliasDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportAliasDeclarationContext importAliasDeclaration() {
		ImportAliasDeclarationContext _localctx = new ImportAliasDeclarationContext(Context, State);
		EnterRule(_localctx, 108, RULE_importAliasDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 718;
			Match(Identifier);
			State = 719;
			Match(Assign);
			State = 720;
			namespaceName();
			State = 721;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecoratorListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorContext[] decorator() {
			return GetRuleContexts<DecoratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorContext decorator(int i) {
			return GetRuleContext<DecoratorContext>(i);
		}
		public DecoratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decoratorList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterDecoratorList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitDecoratorList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecoratorList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecoratorListContext decoratorList() {
		DecoratorListContext _localctx = new DecoratorListContext(Context, State);
		EnterRule(_localctx, 110, RULE_decoratorList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 724;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 723;
					decorator();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 726;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecoratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode At() { return GetToken(TypeScriptParser.At, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorMemberExpressionContext decoratorMemberExpression() {
			return GetRuleContext<DecoratorMemberExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorCallExpressionContext decoratorCallExpression() {
			return GetRuleContext<DecoratorCallExpressionContext>(0);
		}
		public DecoratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decorator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterDecorator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitDecorator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecorator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecoratorContext decorator() {
		DecoratorContext _localctx = new DecoratorContext(Context, State);
		EnterRule(_localctx, 112, RULE_decorator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 728;
			Match(At);
			State = 731;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				{
				State = 729;
				decoratorMemberExpression(0);
				}
				break;
			case 2:
				{
				State = 730;
				decoratorCallExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecoratorMemberExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorMemberExpressionContext decoratorMemberExpression() {
			return GetRuleContext<DecoratorMemberExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(TypeScriptParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public DecoratorMemberExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decoratorMemberExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterDecoratorMemberExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitDecoratorMemberExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecoratorMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecoratorMemberExpressionContext decoratorMemberExpression() {
		return decoratorMemberExpression(0);
	}

	private DecoratorMemberExpressionContext decoratorMemberExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DecoratorMemberExpressionContext _localctx = new DecoratorMemberExpressionContext(Context, _parentState);
		DecoratorMemberExpressionContext _prevctx = _localctx;
		int _startState = 114;
		EnterRecursionRule(_localctx, 114, RULE_decoratorMemberExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 739;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				{
				State = 734;
				Match(Identifier);
				}
				break;
			case OpenParen:
				{
				State = 735;
				Match(OpenParen);
				State = 736;
				singleExpression(0);
				State = 737;
				Match(CloseParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 746;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DecoratorMemberExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_decoratorMemberExpression);
					State = 741;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 742;
					Match(Dot);
					State = 743;
					identifierName();
					}
					} 
				}
				State = 748;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DecoratorCallExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorMemberExpressionContext decoratorMemberExpression() {
			return GetRuleContext<DecoratorMemberExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public DecoratorCallExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decoratorCallExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterDecoratorCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitDecoratorCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecoratorCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecoratorCallExpressionContext decoratorCallExpression() {
		DecoratorCallExpressionContext _localctx = new DecoratorCallExpressionContext(Context, State);
		EnterRule(_localctx, 116, RULE_decoratorCallExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 749;
			decoratorMemberExpression(0);
			State = 750;
			arguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TypeScriptParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementsContext sourceElements() {
			return GetRuleContext<SourceElementsContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 118, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 753;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				{
				State = 752;
				sourceElements();
				}
				break;
			}
			State = 755;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(TypeScriptParser.Export, 0); }
		public SourceElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterSourceElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitSourceElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceElementContext sourceElement() {
		SourceElementContext _localctx = new SourceElementContext(Context, State);
		EnterRule(_localctx, 120, RULE_sourceElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 758;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				{
				State = 757;
				Match(Export);
				}
				break;
			}
			State = 760;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext importStatement() {
			return GetRuleContext<ImportStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExportStatementContext exportStatement() {
			return GetRuleContext<ExportStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatement_Context emptyStatement_() {
			return GetRuleContext<EmptyStatement_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractDeclarationContext abstractDeclaration() {
			return GetRuleContext<AbstractDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorListContext decoratorList() {
			return GetRuleContext<DecoratorListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext namespaceDeclaration() {
			return GetRuleContext<NamespaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public YieldStatementContext yieldStatement() {
			return GetRuleContext<YieldStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithStatementContext withStatement() {
			return GetRuleContext<WithStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelledStatementContext labelledStatement() {
			return GetRuleContext<LabelledStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DebuggerStatementContext debuggerStatement() {
			return GetRuleContext<DebuggerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrowFunctionDeclarationContext arrowFunctionDeclaration() {
			return GetRuleContext<ArrowFunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneratorFunctionDeclarationContext generatorFunctionDeclaration() {
			return GetRuleContext<GeneratorFunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableStatementContext variableStatement() {
			return GetRuleContext<VariableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAliasDeclarationContext typeAliasDeclaration() {
			return GetRuleContext<TypeAliasDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(TypeScriptParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 122, RULE_statement);
		try {
			State = 792;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 762;
				block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 763;
				importStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 764;
				exportStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 765;
				emptyStatement_();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 766;
				abstractDeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 767;
				decoratorList();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 768;
				classDeclaration();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 769;
				interfaceDeclaration();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 770;
				namespaceDeclaration();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 771;
				ifStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 772;
				iterationStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 773;
				continueStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 774;
				breakStatement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 775;
				returnStatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 776;
				yieldStatement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 777;
				withStatement();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 778;
				labelledStatement();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 779;
				switchStatement();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 780;
				throwStatement();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 781;
				tryStatement();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 782;
				debuggerStatement();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 783;
				functionDeclaration();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 784;
				arrowFunctionDeclaration();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 785;
				generatorFunctionDeclaration();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 786;
				variableStatement();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 787;
				typeAliasDeclaration();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 788;
				enumDeclaration();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 789;
				expressionStatement();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 790;
				Match(Export);
				State = 791;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 124, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 794;
			Match(OpenBrace);
			State = 796;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
			case 1:
				{
				State = 795;
				statementList();
				}
				break;
			}
			State = 798;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 126, RULE_statementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 801;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 800;
					statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 803;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,80,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Abstract() { return GetToken(TypeScriptParser.Abstract, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CallSignatureContext callSignature() {
			return GetRuleContext<CallSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableStatementContext variableStatement() {
			return GetRuleContext<VariableStatementContext>(0);
		}
		public AbstractDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterAbstractDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitAbstractDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbstractDeclarationContext abstractDeclaration() {
		AbstractDeclarationContext _localctx = new AbstractDeclarationContext(Context, State);
		EnterRule(_localctx, 128, RULE_abstractDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 805;
			Match(Abstract);
			State = 809;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				{
				State = 806;
				Match(Identifier);
				State = 807;
				callSignature();
				}
				break;
			case 2:
				{
				State = 808;
				variableStatement();
				}
				break;
			}
			State = 811;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(TypeScriptParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FromBlockContext fromBlock() {
			return GetRuleContext<FromBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportAliasDeclarationContext importAliasDeclaration() {
			return GetRuleContext<ImportAliasDeclarationContext>(0);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 130, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 813;
			Match(Import);
			State = 816;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				{
				State = 814;
				fromBlock();
				}
				break;
			case 2:
				{
				State = 815;
				importAliasDeclaration();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(TypeScriptParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(TypeScriptParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(TypeScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MultipleImportStatementContext multipleImportStatement() {
			return GetRuleContext<MultipleImportStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(TypeScriptParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public FromBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterFromBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitFromBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFromBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FromBlockContext fromBlock() {
		FromBlockContext _localctx = new FromBlockContext(Context, State);
		EnterRule(_localctx, 132, RULE_fromBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 820;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Multiply:
				{
				State = 818;
				Match(Multiply);
				}
				break;
			case OpenBrace:
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case From:
			case ReadOnly:
			case Async:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Implements:
			case Let:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Yield:
			case String:
			case TypeAlias:
			case Get:
			case Set:
			case Require:
			case Identifier:
				{
				State = 819;
				multipleImportStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 824;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 822;
				Match(As);
				State = 823;
				identifierName();
				}
			}

			State = 826;
			Match(From);
			State = 827;
			Match(StringLiteral);
			State = 828;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultipleImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public MultipleImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multipleImportStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterMultipleImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitMultipleImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultipleImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultipleImportStatementContext multipleImportStatement() {
		MultipleImportStatementContext _localctx = new MultipleImportStatementContext(Context, State);
		EnterRule(_localctx, 134, RULE_multipleImportStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 833;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NullLiteral) | (1L << BooleanLiteral) | (1L << Break) | (1L << Do))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Instanceof - 64)) | (1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (Identifier - 64)))) != 0)) {
				{
				State = 830;
				identifierName();
				State = 831;
				Match(Comma);
				}
			}

			State = 835;
			Match(OpenBrace);
			State = 836;
			identifierName();
			State = 841;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 837;
				Match(Comma);
				State = 838;
				identifierName();
				}
				}
				State = 843;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 844;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(TypeScriptParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FromBlockContext fromBlock() {
			return GetRuleContext<FromBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(TypeScriptParser.Default, 0); }
		public ExportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterExportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitExportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportStatementContext exportStatement() {
		ExportStatementContext _localctx = new ExportStatementContext(Context, State);
		EnterRule(_localctx, 136, RULE_exportStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 846;
			Match(Export);
			State = 848;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				{
				State = 847;
				Match(Default);
				}
				break;
			}
			State = 852;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				{
				State = 850;
				fromBlock();
				}
				break;
			case 2:
				{
				State = 851;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BindingPatternContext bindingPattern() {
			return GetRuleContext<BindingPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessibilityModifierContext accessibilityModifier() {
			return GetRuleContext<AccessibilityModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarModifierContext varModifier() {
			return GetRuleContext<VarModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ReadOnly() { return GetToken(TypeScriptParser.ReadOnly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Declare() { return GetToken(TypeScriptParser.Declare, 0); }
		public VariableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableStatementContext variableStatement() {
		VariableStatementContext _localctx = new VariableStatementContext(Context, State);
		EnterRule(_localctx, 138, RULE_variableStatement);
		int _la;
		try {
			State = 883;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 854;
				bindingPattern();
				State = 856;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 855;
					typeAnnotation();
					}
				}

				State = 858;
				initializer();
				State = 860;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
				case 1:
					{
					State = 859;
					Match(SemiColon);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 863;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (Private - 101)) | (1L << (Public - 101)) | (1L << (Protected - 101)))) != 0)) {
					{
					State = 862;
					accessibilityModifier();
					}
				}

				State = 866;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (Var - 69)) | (1L << (Const - 69)) | (1L << (Let - 69)))) != 0)) {
					{
					State = 865;
					varModifier();
					}
				}

				State = 869;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ReadOnly) {
					{
					State = 868;
					Match(ReadOnly);
					}
				}

				State = 871;
				variableDeclarationList();
				State = 873;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
				case 1:
					{
					State = 872;
					Match(SemiColon);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 875;
				Match(Declare);
				State = 877;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (Var - 69)) | (1L << (Const - 69)) | (1L << (Let - 69)))) != 0)) {
					{
					State = 876;
					varModifier();
					}
				}

				State = 879;
				variableDeclarationList();
				State = 881;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
				case 1:
					{
					State = 880;
					Match(SemiColon);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public VariableDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationListContext variableDeclarationList() {
		VariableDeclarationListContext _localctx = new VariableDeclarationListContext(Context, State);
		EnterRule(_localctx, 140, RULE_variableDeclarationList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 885;
			variableDeclaration();
			State = 890;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,98,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 886;
					Match(Comma);
					State = 887;
					variableDeclaration();
					}
					} 
				}
				State = 892;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,98,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierOrKeyWordContext identifierOrKeyWord() {
			return GetRuleContext<IdentifierOrKeyWordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(TypeScriptParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 142, RULE_variableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 896;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TypeAlias:
			case Require:
			case Identifier:
				{
				State = 893;
				identifierOrKeyWord();
				}
				break;
			case OpenBracket:
				{
				State = 894;
				arrayLiteral();
				}
				break;
			case OpenBrace:
				{
				State = 895;
				objectLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 899;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
			case 1:
				{
				State = 898;
				typeAnnotation();
				}
				break;
			}
			State = 902;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				{
				State = 901;
				singleExpression(0);
				}
				break;
			}
			State = 909;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				{
				State = 904;
				Match(Assign);
				State = 906;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
				case 1:
					{
					State = 905;
					typeParameters();
					}
					break;
				}
				State = 908;
				singleExpression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatement_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		public EmptyStatement_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStatement_Context emptyStatement_() {
		EmptyStatement_Context _localctx = new EmptyStatement_Context(Context, State);
		EnterRule(_localctx, 144, RULE_emptyStatement_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 911;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 146, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 913;
			if (!(this.notOpenBraceAndNotFunction())) throw new FailedPredicateException(this, "this.notOpenBraceAndNotFunction()");
			State = 914;
			expressionSequence();
			State = 916;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
			case 1:
				{
				State = 915;
				Match(SemiColon);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(TypeScriptParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(TypeScriptParser.Else, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 148, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 918;
			Match(If);
			State = 919;
			Match(OpenParen);
			State = 920;
			expressionSequence();
			State = 921;
			Match(CloseParen);
			State = 922;
			statement();
			State = 925;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				{
				State = 923;
				Match(Else);
				State = 924;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
	 
		public IterationStatementContext() { }
		public virtual void CopyFrom(IterationStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DoStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(TypeScriptParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(TypeScriptParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public DoStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterDoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitDoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForVarStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(TypeScriptParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarModifierContext varModifier() {
			return GetRuleContext<VarModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SemiColon() { return GetTokens(TypeScriptParser.SemiColon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon(int i) {
			return GetToken(TypeScriptParser.SemiColon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext[] expressionSequence() {
			return GetRuleContexts<ExpressionSequenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence(int i) {
			return GetRuleContext<ExpressionSequenceContext>(i);
		}
		public ForVarStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterForVarStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitForVarStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForVarStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForVarInStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(TypeScriptParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarModifierContext varModifier() {
			return GetRuleContext<VarModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(TypeScriptParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		public ForVarInStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterForVarInStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitForVarInStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForVarInStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(TypeScriptParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(TypeScriptParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SemiColon() { return GetTokens(TypeScriptParser.SemiColon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon(int i) {
			return GetToken(TypeScriptParser.SemiColon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext[] expressionSequence() {
			return GetRuleContexts<ExpressionSequenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence(int i) {
			return GetRuleContext<ExpressionSequenceContext>(i);
		}
		public ForStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForInStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(TypeScriptParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(TypeScriptParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		public ForInStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterForInStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitForInStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 150, RULE_iterationStatement);
		int _la;
		try {
			State = 996;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
			case 1:
				_localctx = new DoStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 927;
				Match(Do);
				State = 928;
				statement();
				State = 929;
				Match(While);
				State = 930;
				Match(OpenParen);
				State = 931;
				expressionSequence();
				State = 932;
				Match(CloseParen);
				State = 933;
				eos();
				}
				break;
			case 2:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 935;
				Match(While);
				State = 936;
				Match(OpenParen);
				State = 937;
				expressionSequence();
				State = 938;
				Match(CloseParen);
				State = 939;
				statement();
				}
				break;
			case 3:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 941;
				Match(For);
				State = 942;
				Match(OpenParen);
				State = 944;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << LessThan) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral) | (1L << Break) | (1L << Do))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Instanceof - 64)) | (1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (BackTick - 64)))) != 0)) {
					{
					State = 943;
					expressionSequence();
					}
				}

				State = 946;
				Match(SemiColon);
				State = 948;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << LessThan) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral) | (1L << Break) | (1L << Do))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Instanceof - 64)) | (1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (BackTick - 64)))) != 0)) {
					{
					State = 947;
					expressionSequence();
					}
				}

				State = 950;
				Match(SemiColon);
				State = 952;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << LessThan) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral) | (1L << Break) | (1L << Do))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Instanceof - 64)) | (1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (BackTick - 64)))) != 0)) {
					{
					State = 951;
					expressionSequence();
					}
				}

				State = 954;
				Match(CloseParen);
				State = 955;
				statement();
				}
				break;
			case 4:
				_localctx = new ForVarStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 956;
				Match(For);
				State = 957;
				Match(OpenParen);
				State = 958;
				varModifier();
				State = 959;
				variableDeclarationList();
				State = 960;
				Match(SemiColon);
				State = 962;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << LessThan) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral) | (1L << Break) | (1L << Do))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Instanceof - 64)) | (1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (BackTick - 64)))) != 0)) {
					{
					State = 961;
					expressionSequence();
					}
				}

				State = 964;
				Match(SemiColon);
				State = 966;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << LessThan) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral) | (1L << Break) | (1L << Do))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Instanceof - 64)) | (1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (BackTick - 64)))) != 0)) {
					{
					State = 965;
					expressionSequence();
					}
				}

				State = 968;
				Match(CloseParen);
				State = 969;
				statement();
				}
				break;
			case 5:
				_localctx = new ForInStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 971;
				Match(For);
				State = 972;
				Match(OpenParen);
				State = 973;
				singleExpression(0);
				State = 977;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case In:
					{
					State = 974;
					Match(In);
					}
					break;
				case Identifier:
					{
					State = 975;
					Match(Identifier);
					State = 976;
					if (!(this.p("of"))) throw new FailedPredicateException(this, "this.p(\"of\")");
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 979;
				expressionSequence();
				State = 980;
				Match(CloseParen);
				State = 981;
				statement();
				}
				break;
			case 6:
				_localctx = new ForVarInStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 983;
				Match(For);
				State = 984;
				Match(OpenParen);
				State = 985;
				varModifier();
				State = 986;
				variableDeclaration();
				State = 990;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case In:
					{
					State = 987;
					Match(In);
					}
					break;
				case Identifier:
					{
					State = 988;
					Match(Identifier);
					State = 989;
					if (!(this.p("of"))) throw new FailedPredicateException(this, "this.p(\"of\")");
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 992;
				expressionSequence();
				State = 993;
				Match(CloseParen);
				State = 994;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(TypeScriptParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Let() { return GetToken(TypeScriptParser.Let, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(TypeScriptParser.Const, 0); }
		public VarModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterVarModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitVarModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarModifierContext varModifier() {
		VarModifierContext _localctx = new VarModifierContext(Context, State);
		EnterRule(_localctx, 152, RULE_varModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 998;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (Var - 69)) | (1L << (Const - 69)) | (1L << (Let - 69)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(TypeScriptParser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 154, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1000;
			Match(Continue);
			State = 1003;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				{
				State = 1001;
				if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
				State = 1002;
				Match(Identifier);
				}
				break;
			}
			State = 1005;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(TypeScriptParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 156, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1007;
			Match(Break);
			State = 1010;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				{
				State = 1008;
				if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
				State = 1009;
				Match(Identifier);
				}
				break;
			}
			State = 1012;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(TypeScriptParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 158, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1014;
			Match(Return);
			State = 1017;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				{
				State = 1015;
				if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
				State = 1016;
				expressionSequence();
				}
				break;
			}
			State = 1019;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YieldStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yield() { return GetToken(TypeScriptParser.Yield, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public YieldStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yieldStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterYieldStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitYieldStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYieldStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YieldStatementContext yieldStatement() {
		YieldStatementContext _localctx = new YieldStatementContext(Context, State);
		EnterRule(_localctx, 160, RULE_yieldStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1021;
			Match(Yield);
			State = 1024;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
			case 1:
				{
				State = 1022;
				if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
				State = 1023;
				expressionSequence();
				}
				break;
			}
			State = 1026;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode With() { return GetToken(TypeScriptParser.With, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WithStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterWithStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitWithStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStatementContext withStatement() {
		WithStatementContext _localctx = new WithStatementContext(Context, State);
		EnterRule(_localctx, 162, RULE_withStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1028;
			Match(With);
			State = 1029;
			Match(OpenParen);
			State = 1030;
			expressionSequence();
			State = 1031;
			Match(CloseParen);
			State = 1032;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(TypeScriptParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseBlockContext caseBlock() {
			return GetRuleContext<CaseBlockContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 164, RULE_switchStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1034;
			Match(Switch);
			State = 1035;
			Match(OpenParen);
			State = 1036;
			expressionSequence();
			State = 1037;
			Match(CloseParen);
			State = 1038;
			caseBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseClausesContext[] caseClauses() {
			return GetRuleContexts<CaseClausesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClausesContext caseClauses(int i) {
			return GetRuleContext<CaseClausesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultClauseContext defaultClause() {
			return GetRuleContext<DefaultClauseContext>(0);
		}
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterCaseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitCaseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 166, RULE_caseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1040;
			Match(OpenBrace);
			State = 1042;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Case) {
				{
				State = 1041;
				caseClauses();
				}
			}

			State = 1048;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Default) {
				{
				State = 1044;
				defaultClause();
				State = 1046;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Case) {
					{
					State = 1045;
					caseClauses();
					}
				}

				}
			}

			State = 1050;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseClauseContext[] caseClause() {
			return GetRuleContexts<CaseClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClauseContext caseClause(int i) {
			return GetRuleContext<CaseClauseContext>(i);
		}
		public CaseClausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterCaseClauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitCaseClauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseClauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseClausesContext caseClauses() {
		CaseClausesContext _localctx = new CaseClausesContext(Context, State);
		EnterRule(_localctx, 168, RULE_caseClauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1053;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1052;
				caseClause();
				}
				}
				State = 1055;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Case );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(TypeScriptParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(TypeScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public CaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterCaseClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitCaseClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseClauseContext caseClause() {
		CaseClauseContext _localctx = new CaseClauseContext(Context, State);
		EnterRule(_localctx, 170, RULE_caseClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1057;
			Match(Case);
			State = 1058;
			expressionSequence();
			State = 1059;
			Match(Colon);
			State = 1061;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
			case 1:
				{
				State = 1060;
				statementList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(TypeScriptParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(TypeScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public DefaultClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterDefaultClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitDefaultClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultClauseContext defaultClause() {
		DefaultClauseContext _localctx = new DefaultClauseContext(Context, State);
		EnterRule(_localctx, 172, RULE_defaultClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1063;
			Match(Default);
			State = 1064;
			Match(Colon);
			State = 1066;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
			case 1:
				{
				State = 1065;
				statementList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelledStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(TypeScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LabelledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelledStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterLabelledStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitLabelledStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelledStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelledStatementContext labelledStatement() {
		LabelledStatementContext _localctx = new LabelledStatementContext(Context, State);
		EnterRule(_localctx, 174, RULE_labelledStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1068;
			Match(Identifier);
			State = 1069;
			Match(Colon);
			State = 1070;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(TypeScriptParser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
		EnterRule(_localctx, 176, RULE_throwStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1072;
			Match(Throw);
			State = 1073;
			if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
			State = 1074;
			expressionSequence();
			State = 1075;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(TypeScriptParser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchProductionContext catchProduction() {
			return GetRuleContext<CatchProductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinallyProductionContext finallyProduction() {
			return GetRuleContext<FinallyProductionContext>(0);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(Context, State);
		EnterRule(_localctx, 178, RULE_tryStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1077;
			Match(Try);
			State = 1078;
			block();
			State = 1084;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Catch:
				{
				State = 1079;
				catchProduction();
				State = 1081;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
				case 1:
					{
					State = 1080;
					finallyProduction();
					}
					break;
				}
				}
				break;
			case Finally:
				{
				State = 1083;
				finallyProduction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(TypeScriptParser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CatchProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterCatchProduction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitCatchProduction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchProductionContext catchProduction() {
		CatchProductionContext _localctx = new CatchProductionContext(Context, State);
		EnterRule(_localctx, 180, RULE_catchProduction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1086;
			Match(Catch);
			State = 1087;
			Match(OpenParen);
			State = 1088;
			Match(Identifier);
			State = 1089;
			Match(CloseParen);
			State = 1090;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyProductionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Finally() { return GetToken(TypeScriptParser.Finally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FinallyProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyProduction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterFinallyProduction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitFinallyProduction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyProduction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyProductionContext finallyProduction() {
		FinallyProductionContext _localctx = new FinallyProductionContext(Context, State);
		EnterRule(_localctx, 182, RULE_finallyProduction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1092;
			Match(Finally);
			State = 1093;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DebuggerStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Debugger() { return GetToken(TypeScriptParser.Debugger, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public DebuggerStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debuggerStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterDebuggerStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitDebuggerStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDebuggerStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DebuggerStatementContext debuggerStatement() {
		DebuggerStatementContext _localctx = new DebuggerStatementContext(Context, State);
		EnterRule(_localctx, 184, RULE_debuggerStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1095;
			Match(Debugger);
			State = 1096;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function_() { return GetToken(TypeScriptParser.Function_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CallSignatureContext callSignature() {
			return GetRuleContext<CallSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 186, RULE_functionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1098;
			Match(Function_);
			State = 1099;
			Match(Identifier);
			State = 1100;
			callSignature();
			State = 1106;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBrace:
				{
				{
				State = 1101;
				Match(OpenBrace);
				State = 1102;
				functionBody();
				State = 1103;
				Match(CloseBrace);
				}
				}
				break;
			case SemiColon:
				{
				State = 1105;
				Match(SemiColon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(TypeScriptParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassHeritageContext classHeritage() {
			return GetRuleContext<ClassHeritageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassTailContext classTail() {
			return GetRuleContext<ClassTailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Abstract() { return GetToken(TypeScriptParser.Abstract, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 188, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Abstract) {
				{
				State = 1108;
				Match(Abstract);
				}
			}

			State = 1111;
			Match(Class);
			State = 1112;
			Match(Identifier);
			State = 1114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LessThan) {
				{
				State = 1113;
				typeParameters();
				}
			}

			State = 1116;
			classHeritage();
			State = 1117;
			classTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassHeritageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassExtendsClauseContext classExtendsClause() {
			return GetRuleContext<ClassExtendsClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImplementsClauseContext implementsClause() {
			return GetRuleContext<ImplementsClauseContext>(0);
		}
		public ClassHeritageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classHeritage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterClassHeritage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitClassHeritage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassHeritage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassHeritageContext classHeritage() {
		ClassHeritageContext _localctx = new ClassHeritageContext(Context, State);
		EnterRule(_localctx, 190, RULE_classHeritage);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Extends) {
				{
				State = 1119;
				classExtendsClause();
				}
			}

			State = 1123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Implements) {
				{
				State = 1122;
				implementsClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassElementContext[] classElement() {
			return GetRuleContexts<ClassElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassElementContext classElement(int i) {
			return GetRuleContext<ClassElementContext>(i);
		}
		public ClassTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classTail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterClassTail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitClassTail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassTail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTailContext classTail() {
		ClassTailContext _localctx = new ClassTailContext(Context, State);
		EnterRule(_localctx, 192, RULE_classTail);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1125;
			Match(OpenBrace);
			State = 1129;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,131,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1126;
					classElement();
					}
					} 
				}
				State = 1131;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,131,Context);
			}
			State = 1132;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassExtendsClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extends() { return GetToken(TypeScriptParser.Extends, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public ClassExtendsClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classExtendsClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterClassExtendsClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitClassExtendsClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassExtendsClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassExtendsClauseContext classExtendsClause() {
		ClassExtendsClauseContext _localctx = new ClassExtendsClauseContext(Context, State);
		EnterRule(_localctx, 194, RULE_classExtendsClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1134;
			Match(Extends);
			State = 1135;
			typeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementsClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Implements() { return GetToken(TypeScriptParser.Implements, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceTypeListContext classOrInterfaceTypeList() {
			return GetRuleContext<ClassOrInterfaceTypeListContext>(0);
		}
		public ImplementsClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementsClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterImplementsClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitImplementsClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementsClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplementsClauseContext implementsClause() {
		ImplementsClauseContext _localctx = new ImplementsClauseContext(Context, State);
		EnterRule(_localctx, 196, RULE_implementsClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1137;
			Match(Implements);
			State = 1138;
			classOrInterfaceTypeList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorDeclarationContext constructorDeclaration() {
			return GetRuleContext<ConstructorDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyMemberDeclarationContext propertyMemberDeclaration() {
			return GetRuleContext<PropertyMemberDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorListContext decoratorList() {
			return GetRuleContext<DecoratorListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexMemberDeclarationContext indexMemberDeclaration() {
			return GetRuleContext<IndexMemberDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ClassElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterClassElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitClassElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassElementContext classElement() {
		ClassElementContext _localctx = new ClassElementContext(Context, State);
		EnterRule(_localctx, 198, RULE_classElement);
		int _la;
		try {
			State = 1147;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,133,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1140;
				constructorDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==At) {
					{
					State = 1141;
					decoratorList();
					}
				}

				State = 1144;
				propertyMemberDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1145;
				indexMemberDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1146;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyMemberDeclarationContext : ParserRuleContext {
		public PropertyMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyMemberDeclaration; } }
	 
		public PropertyMemberDeclarationContext() { }
		public virtual void CopyFrom(PropertyMemberDeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PropertyDeclarationExpressionContext : PropertyMemberDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyMemberBaseContext propertyMemberBase() {
			return GetRuleContext<PropertyMemberBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(TypeScriptParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public PropertyDeclarationExpressionContext(PropertyMemberDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertyDeclarationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertyDeclarationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyDeclarationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodDeclarationExpressionContext : PropertyMemberDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyMemberBaseContext propertyMemberBase() {
			return GetRuleContext<PropertyMemberBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallSignatureContext callSignature() {
			return GetRuleContext<CallSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		public MethodDeclarationExpressionContext(PropertyMemberDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterMethodDeclarationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitMethodDeclarationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclarationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetterSetterDeclarationExpressionContext : PropertyMemberDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyMemberBaseContext propertyMemberBase() {
			return GetRuleContext<PropertyMemberBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GetAccessorContext getAccessor() {
			return GetRuleContext<GetAccessorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetAccessorContext setAccessor() {
			return GetRuleContext<SetAccessorContext>(0);
		}
		public GetterSetterDeclarationExpressionContext(PropertyMemberDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterGetterSetterDeclarationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitGetterSetterDeclarationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetterSetterDeclarationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AbstractMemberDeclarationContext : PropertyMemberDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public AbstractDeclarationContext abstractDeclaration() {
			return GetRuleContext<AbstractDeclarationContext>(0);
		}
		public AbstractMemberDeclarationContext(PropertyMemberDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterAbstractMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitAbstractMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyMemberDeclarationContext propertyMemberDeclaration() {
		PropertyMemberDeclarationContext _localctx = new PropertyMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 200, RULE_propertyMemberDeclaration);
		int _la;
		try {
			State = 1178;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,139,Context) ) {
			case 1:
				_localctx = new PropertyDeclarationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1149;
				propertyMemberBase();
				State = 1150;
				propertyName();
				State = 1152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QuestionMark) {
					{
					State = 1151;
					Match(QuestionMark);
					}
				}

				State = 1155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 1154;
					typeAnnotation();
					}
				}

				State = 1158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Assign) {
					{
					State = 1157;
					initializer();
					}
				}

				State = 1160;
				Match(SemiColon);
				}
				break;
			case 2:
				_localctx = new MethodDeclarationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1162;
				propertyMemberBase();
				State = 1163;
				propertyName();
				State = 1164;
				callSignature();
				State = 1170;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OpenBrace:
					{
					{
					State = 1165;
					Match(OpenBrace);
					State = 1166;
					functionBody();
					State = 1167;
					Match(CloseBrace);
					}
					}
					break;
				case SemiColon:
					{
					State = 1169;
					Match(SemiColon);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				_localctx = new GetterSetterDeclarationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1172;
				propertyMemberBase();
				State = 1175;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Get:
					{
					State = 1173;
					getAccessor();
					}
					break;
				case Set:
					{
					State = 1174;
					setAccessor();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new AbstractMemberDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1177;
				abstractDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyMemberBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(TypeScriptParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AccessibilityModifierContext accessibilityModifier() {
			return GetRuleContext<AccessibilityModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(TypeScriptParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ReadOnly() { return GetToken(TypeScriptParser.ReadOnly, 0); }
		public PropertyMemberBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyMemberBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertyMemberBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertyMemberBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyMemberBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyMemberBaseContext propertyMemberBase() {
		PropertyMemberBaseContext _localctx = new PropertyMemberBaseContext(Context, State);
		EnterRule(_localctx, 202, RULE_propertyMemberBase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1181;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,140,Context) ) {
			case 1:
				{
				State = 1180;
				Match(Async);
				}
				break;
			}
			State = 1184;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,141,Context) ) {
			case 1:
				{
				State = 1183;
				accessibilityModifier();
				}
				break;
			}
			State = 1187;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
			case 1:
				{
				State = 1186;
				Match(Static);
				}
				break;
			}
			State = 1190;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,143,Context) ) {
			case 1:
				{
				State = 1189;
				Match(ReadOnly);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexMemberDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndexSignatureContext indexSignature() {
			return GetRuleContext<IndexSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		public IndexMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexMemberDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterIndexMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitIndexMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexMemberDeclarationContext indexMemberDeclaration() {
		IndexMemberDeclarationContext _localctx = new IndexMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 204, RULE_indexMemberDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1192;
			indexSignature();
			State = 1193;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneratorMethodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(TypeScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public GeneratorMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generatorMethod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterGeneratorMethod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitGeneratorMethod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneratorMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneratorMethodContext generatorMethod() {
		GeneratorMethodContext _localctx = new GeneratorMethodContext(Context, State);
		EnterRule(_localctx, 206, RULE_generatorMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Multiply) {
				{
				State = 1195;
				Match(Multiply);
				}
			}

			State = 1198;
			Match(Identifier);
			State = 1199;
			Match(OpenParen);
			State = 1201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || ((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (Private - 101)) | (1L << (Public - 101)) | (1L << (Protected - 101)) | (1L << (TypeAlias - 101)) | (1L << (Require - 101)) | (1L << (At - 101)) | (1L << (Identifier - 101)))) != 0)) {
				{
				State = 1200;
				formalParameterList();
				}
			}

			State = 1203;
			Match(CloseParen);
			State = 1204;
			Match(OpenBrace);
			State = 1205;
			functionBody();
			State = 1206;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneratorFunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function_() { return GetToken(TypeScriptParser.Function_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(TypeScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public GeneratorFunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generatorFunctionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterGeneratorFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitGeneratorFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneratorFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneratorFunctionDeclarationContext generatorFunctionDeclaration() {
		GeneratorFunctionDeclarationContext _localctx = new GeneratorFunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 208, RULE_generatorFunctionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1208;
			Match(Function_);
			State = 1209;
			Match(Multiply);
			State = 1211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 1210;
				Match(Identifier);
				}
			}

			State = 1213;
			Match(OpenParen);
			State = 1215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || ((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (Private - 101)) | (1L << (Public - 101)) | (1L << (Protected - 101)) | (1L << (TypeAlias - 101)) | (1L << (Require - 101)) | (1L << (At - 101)) | (1L << (Identifier - 101)))) != 0)) {
				{
				State = 1214;
				formalParameterList();
				}
			}

			State = 1217;
			Match(CloseParen);
			State = 1218;
			Match(OpenBrace);
			State = 1219;
			functionBody();
			State = 1220;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneratorBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GeneratorDefinitionContext[] generatorDefinition() {
			return GetRuleContexts<GeneratorDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneratorDefinitionContext generatorDefinition(int i) {
			return GetRuleContext<GeneratorDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public GeneratorBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generatorBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterGeneratorBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitGeneratorBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneratorBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneratorBlockContext generatorBlock() {
		GeneratorBlockContext _localctx = new GeneratorBlockContext(Context, State);
		EnterRule(_localctx, 210, RULE_generatorBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1222;
			Match(OpenBrace);
			State = 1223;
			generatorDefinition();
			State = 1228;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,148,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1224;
					Match(Comma);
					State = 1225;
					generatorDefinition();
					}
					} 
				}
				State = 1230;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,148,Context);
			}
			State = 1232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 1231;
				Match(Comma);
				}
			}

			State = 1234;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneratorDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(TypeScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IteratorDefinitionContext iteratorDefinition() {
			return GetRuleContext<IteratorDefinitionContext>(0);
		}
		public GeneratorDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generatorDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterGeneratorDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitGeneratorDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneratorDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneratorDefinitionContext generatorDefinition() {
		GeneratorDefinitionContext _localctx = new GeneratorDefinitionContext(Context, State);
		EnterRule(_localctx, 212, RULE_generatorDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1236;
			Match(Multiply);
			State = 1237;
			iteratorDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IteratorBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IteratorDefinitionContext[] iteratorDefinition() {
			return GetRuleContexts<IteratorDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IteratorDefinitionContext iteratorDefinition(int i) {
			return GetRuleContext<IteratorDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public IteratorBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iteratorBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterIteratorBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitIteratorBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIteratorBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IteratorBlockContext iteratorBlock() {
		IteratorBlockContext _localctx = new IteratorBlockContext(Context, State);
		EnterRule(_localctx, 214, RULE_iteratorBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1239;
			Match(OpenBrace);
			State = 1240;
			iteratorDefinition();
			State = 1245;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,150,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1241;
					Match(Comma);
					State = 1242;
					iteratorDefinition();
					}
					} 
				}
				State = 1247;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,150,Context);
			}
			State = 1249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 1248;
				Match(Comma);
				}
			}

			State = 1251;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IteratorDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(TypeScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(TypeScriptParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public IteratorDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iteratorDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterIteratorDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitIteratorDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIteratorDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IteratorDefinitionContext iteratorDefinition() {
		IteratorDefinitionContext _localctx = new IteratorDefinitionContext(Context, State);
		EnterRule(_localctx, 216, RULE_iteratorDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1253;
			Match(OpenBracket);
			State = 1254;
			singleExpression(0);
			State = 1255;
			Match(CloseBracket);
			State = 1256;
			Match(OpenParen);
			State = 1258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || ((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (Private - 101)) | (1L << (Public - 101)) | (1L << (Protected - 101)) | (1L << (TypeAlias - 101)) | (1L << (Require - 101)) | (1L << (At - 101)) | (1L << (Identifier - 101)))) != 0)) {
				{
				State = 1257;
				formalParameterList();
				}
			}

			State = 1260;
			Match(CloseParen);
			State = 1261;
			Match(OpenBrace);
			State = 1262;
			functionBody();
			State = 1263;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext[] formalParameterArg() {
			return GetRuleContexts<FormalParameterArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterArgContext formalParameterArg(int i) {
			return GetRuleContext<FormalParameterArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LastFormalParameterArgContext lastFormalParameterArg() {
			return GetRuleContext<LastFormalParameterArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(TypeScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 218, RULE_formalParameterList);
		int _la;
		try {
			int _alt;
			State = 1284;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Private:
			case Public:
			case Protected:
			case TypeAlias:
			case Require:
			case At:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1265;
				formalParameterArg();
				State = 1270;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1266;
						Match(Comma);
						State = 1267;
						formalParameterArg();
						}
						} 
					}
					State = 1272;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
				}
				State = 1275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 1273;
					Match(Comma);
					State = 1274;
					lastFormalParameterArg();
					}
				}

				}
				break;
			case Ellipsis:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1277;
				lastFormalParameterArg();
				}
				break;
			case OpenBracket:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1278;
				arrayLiteral();
				}
				break;
			case OpenBrace:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1279;
				objectLiteral();
				State = 1282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 1280;
					Match(Colon);
					State = 1281;
					formalParameterList();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierOrKeyWordContext identifierOrKeyWord() {
			return GetRuleContext<IdentifierOrKeyWordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorContext decorator() {
			return GetRuleContext<DecoratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessibilityModifierContext accessibilityModifier() {
			return GetRuleContext<AccessibilityModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(TypeScriptParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(TypeScriptParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public FormalParameterArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterArgContext formalParameterArg() {
		FormalParameterArgContext _localctx = new FormalParameterArgContext(Context, State);
		EnterRule(_localctx, 220, RULE_formalParameterArg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==At) {
				{
				State = 1286;
				decorator();
				}
			}

			State = 1290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (Private - 101)) | (1L << (Public - 101)) | (1L << (Protected - 101)))) != 0)) {
				{
				State = 1289;
				accessibilityModifier();
				}
			}

			State = 1292;
			identifierOrKeyWord();
			State = 1294;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QuestionMark) {
				{
				State = 1293;
				Match(QuestionMark);
				}
			}

			State = 1297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 1296;
				typeAnnotation();
				}
			}

			State = 1301;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 1299;
				Match(Assign);
				State = 1300;
				singleExpression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastFormalParameterArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(TypeScriptParser.Ellipsis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		public LastFormalParameterArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastFormalParameterArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterLastFormalParameterArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitLastFormalParameterArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastFormalParameterArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastFormalParameterArgContext lastFormalParameterArg() {
		LastFormalParameterArgContext _localctx = new LastFormalParameterArgContext(Context, State);
		EnterRule(_localctx, 222, RULE_lastFormalParameterArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1303;
			Match(Ellipsis);
			State = 1304;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementsContext sourceElements() {
			return GetRuleContext<SourceElementsContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 224, RULE_functionBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1307;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,162,Context) ) {
			case 1:
				{
				State = 1306;
				sourceElements();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceElementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementContext[] sourceElement() {
			return GetRuleContexts<SourceElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceElementContext sourceElement(int i) {
			return GetRuleContext<SourceElementContext>(i);
		}
		public SourceElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceElements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterSourceElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitSourceElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceElementsContext sourceElements() {
		SourceElementsContext _localctx = new SourceElementsContext(Context, State);
		EnterRule(_localctx, 226, RULE_sourceElements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1310;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1309;
					sourceElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1312;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,163,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(TypeScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(TypeScriptParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementListContext elementList() {
			return GetRuleContext<ElementListContext>(0);
		}
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArrayLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArrayLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 228, RULE_arrayLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1314;
			Match(OpenBracket);
			State = 1316;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << Ellipsis) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << LessThan) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral) | (1L << Break) | (1L << Do))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Instanceof - 64)) | (1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (BackTick - 64)))) != 0)) {
				{
				State = 1315;
				elementList();
				}
			}

			State = 1318;
			Match(CloseBracket);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementContext[] arrayElement() {
			return GetRuleContexts<ArrayElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayElementContext arrayElement(int i) {
			return GetRuleContext<ArrayElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public ElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterElementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitElementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementListContext elementList() {
		ElementListContext _localctx = new ElementListContext(Context, State);
		EnterRule(_localctx, 230, RULE_elementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1320;
			arrayElement();
			State = 1329;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 1322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1321;
					Match(Comma);
					}
					}
					State = 1324;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Comma );
				State = 1326;
				arrayElement();
				}
				}
				State = 1331;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(TypeScriptParser.Ellipsis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(TypeScriptParser.Comma, 0); }
		public ArrayElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArrayElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArrayElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementContext arrayElement() {
		ArrayElementContext _localctx = new ArrayElementContext(Context, State);
		EnterRule(_localctx, 232, RULE_arrayElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1333;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 1332;
				Match(Ellipsis);
				}
			}

			State = 1337;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,168,Context) ) {
			case 1:
				{
				State = 1335;
				singleExpression(0);
				}
				break;
			case 2:
				{
				State = 1336;
				Match(Identifier);
				}
				break;
			}
			State = 1340;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,169,Context) ) {
			case 1:
				{
				State = 1339;
				Match(Comma);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAssignmentContext[] propertyAssignment() {
			return GetRuleContexts<PropertyAssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyAssignmentContext propertyAssignment(int i) {
			return GetRuleContext<PropertyAssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public ObjectLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterObjectLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitObjectLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectLiteralContext objectLiteral() {
		ObjectLiteralContext _localctx = new ObjectLiteralContext(Context, State);
		EnterRule(_localctx, 234, RULE_objectLiteral);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1342;
			Match(OpenBrace);
			State = 1354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << Ellipsis) | (1L << Multiply) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral) | (1L << Break) | (1L << Do))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Instanceof - 64)) | (1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)))) != 0)) {
				{
				State = 1343;
				propertyAssignment();
				State = 1348;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,170,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1344;
						Match(Comma);
						State = 1345;
						propertyAssignment();
						}
						} 
					}
					State = 1350;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,170,Context);
				}
				State = 1352;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 1351;
					Match(Comma);
					}
				}

				}
			}

			State = 1356;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAssignmentContext : ParserRuleContext {
		public PropertyAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAssignment; } }
	 
		public PropertyAssignmentContext() { }
		public virtual void CopyFrom(PropertyAssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PropertyExpressionAssignmentContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(TypeScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(TypeScriptParser.Assign, 0); }
		public PropertyExpressionAssignmentContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertyExpressionAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertyExpressionAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyExpressionAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComputedPropertyExpressionAssignmentContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(TypeScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(TypeScriptParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(TypeScriptParser.Colon, 0); }
		public ComputedPropertyExpressionAssignmentContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterComputedPropertyExpressionAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitComputedPropertyExpressionAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComputedPropertyExpressionAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropertyShorthandContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierOrKeyWordContext identifierOrKeyWord() {
			return GetRuleContext<IdentifierOrKeyWordContext>(0);
		}
		public PropertyShorthandContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertyShorthand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertyShorthand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyShorthand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropertySetterContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetAccessorContext setAccessor() {
			return GetRuleContext<SetAccessorContext>(0);
		}
		public PropertySetterContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertySetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertySetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySetter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropertyGetterContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public GetAccessorContext getAccessor() {
			return GetRuleContext<GetAccessorContext>(0);
		}
		public PropertyGetterContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertyGetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertyGetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGetter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RestParameterInObjectContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public RestParameterContext restParameter() {
			return GetRuleContext<RestParameterContext>(0);
		}
		public RestParameterInObjectContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterRestParameterInObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitRestParameterInObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRestParameterInObject(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodPropertyContext : PropertyAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public GeneratorMethodContext generatorMethod() {
			return GetRuleContext<GeneratorMethodContext>(0);
		}
		public MethodPropertyContext(PropertyAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterMethodProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitMethodProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAssignmentContext propertyAssignment() {
		PropertyAssignmentContext _localctx = new PropertyAssignmentContext(Context, State);
		EnterRule(_localctx, 236, RULE_propertyAssignment);
		int _la;
		try {
			State = 1373;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,173,Context) ) {
			case 1:
				_localctx = new PropertyExpressionAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1358;
				propertyName();
				State = 1359;
				_la = TokenStream.LA(1);
				if ( !(_la==Assign || _la==Colon) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1360;
				singleExpression(0);
				}
				break;
			case 2:
				_localctx = new ComputedPropertyExpressionAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1362;
				Match(OpenBracket);
				State = 1363;
				singleExpression(0);
				State = 1364;
				Match(CloseBracket);
				State = 1365;
				Match(Colon);
				State = 1366;
				singleExpression(0);
				}
				break;
			case 3:
				_localctx = new PropertyGetterContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1368;
				getAccessor();
				}
				break;
			case 4:
				_localctx = new PropertySetterContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1369;
				setAccessor();
				}
				break;
			case 5:
				_localctx = new MethodPropertyContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1370;
				generatorMethod();
				}
				break;
			case 6:
				_localctx = new PropertyShorthandContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1371;
				identifierOrKeyWord();
				}
				break;
			case 7:
				_localctx = new RestParameterInObjectContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1372;
				restParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetAccessorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GetterContext getter() {
			return GetRuleContext<GetterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		public GetAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getAccessor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterGetAccessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitGetAccessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetAccessorContext getAccessor() {
		GetAccessorContext _localctx = new GetAccessorContext(Context, State);
		EnterRule(_localctx, 238, RULE_getAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1375;
			getter();
			State = 1376;
			Match(OpenParen);
			State = 1377;
			Match(CloseParen);
			State = 1379;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 1378;
				typeAnnotation();
				}
			}

			State = 1381;
			Match(OpenBrace);
			State = 1382;
			functionBody();
			State = 1383;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetAccessorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetterContext setter() {
			return GetRuleContext<SetterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BindingPatternContext bindingPattern() {
			return GetRuleContext<BindingPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		public SetAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setAccessor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterSetAccessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitSetAccessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetAccessorContext setAccessor() {
		SetAccessorContext _localctx = new SetAccessorContext(Context, State);
		EnterRule(_localctx, 240, RULE_setAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1385;
			setter();
			State = 1386;
			Match(OpenParen);
			State = 1389;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				{
				State = 1387;
				Match(Identifier);
				}
				break;
			case OpenBracket:
			case OpenBrace:
				{
				State = 1388;
				bindingPattern();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 1391;
				typeAnnotation();
				}
			}

			State = 1394;
			Match(CloseParen);
			State = 1395;
			Match(OpenBrace);
			State = 1396;
			functionBody();
			State = 1397;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(TypeScriptParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public PropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertyName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertyName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyNameContext propertyName() {
		PropertyNameContext _localctx = new PropertyNameContext(Context, State);
		EnterRule(_localctx, 242, RULE_propertyName);
		try {
			State = 1402;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case From:
			case ReadOnly:
			case Async:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Implements:
			case Let:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Yield:
			case String:
			case TypeAlias:
			case Get:
			case Set:
			case Require:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1399;
				identifierName();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1400;
				Match(StringLiteral);
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1401;
				numericLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(TypeScriptParser.Comma, 0); }
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 244, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1404;
			Match(OpenParen);
			State = 1409;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << Ellipsis) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << LessThan) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral) | (1L << Break) | (1L << Do))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Instanceof - 64)) | (1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function_ - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (From - 64)) | (1L << (ReadOnly - 64)) | (1L << (Async - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (String - 64)) | (1L << (TypeAlias - 64)) | (1L << (Get - 64)) | (1L << (Set - 64)) | (1L << (Require - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (BackTick - 64)))) != 0)) {
				{
				State = 1405;
				argumentList();
				State = 1407;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 1406;
					Match(Comma);
					}
				}

				}
			}

			State = 1411;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 246, RULE_argumentList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1413;
			argument();
			State = 1418;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,180,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1414;
					Match(Comma);
					State = 1415;
					argument();
					}
					} 
				}
				State = 1420;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,180,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(TypeScriptParser.Ellipsis, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 248, RULE_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1422;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 1421;
				Match(Ellipsis);
				}
			}

			State = 1426;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,182,Context) ) {
			case 1:
				{
				State = 1424;
				singleExpression(0);
				}
				break;
			case 2:
				{
				State = 1425;
				Match(Identifier);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionSequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(TypeScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(TypeScriptParser.Comma, i);
		}
		public ExpressionSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionSequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterExpressionSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitExpressionSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionSequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionSequenceContext expressionSequence() {
		ExpressionSequenceContext _localctx = new ExpressionSequenceContext(Context, State);
		EnterRule(_localctx, 250, RULE_expressionSequence);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1428;
			singleExpression(0);
			State = 1433;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,183,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1429;
					Match(Comma);
					State = 1430;
					singleExpression(0);
					}
					} 
				}
				State = 1435;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,183,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionExpressionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function_() { return GetToken(TypeScriptParser.Function_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		public FunctionExpressionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionExpressionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionExpressionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionExpressionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpressionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionExpressionDeclarationContext functionExpressionDeclaration() {
		FunctionExpressionDeclarationContext _localctx = new FunctionExpressionDeclarationContext(Context, State);
		EnterRule(_localctx, 252, RULE_functionExpressionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1436;
			Match(Function_);
			State = 1438;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 1437;
				Match(Identifier);
				}
			}

			State = 1440;
			Match(OpenParen);
			State = 1442;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || ((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (Private - 101)) | (1L << (Public - 101)) | (1L << (Protected - 101)) | (1L << (TypeAlias - 101)) | (1L << (Require - 101)) | (1L << (At - 101)) | (1L << (Identifier - 101)))) != 0)) {
				{
				State = 1441;
				formalParameterList();
				}
			}

			State = 1444;
			Match(CloseParen);
			State = 1446;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 1445;
				typeAnnotation();
				}
			}

			State = 1448;
			Match(OpenBrace);
			State = 1449;
			functionBody();
			State = 1450;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleExpressionContext : ParserRuleContext {
		public SingleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleExpression; } }
	 
		public SingleExpressionContext() { }
		public virtual void CopyFrom(SingleExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TemplateStringExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStringLiteralContext templateStringLiteral() {
			return GetRuleContext<TemplateStringLiteralContext>(0);
		}
		public TemplateStringExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTemplateStringExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTemplateStringExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(TypeScriptParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(TypeScriptParser.Colon, 0); }
		public TernaryExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTernaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTernaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(TypeScriptParser.And, 0); }
		public LogicalAndExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GeneratorsExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public GeneratorBlockContext generatorBlock() {
			return GetRuleContext<GeneratorBlockContext>(0);
		}
		public GeneratorsExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterGeneratorsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitGeneratorsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneratorsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreIncrementExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(TypeScriptParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PreIncrementExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPreIncrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPreIncrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectLiteralExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		public ObjectLiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterObjectLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitObjectLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(TypeScriptParser.In, 0); }
		public InExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterInExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitInExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(TypeScriptParser.Or, 0); }
		public LogicalOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GenericTypesContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public GenericTypesContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterGenericTypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitGenericTypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericTypes(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(TypeScriptParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public NotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreDecreaseExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(TypeScriptParser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PreDecreaseExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPreDecreaseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPreDecreaseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreDecreaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArgumentsExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ArgumentsExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArgumentsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArgumentsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThisExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode This() { return GetToken(TypeScriptParser.This, 0); }
		public ThisExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterThisExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitThisExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionExpressionDeclarationContext functionExpressionDeclaration() {
			return GetRuleContext<FunctionExpressionDeclarationContext>(0);
		}
		public FunctionExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(TypeScriptParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public UnaryMinusExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterUnaryMinusExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitUnaryMinusExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(TypeScriptParser.Assign, 0); }
		public AssignmentExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostDecreaseExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(TypeScriptParser.MinusMinus, 0); }
		public PostDecreaseExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPostDecreaseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPostDecreaseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostDecreaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeofExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typeof() { return GetToken(TypeScriptParser.Typeof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public TypeofExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeofExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeofExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeofExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InstanceofExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instanceof() { return GetToken(TypeScriptParser.Instanceof, 0); }
		public InstanceofExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterInstanceofExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitInstanceofExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstanceofExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryPlusExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(TypeScriptParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public UnaryPlusExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterUnaryPlusExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitUnaryPlusExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPlusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeleteExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(TypeScriptParser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public DeleteExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterDeleteExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitDeleteExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GeneratorsFunctionExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public GeneratorFunctionDeclarationContext generatorFunctionDeclaration() {
			return GetRuleContext<GeneratorFunctionDeclarationContext>(0);
		}
		public GeneratorsFunctionExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterGeneratorsFunctionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitGeneratorsFunctionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneratorsFunctionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrowFunctionExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrowFunctionDeclarationContext arrowFunctionDeclaration() {
			return GetRuleContext<ArrowFunctionDeclarationContext>(0);
		}
		public ArrowFunctionExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArrowFunctionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArrowFunctionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrowFunctionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IteratorsExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IteratorBlockContext iteratorBlock() {
			return GetRuleContext<IteratorBlockContext>(0);
		}
		public IteratorsExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterIteratorsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitIteratorsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIteratorsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals_() { return GetToken(TypeScriptParser.Equals_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEquals() { return GetToken(TypeScriptParser.NotEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentityEquals() { return GetToken(TypeScriptParser.IdentityEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IdentityNotEquals() { return GetToken(TypeScriptParser.IdentityNotEquals, 0); }
		public EqualityExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitXOrExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXOr() { return GetToken(TypeScriptParser.BitXOr, 0); }
		public BitXOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterBitXOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitBitXOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitXOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastAsExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(TypeScriptParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AsExpressionContext asExpression() {
			return GetRuleContext<AsExpressionContext>(0);
		}
		public CastAsExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterCastAsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitCastAsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastAsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SuperExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Super() { return GetToken(TypeScriptParser.Super, 0); }
		public SuperExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterSuperExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitSuperExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(TypeScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(TypeScriptParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Modulus() { return GetToken(TypeScriptParser.Modulus, 0); }
		public MultiplicativeExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitShiftExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmetic() { return GetToken(TypeScriptParser.LeftShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmetic() { return GetToken(TypeScriptParser.RightShiftArithmetic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftLogical() { return GetToken(TypeScriptParser.RightShiftLogical, 0); }
		public BitShiftExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterBitShiftExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitBitShiftExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		public ParenthesizedExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(TypeScriptParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(TypeScriptParser.Minus, 0); }
		public AdditiveExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(TypeScriptParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MoreThan() { return GetToken(TypeScriptParser.MoreThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThanEquals() { return GetToken(TypeScriptParser.LessThanEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThanEquals() { return GetToken(TypeScriptParser.GreaterThanEquals, 0); }
		public RelationalExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostIncrementExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(TypeScriptParser.PlusPlus, 0); }
		public PostIncrementExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterPostIncrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitPostIncrementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class YieldExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public YieldStatementContext yieldStatement() {
			return GetRuleContext<YieldStatementContext>(0);
		}
		public YieldExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterYieldExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitYieldExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYieldExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitNotExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitNot() { return GetToken(TypeScriptParser.BitNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public BitNotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterBitNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitBitNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(TypeScriptParser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public NewExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayLiteralExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public ArrayLiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArrayLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArrayLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberDotExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(TypeScriptParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedTypeGenericContext nestedTypeGeneric() {
			return GetRuleContext<NestedTypeGenericContext>(0);
		}
		public MemberDotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterMemberDotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitMemberDotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(TypeScriptParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassTailContext classTail() {
			return GetRuleContext<ClassTailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		public ClassExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterClassExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitClassExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberIndexExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(TypeScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(TypeScriptParser.CloseBracket, 0); }
		public MemberIndexExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterMemberIndexExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitMemberIndexExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberIndexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public IdentifierExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitAndExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAnd() { return GetToken(TypeScriptParser.BitAnd, 0); }
		public BitAndExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterBitAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitBitAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitOrExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOr() { return GetToken(TypeScriptParser.BitOr, 0); }
		public BitOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterBitOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitBitOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentOperatorExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public AssignmentOperatorExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignmentOperatorExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignmentOperatorExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperatorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VoidExpressionContext : SingleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(TypeScriptParser.Void, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public VoidExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterVoidExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitVoidExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoidExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleExpressionContext singleExpression() {
		return singleExpression(0);
	}

	private SingleExpressionContext singleExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SingleExpressionContext _localctx = new SingleExpressionContext(Context, _parentState);
		SingleExpressionContext _prevctx = _localctx;
		int _startState = 254;
		EnterRecursionRule(_localctx, 254, RULE_singleExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1511;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,192,Context) ) {
			case 1:
				{
				_localctx = new FunctionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1453;
				functionExpressionDeclaration();
				}
				break;
			case 2:
				{
				_localctx = new ArrowFunctionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1454;
				arrowFunctionDeclaration();
				}
				break;
			case 3:
				{
				_localctx = new ClassExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1455;
				Match(Class);
				State = 1457;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 1456;
					Match(Identifier);
					}
				}

				State = 1459;
				classTail();
				}
				break;
			case 4:
				{
				_localctx = new NewExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1460;
				Match(New);
				State = 1461;
				singleExpression(0);
				State = 1463;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LessThan) {
					{
					State = 1462;
					typeArguments();
					}
				}

				State = 1465;
				arguments();
				}
				break;
			case 5:
				{
				_localctx = new NewExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1467;
				Match(New);
				State = 1468;
				singleExpression(0);
				State = 1470;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,189,Context) ) {
				case 1:
					{
					State = 1469;
					typeArguments();
					}
					break;
				}
				}
				break;
			case 6:
				{
				_localctx = new DeleteExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1472;
				Match(Delete);
				State = 1473;
				singleExpression(38);
				}
				break;
			case 7:
				{
				_localctx = new VoidExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1474;
				Match(Void);
				State = 1475;
				singleExpression(37);
				}
				break;
			case 8:
				{
				_localctx = new TypeofExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1476;
				Match(Typeof);
				State = 1477;
				singleExpression(36);
				}
				break;
			case 9:
				{
				_localctx = new PreIncrementExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1478;
				Match(PlusPlus);
				State = 1479;
				singleExpression(35);
				}
				break;
			case 10:
				{
				_localctx = new PreDecreaseExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1480;
				Match(MinusMinus);
				State = 1481;
				singleExpression(34);
				}
				break;
			case 11:
				{
				_localctx = new UnaryPlusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1482;
				Match(Plus);
				State = 1483;
				singleExpression(33);
				}
				break;
			case 12:
				{
				_localctx = new UnaryMinusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1484;
				Match(Minus);
				State = 1485;
				singleExpression(32);
				}
				break;
			case 13:
				{
				_localctx = new BitNotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1486;
				Match(BitNot);
				State = 1487;
				singleExpression(31);
				}
				break;
			case 14:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1488;
				Match(Not);
				State = 1489;
				singleExpression(30);
				}
				break;
			case 15:
				{
				_localctx = new IteratorsExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1490;
				iteratorBlock();
				}
				break;
			case 16:
				{
				_localctx = new GeneratorsExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1491;
				generatorBlock();
				}
				break;
			case 17:
				{
				_localctx = new GeneratorsFunctionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1492;
				generatorFunctionDeclaration();
				}
				break;
			case 18:
				{
				_localctx = new YieldExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1493;
				yieldStatement();
				}
				break;
			case 19:
				{
				_localctx = new ThisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1494;
				Match(This);
				}
				break;
			case 20:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1495;
				identifierName();
				State = 1497;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
				case 1:
					{
					State = 1496;
					singleExpression(0);
					}
					break;
				}
				}
				break;
			case 21:
				{
				_localctx = new SuperExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1499;
				Match(Super);
				}
				break;
			case 22:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1500;
				literal();
				}
				break;
			case 23:
				{
				_localctx = new ArrayLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1501;
				arrayLiteral();
				}
				break;
			case 24:
				{
				_localctx = new ObjectLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1502;
				objectLiteral();
				}
				break;
			case 25:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1503;
				Match(OpenParen);
				State = 1504;
				expressionSequence();
				State = 1505;
				Match(CloseParen);
				}
				break;
			case 26:
				{
				_localctx = new GenericTypesContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1507;
				typeArguments();
				State = 1509;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,191,Context) ) {
				case 1:
					{
					State = 1508;
					expressionSequence();
					}
					break;
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1588;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,195,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1586;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,194,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1513;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 1514;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Divide) | (1L << Modulus))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1515;
						singleExpression(30);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1516;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 1517;
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1518;
						singleExpression(29);
						}
						break;
					case 3:
						{
						_localctx = new BitShiftExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1519;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 1520;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RightShiftArithmetic) | (1L << LeftShiftArithmetic) | (1L << RightShiftLogical))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1521;
						singleExpression(28);
						}
						break;
					case 4:
						{
						_localctx = new RelationalExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1522;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 1523;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LessThan) | (1L << MoreThan) | (1L << LessThanEquals) | (1L << GreaterThanEquals))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1524;
						singleExpression(27);
						}
						break;
					case 5:
						{
						_localctx = new InstanceofExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1525;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 1526;
						Match(Instanceof);
						State = 1527;
						singleExpression(26);
						}
						break;
					case 6:
						{
						_localctx = new InExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1528;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 1529;
						Match(In);
						State = 1530;
						singleExpression(25);
						}
						break;
					case 7:
						{
						_localctx = new EqualityExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1531;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 1532;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Equals_) | (1L << NotEquals) | (1L << IdentityEquals) | (1L << IdentityNotEquals))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1533;
						singleExpression(24);
						}
						break;
					case 8:
						{
						_localctx = new BitAndExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1534;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 1535;
						Match(BitAnd);
						State = 1536;
						singleExpression(23);
						}
						break;
					case 9:
						{
						_localctx = new BitXOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1537;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 1538;
						Match(BitXOr);
						State = 1539;
						singleExpression(22);
						}
						break;
					case 10:
						{
						_localctx = new BitOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1540;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 1541;
						Match(BitOr);
						State = 1542;
						singleExpression(21);
						}
						break;
					case 11:
						{
						_localctx = new LogicalAndExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1543;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 1544;
						Match(And);
						State = 1545;
						singleExpression(20);
						}
						break;
					case 12:
						{
						_localctx = new LogicalOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1546;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 1547;
						Match(Or);
						State = 1548;
						singleExpression(19);
						}
						break;
					case 13:
						{
						_localctx = new TernaryExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1549;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 1550;
						Match(QuestionMark);
						State = 1551;
						singleExpression(0);
						State = 1552;
						Match(Colon);
						State = 1553;
						singleExpression(18);
						}
						break;
					case 14:
						{
						_localctx = new AssignmentExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1555;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 1556;
						Match(Assign);
						State = 1557;
						singleExpression(17);
						}
						break;
					case 15:
						{
						_localctx = new AssignmentOperatorExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1558;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 1559;
						assignmentOperator();
						State = 1560;
						singleExpression(16);
						}
						break;
					case 16:
						{
						_localctx = new MemberIndexExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1562;
						if (!(Precpred(Context, 45))) throw new FailedPredicateException(this, "Precpred(Context, 45)");
						State = 1563;
						Match(OpenBracket);
						State = 1564;
						expressionSequence();
						State = 1565;
						Match(CloseBracket);
						}
						break;
					case 17:
						{
						_localctx = new MemberDotExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1567;
						if (!(Precpred(Context, 44))) throw new FailedPredicateException(this, "Precpred(Context, 44)");
						State = 1568;
						Match(Dot);
						State = 1569;
						identifierName();
						State = 1571;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,193,Context) ) {
						case 1:
							{
							State = 1570;
							nestedTypeGeneric();
							}
							break;
						}
						}
						break;
					case 18:
						{
						_localctx = new ArgumentsExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1573;
						if (!(Precpred(Context, 41))) throw new FailedPredicateException(this, "Precpred(Context, 41)");
						State = 1574;
						arguments();
						}
						break;
					case 19:
						{
						_localctx = new PostIncrementExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1575;
						if (!(Precpred(Context, 40))) throw new FailedPredicateException(this, "Precpred(Context, 40)");
						State = 1576;
						if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
						State = 1577;
						Match(PlusPlus);
						}
						break;
					case 20:
						{
						_localctx = new PostDecreaseExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1578;
						if (!(Precpred(Context, 39))) throw new FailedPredicateException(this, "Precpred(Context, 39)");
						State = 1579;
						if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
						State = 1580;
						Match(MinusMinus);
						}
						break;
					case 21:
						{
						_localctx = new TemplateStringExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1581;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1582;
						templateStringLiteral();
						}
						break;
					case 22:
						{
						_localctx = new CastAsExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 1583;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1584;
						Match(As);
						State = 1585;
						asExpression();
						}
						break;
					}
					} 
				}
				State = 1590;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,195,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AsExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredefinedTypeContext predefinedType() {
			return GetRuleContext<PredefinedTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(TypeScriptParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(TypeScriptParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public AsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterAsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitAsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsExpressionContext asExpression() {
		AsExpressionContext _localctx = new AsExpressionContext(Context, State);
		EnterRule(_localctx, 256, RULE_asExpression);
		try {
			State = 1597;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,197,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1591;
				predefinedType();
				State = 1594;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,196,Context) ) {
				case 1:
					{
					State = 1592;
					Match(OpenBracket);
					State = 1593;
					Match(CloseBracket);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1596;
				singleExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrowFunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrowFunctionParametersContext arrowFunctionParameters() {
			return GetRuleContext<ArrowFunctionParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(TypeScriptParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrowFunctionBodyContext arrowFunctionBody() {
			return GetRuleContext<ArrowFunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(TypeScriptParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		public ArrowFunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrowFunctionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArrowFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArrowFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrowFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrowFunctionDeclarationContext arrowFunctionDeclaration() {
		ArrowFunctionDeclarationContext _localctx = new ArrowFunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 258, RULE_arrowFunctionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1600;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Async) {
				{
				State = 1599;
				Match(Async);
				}
			}

			State = 1602;
			arrowFunctionParameters();
			State = 1604;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 1603;
				typeAnnotation();
				}
			}

			State = 1606;
			Match(ARROW);
			State = 1607;
			arrowFunctionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrowFunctionParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(TypeScriptParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(TypeScriptParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ArrowFunctionParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrowFunctionParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArrowFunctionParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArrowFunctionParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrowFunctionParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrowFunctionParametersContext arrowFunctionParameters() {
		ArrowFunctionParametersContext _localctx = new ArrowFunctionParametersContext(Context, State);
		EnterRule(_localctx, 260, RULE_arrowFunctionParameters);
		int _la;
		try {
			State = 1615;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1609;
				Match(Identifier);
				}
				break;
			case OpenParen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1610;
				Match(OpenParen);
				State = 1612;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || ((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (Private - 101)) | (1L << (Public - 101)) | (1L << (Protected - 101)) | (1L << (TypeAlias - 101)) | (1L << (Require - 101)) | (1L << (At - 101)) | (1L << (Identifier - 101)))) != 0)) {
					{
					State = 1611;
					formalParameterList();
					}
				}

				State = 1614;
				Match(CloseParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrowFunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(TypeScriptParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(TypeScriptParser.CloseBrace, 0); }
		public ArrowFunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrowFunctionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterArrowFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitArrowFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrowFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrowFunctionBodyContext arrowFunctionBody() {
		ArrowFunctionBodyContext _localctx = new ArrowFunctionBodyContext(Context, State);
		EnterRule(_localctx, 262, RULE_arrowFunctionBody);
		try {
			State = 1622;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,202,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1617;
				singleExpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1618;
				Match(OpenBrace);
				State = 1619;
				functionBody();
				State = 1620;
				Match(CloseBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultiplyAssign() { return GetToken(TypeScriptParser.MultiplyAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivideAssign() { return GetToken(TypeScriptParser.DivideAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModulusAssign() { return GetToken(TypeScriptParser.ModulusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusAssign() { return GetToken(TypeScriptParser.PlusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusAssign() { return GetToken(TypeScriptParser.MinusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftArithmeticAssign() { return GetToken(TypeScriptParser.LeftShiftArithmeticAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftArithmeticAssign() { return GetToken(TypeScriptParser.RightShiftArithmeticAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftLogicalAssign() { return GetToken(TypeScriptParser.RightShiftLogicalAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitAndAssign() { return GetToken(TypeScriptParser.BitAndAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitXorAssign() { return GetToken(TypeScriptParser.BitXorAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitOrAssign() { return GetToken(TypeScriptParser.BitOrAssign, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 264, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1624;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MultiplyAssign) | (1L << DivideAssign) | (1L << ModulusAssign) | (1L << PlusAssign) | (1L << MinusAssign) | (1L << LeftShiftArithmeticAssign) | (1L << RightShiftArithmeticAssign) | (1L << RightShiftLogicalAssign) | (1L << BitAndAssign) | (1L << BitXorAssign) | (1L << BitOrAssign))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullLiteral() { return GetToken(TypeScriptParser.NullLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanLiteral() { return GetToken(TypeScriptParser.BooleanLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(TypeScriptParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStringLiteralContext templateStringLiteral() {
			return GetRuleContext<TemplateStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RegularExpressionLiteral() { return GetToken(TypeScriptParser.RegularExpressionLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 266, RULE_literal);
		try {
			State = 1632;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1626;
				Match(NullLiteral);
				}
				break;
			case BooleanLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1627;
				Match(BooleanLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1628;
				Match(StringLiteral);
				}
				break;
			case BackTick:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1629;
				templateStringLiteral();
				}
				break;
			case RegularExpressionLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1630;
				Match(RegularExpressionLiteral);
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1631;
				numericLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateStringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BackTick() { return GetTokens(TypeScriptParser.BackTick); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BackTick(int i) {
			return GetToken(TypeScriptParser.BackTick, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStringAtomContext[] templateStringAtom() {
			return GetRuleContexts<TemplateStringAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStringAtomContext templateStringAtom(int i) {
			return GetRuleContext<TemplateStringAtomContext>(i);
		}
		public TemplateStringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateStringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTemplateStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTemplateStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateStringLiteralContext templateStringLiteral() {
		TemplateStringLiteralContext _localctx = new TemplateStringLiteralContext(Context, State);
		EnterRule(_localctx, 268, RULE_templateStringLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1634;
			Match(BackTick);
			State = 1638;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TemplateStringStartExpression || _la==TemplateStringAtom) {
				{
				{
				State = 1635;
				templateStringAtom();
				}
				}
				State = 1640;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1641;
			Match(BackTick);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateStringAtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateStringAtom() { return GetToken(TypeScriptParser.TemplateStringAtom, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateStringStartExpression() { return GetToken(TypeScriptParser.TemplateStringStartExpression, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TemplateCloseBrace() { return GetToken(TypeScriptParser.TemplateCloseBrace, 0); }
		public TemplateStringAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateStringAtom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterTemplateStringAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitTemplateStringAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateStringAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateStringAtomContext templateStringAtom() {
		TemplateStringAtomContext _localctx = new TemplateStringAtomContext(Context, State);
		EnterRule(_localctx, 270, RULE_templateStringAtom);
		try {
			State = 1648;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TemplateStringAtom:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1643;
				Match(TemplateStringAtom);
				}
				break;
			case TemplateStringStartExpression:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1644;
				Match(TemplateStringStartExpression);
				State = 1645;
				singleExpression(0);
				State = 1646;
				Match(TemplateCloseBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DecimalLiteral() { return GetToken(TypeScriptParser.DecimalLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexIntegerLiteral() { return GetToken(TypeScriptParser.HexIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OctalIntegerLiteral() { return GetToken(TypeScriptParser.OctalIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OctalIntegerLiteral2() { return GetToken(TypeScriptParser.OctalIntegerLiteral2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BinaryIntegerLiteral() { return GetToken(TypeScriptParser.BinaryIntegerLiteral, 0); }
		public NumericLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterNumericLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitNumericLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralContext numericLiteral() {
		NumericLiteralContext _localctx = new NumericLiteralContext(Context, State);
		EnterRule(_localctx, 272, RULE_numericLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1650;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReservedWordContext reservedWord() {
			return GetRuleContext<ReservedWordContext>(0);
		}
		public IdentifierNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifierName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifierName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierNameContext identifierName() {
		IdentifierNameContext _localctx = new IdentifierNameContext(Context, State);
		EnterRule(_localctx, 274, RULE_identifierName);
		try {
			State = 1654;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1652;
				Match(Identifier);
				}
				break;
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case From:
			case ReadOnly:
			case Async:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Implements:
			case Let:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Yield:
			case String:
			case TypeAlias:
			case Get:
			case Set:
			case Require:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1653;
				reservedWord();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierOrKeyWordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(TypeScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TypeAlias() { return GetToken(TypeScriptParser.TypeAlias, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Require() { return GetToken(TypeScriptParser.Require, 0); }
		public IdentifierOrKeyWordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierOrKeyWord; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifierOrKeyWord(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifierOrKeyWord(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierOrKeyWord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierOrKeyWordContext identifierOrKeyWord() {
		IdentifierOrKeyWordContext _localctx = new IdentifierOrKeyWordContext(Context, State);
		EnterRule(_localctx, 276, RULE_identifierOrKeyWord);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1656;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & ((1L << (TypeAlias - 113)) | (1L << (Require - 113)) | (1L << (Identifier - 113)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedWordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NullLiteral() { return GetToken(TypeScriptParser.NullLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanLiteral() { return GetToken(TypeScriptParser.BooleanLiteral, 0); }
		public ReservedWordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reservedWord; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterReservedWord(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitReservedWord(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReservedWord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReservedWordContext reservedWord() {
		ReservedWordContext _localctx = new ReservedWordContext(Context, State);
		EnterRule(_localctx, 278, RULE_reservedWord);
		try {
			State = 1661;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function_:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case From:
			case ReadOnly:
			case Async:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Implements:
			case Let:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Yield:
			case String:
			case TypeAlias:
			case Get:
			case Set:
			case Require:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1658;
				keyword();
				}
				break;
			case NullLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1659;
				Match(NullLiteral);
				}
				break;
			case BooleanLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1660;
				Match(BooleanLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(TypeScriptParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(TypeScriptParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Instanceof() { return GetToken(TypeScriptParser.Instanceof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typeof() { return GetToken(TypeScriptParser.Typeof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(TypeScriptParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(TypeScriptParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New() { return GetToken(TypeScriptParser.New, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(TypeScriptParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Catch() { return GetToken(TypeScriptParser.Catch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Finally() { return GetToken(TypeScriptParser.Finally, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(TypeScriptParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(TypeScriptParser.Void, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(TypeScriptParser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(TypeScriptParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(TypeScriptParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(TypeScriptParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Debugger() { return GetToken(TypeScriptParser.Debugger, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function_() { return GetToken(TypeScriptParser.Function_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode This() { return GetToken(TypeScriptParser.This, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode With() { return GetToken(TypeScriptParser.With, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(TypeScriptParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(TypeScriptParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Throw() { return GetToken(TypeScriptParser.Throw, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(TypeScriptParser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(TypeScriptParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Try() { return GetToken(TypeScriptParser.Try, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ReadOnly() { return GetToken(TypeScriptParser.ReadOnly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Async() { return GetToken(TypeScriptParser.Async, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(TypeScriptParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(TypeScriptParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(TypeScriptParser.Enum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extends() { return GetToken(TypeScriptParser.Extends, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Super() { return GetToken(TypeScriptParser.Super, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(TypeScriptParser.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Export() { return GetToken(TypeScriptParser.Export, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(TypeScriptParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Implements() { return GetToken(TypeScriptParser.Implements, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Let() { return GetToken(TypeScriptParser.Let, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Private() { return GetToken(TypeScriptParser.Private, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Public() { return GetToken(TypeScriptParser.Public, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Interface() { return GetToken(TypeScriptParser.Interface, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Package() { return GetToken(TypeScriptParser.Package, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Protected() { return GetToken(TypeScriptParser.Protected, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(TypeScriptParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Yield() { return GetToken(TypeScriptParser.Yield, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Get() { return GetToken(TypeScriptParser.Get, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Set() { return GetToken(TypeScriptParser.Set, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Require() { return GetToken(TypeScriptParser.Require, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TypeAlias() { return GetToken(TypeScriptParser.TypeAlias, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(TypeScriptParser.String, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 280, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1663;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 62)) & ~0x3f) == 0 && ((1L << (_la - 62)) & ((1L << (Break - 62)) | (1L << (Do - 62)) | (1L << (Instanceof - 62)) | (1L << (Typeof - 62)) | (1L << (Case - 62)) | (1L << (Else - 62)) | (1L << (New - 62)) | (1L << (Var - 62)) | (1L << (Catch - 62)) | (1L << (Finally - 62)) | (1L << (Return - 62)) | (1L << (Void - 62)) | (1L << (Continue - 62)) | (1L << (For - 62)) | (1L << (Switch - 62)) | (1L << (While - 62)) | (1L << (Debugger - 62)) | (1L << (Function_ - 62)) | (1L << (This - 62)) | (1L << (With - 62)) | (1L << (Default - 62)) | (1L << (If - 62)) | (1L << (Throw - 62)) | (1L << (Delete - 62)) | (1L << (In - 62)) | (1L << (Try - 62)) | (1L << (From - 62)) | (1L << (ReadOnly - 62)) | (1L << (Async - 62)) | (1L << (Class - 62)) | (1L << (Enum - 62)) | (1L << (Extends - 62)) | (1L << (Super - 62)) | (1L << (Const - 62)) | (1L << (Export - 62)) | (1L << (Import - 62)) | (1L << (Implements - 62)) | (1L << (Let - 62)) | (1L << (Private - 62)) | (1L << (Public - 62)) | (1L << (Interface - 62)) | (1L << (Package - 62)) | (1L << (Protected - 62)) | (1L << (Static - 62)) | (1L << (Yield - 62)) | (1L << (String - 62)) | (1L << (TypeAlias - 62)) | (1L << (Get - 62)) | (1L << (Set - 62)) | (1L << (Require - 62)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Get() { return GetToken(TypeScriptParser.Get, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public GetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterGetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitGetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetterContext getter() {
		GetterContext _localctx = new GetterContext(Context, State);
		EnterRule(_localctx, 282, RULE_getter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1665;
			Match(Get);
			State = 1666;
			propertyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Set() { return GetToken(TypeScriptParser.Set, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public SetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterSetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitSetter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetterContext setter() {
		SetterContext _localctx = new SetterContext(Context, State);
		EnterRule(_localctx, 284, RULE_setter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1668;
			Match(Set);
			State = 1669;
			propertyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(TypeScriptParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TypeScriptParser.Eof, 0); }
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.EnterEos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITypeScriptParserListener typedListener = listener as ITypeScriptParserListener;
			if (typedListener != null) typedListener.ExitEos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITypeScriptParserVisitor<TResult> typedVisitor = visitor as ITypeScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(Context, State);
		EnterRule(_localctx, 286, RULE_eos);
		try {
			State = 1675;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,208,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1671;
				Match(SemiColon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1672;
				Match(Eof);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1673;
				if (!(this.lineTerminatorAhead())) throw new FailedPredicateException(this, "this.lineTerminatorAhead()");
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1674;
				if (!(this.closeBrace())) throw new FailedPredicateException(this, "this.closeBrace()");
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return unionOrIntersectionOrPrimaryType_sempred((UnionOrIntersectionOrPrimaryTypeContext)_localctx, predIndex);
		case 11: return primaryType_sempred((PrimaryTypeContext)_localctx, predIndex);
		case 22: return arrayType_sempred((ArrayTypeContext)_localctx, predIndex);
		case 57: return decoratorMemberExpression_sempred((DecoratorMemberExpressionContext)_localctx, predIndex);
		case 73: return expressionStatement_sempred((ExpressionStatementContext)_localctx, predIndex);
		case 75: return iterationStatement_sempred((IterationStatementContext)_localctx, predIndex);
		case 77: return continueStatement_sempred((ContinueStatementContext)_localctx, predIndex);
		case 78: return breakStatement_sempred((BreakStatementContext)_localctx, predIndex);
		case 79: return returnStatement_sempred((ReturnStatementContext)_localctx, predIndex);
		case 80: return yieldStatement_sempred((YieldStatementContext)_localctx, predIndex);
		case 88: return throwStatement_sempred((ThrowStatementContext)_localctx, predIndex);
		case 127: return singleExpression_sempred((SingleExpressionContext)_localctx, predIndex);
		case 143: return eos_sempred((EosContext)_localctx, predIndex);
		}
		return true;
	}
	private bool unionOrIntersectionOrPrimaryType_sempred(UnionOrIntersectionOrPrimaryTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool primaryType_sempred(PrimaryTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 5);
		case 3: return notLineTerminator();
		}
		return true;
	}
	private bool arrayType_sempred(ArrayTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return notLineTerminator();
		}
		return true;
	}
	private bool decoratorMemberExpression_sempred(DecoratorMemberExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 2);
		}
		return true;
	}
	private bool expressionStatement_sempred(ExpressionStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return this.notOpenBraceAndNotFunction();
		}
		return true;
	}
	private bool iterationStatement_sempred(IterationStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return this.p("of");
		case 8: return this.p("of");
		}
		return true;
	}
	private bool continueStatement_sempred(ContinueStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return this.notLineTerminator();
		}
		return true;
	}
	private bool breakStatement_sempred(BreakStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return this.notLineTerminator();
		}
		return true;
	}
	private bool returnStatement_sempred(ReturnStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return this.notLineTerminator();
		}
		return true;
	}
	private bool yieldStatement_sempred(YieldStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return this.notLineTerminator();
		}
		return true;
	}
	private bool throwStatement_sempred(ThrowStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return this.notLineTerminator();
		}
		return true;
	}
	private bool singleExpression_sempred(SingleExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14: return Precpred(Context, 29);
		case 15: return Precpred(Context, 28);
		case 16: return Precpred(Context, 27);
		case 17: return Precpred(Context, 26);
		case 18: return Precpred(Context, 25);
		case 19: return Precpred(Context, 24);
		case 20: return Precpred(Context, 23);
		case 21: return Precpred(Context, 22);
		case 22: return Precpred(Context, 21);
		case 23: return Precpred(Context, 20);
		case 24: return Precpred(Context, 19);
		case 25: return Precpred(Context, 18);
		case 26: return Precpred(Context, 17);
		case 27: return Precpred(Context, 16);
		case 28: return Precpred(Context, 15);
		case 29: return Precpred(Context, 45);
		case 30: return Precpred(Context, 44);
		case 31: return Precpred(Context, 41);
		case 32: return Precpred(Context, 40);
		case 33: return this.notLineTerminator();
		case 34: return Precpred(Context, 39);
		case 35: return this.notLineTerminator();
		case 36: return Precpred(Context, 14);
		case 37: return Precpred(Context, 1);
		}
		return true;
	}
	private bool eos_sempred(EosContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38: return this.lineTerminatorAhead();
		case 39: return this.closeBrace();
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x87', '\x690', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x4', 'k', '\t', 'k', '\x4', 'l', '\t', 'l', '\x4', 'm', 
		'\t', 'm', '\x4', 'n', '\t', 'n', '\x4', 'o', '\t', 'o', '\x4', 'p', '\t', 
		'p', '\x4', 'q', '\t', 'q', '\x4', 'r', '\t', 'r', '\x4', 's', '\t', 's', 
		'\x4', 't', '\t', 't', '\x4', 'u', '\t', 'u', '\x4', 'v', '\t', 'v', '\x4', 
		'w', '\t', 'w', '\x4', 'x', '\t', 'x', '\x4', 'y', '\t', 'y', '\x4', 'z', 
		'\t', 'z', '\x4', '{', '\t', '{', '\x4', '|', '\t', '|', '\x4', '}', '\t', 
		'}', '\x4', '~', '\t', '~', '\x4', '\x7F', '\t', '\x7F', '\x4', '\x80', 
		'\t', '\x80', '\x4', '\x81', '\t', '\x81', '\x4', '\x82', '\t', '\x82', 
		'\x4', '\x83', '\t', '\x83', '\x4', '\x84', '\t', '\x84', '\x4', '\x85', 
		'\t', '\x85', '\x4', '\x86', '\t', '\x86', '\x4', '\x87', '\t', '\x87', 
		'\x4', '\x88', '\t', '\x88', '\x4', '\x89', '\t', '\x89', '\x4', '\x8A', 
		'\t', '\x8A', '\x4', '\x8B', '\t', '\x8B', '\x4', '\x8C', '\t', '\x8C', 
		'\x4', '\x8D', '\t', '\x8D', '\x4', '\x8E', '\t', '\x8E', '\x4', '\x8F', 
		'\t', '\x8F', '\x4', '\x90', '\t', '\x90', '\x4', '\x91', '\t', '\x91', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '\x128', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x5', 
		'\x4', '\x12C', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x133', '\n', '\x5', '\f', '\x5', 
		'\xE', '\x5', '\x136', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '\x13A', '\n', '\x6', '\x3', '\x6', '\x5', '\x6', '\x13D', '\n', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', 
		'\x5', '\b', '\x144', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\a', '\t', '\x14B', '\n', '\t', '\f', '\t', 
		'\xE', '\t', '\x14E', '\v', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x157', 
		'\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', 
		'\x162', '\n', '\f', '\f', '\f', '\xE', '\f', '\x165', '\v', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x5', '\r', '\x179', '\n', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\a', '\r', '\x17F', '\n', '\r', '\f', '\r', 
		'\xE', '\r', '\x182', '\v', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x5', '\xF', '\x188', '\n', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '\x18C', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x5', '\x12', '\x19B', '\n', '\x12', '\x3', '\x13', '\x3', 
		'\x13', '\x5', '\x13', '\x19F', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x5', '\x14', '\x1A3', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x5', '\x15', '\x1A9', '\n', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\x1AE', '\n', '\x16', '\f', 
		'\x16', '\xE', '\x16', '\x1B1', '\v', '\x16', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\x1BA', '\n', '\x17', '\x5', '\x17', '\x1BC', '\n', '\x17', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\x1CA', '\n', '\x1A', '\f', 
		'\x1A', '\xE', '\x1A', '\x1CD', '\v', '\x1A', '\x3', '\x1B', '\x5', '\x1B', 
		'\x1D0', '\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x1D4', 
		'\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x1DC', '\n', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x1E0', '\n', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x6', '\x1E', '\x1ED', '\n', '\x1E', '\r', '\x1E', '\xE', '\x1E', '\x1EE', 
		'\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x1F3', '\n', '\x1E', '\x3', 
		'\x1F', '\x5', '\x1F', '\x1F6', '\n', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x5', '\x1F', '\x1FA', '\n', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x1FD', 
		'\n', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x201', '\n', 
		'\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x5', '!', '\x207', 
		'\n', '!', '\x3', '!', '\x3', '!', '\x5', '!', '\x20B', '\n', '!', '\x3', 
		'!', '\x3', '!', '\x5', '!', '\x20F', '\n', '!', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\a', '\"', '\x215', '\n', '\"', '\f', '\"', 
		'\xE', '\"', '\x218', '\v', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', 
		'\x21C', '\n', '\"', '\x5', '\"', '\x21E', '\n', '\"', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\a', '#', '\x223', '\n', '#', '\f', '#', '\xE', '#', 
		'\x226', '\v', '#', '\x3', '$', '\x3', '$', '\x5', '$', '\x22A', '\n', 
		'$', '\x3', '%', '\x5', '%', '\x22D', '\n', '%', '\x3', '%', '\x5', '%', 
		'\x230', '\n', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x5', '%', '\x235', 
		'\n', '%', '\x3', '%', '\x5', '%', '\x238', '\n', '%', '\x3', '%', '\x5', 
		'%', '\x23B', '\n', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\x5', '&', 
		'\x240', '\n', '&', '\x3', '\'', '\x5', '\'', '\x243', '\n', '\'', '\x3', 
		'\'', '\x5', '\'', '\x246', '\n', '\'', '\x3', '\'', '\x3', '\'', '\x5', 
		'\'', '\x24A', '\n', '\'', '\x3', '(', '\x3', '(', '\x3', ')', '\x3', 
		')', '\x5', ')', '\x250', '\n', ')', '\x3', '*', '\x3', '*', '\x5', '*', 
		'\x254', '\n', '*', '\x3', '*', '\x3', '*', '\x5', '*', '\x258', '\n', 
		'*', '\x3', '*', '\x3', '*', '\x5', '*', '\x25C', '\n', '*', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', ',', '\x3', ',', '\x5', ',', '\x267', '\n', ',', '\x3', ',', '\x3', 
		',', '\x3', '-', '\x3', '-', '\x3', '-', '\x5', '-', '\x26E', '\n', '-', 
		'\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '.', '\x5', '.', 
		'\x275', '\n', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x5', '.', '\x27A', 
		'\n', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', 
		'\x3', '.', '\x5', '.', '\x282', '\n', '.', '\x3', '/', '\x5', '/', '\x285', 
		'\n', '/', '\x3', '/', '\x5', '/', '\x288', '\n', '/', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x5', '/', '\x28D', '\n', '/', '\x3', '/', '\x5', '/', 
		'\x290', '\n', '/', '\x3', '/', '\x3', '/', '\x5', '/', '\x294', '\n', 
		'/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x31', '\x3', 
		'\x31', '\x3', '\x31', '\a', '\x31', '\x29C', '\n', '\x31', '\f', '\x31', 
		'\xE', '\x31', '\x29F', '\v', '\x31', '\x3', '\x32', '\x5', '\x32', '\x2A2', 
		'\n', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x5', '\x32', '\x2A8', '\n', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x33', '\x3', '\x33', '\x5', '\x33', '\x2AE', '\n', '\x33', '\x3', '\x34', 
		'\x3', '\x34', '\x3', '\x34', '\a', '\x34', '\x2B3', '\n', '\x34', '\f', 
		'\x34', '\xE', '\x34', '\x2B6', '\v', '\x34', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x5', '\x35', '\x2BB', '\n', '\x35', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x5', '\x36', '\x2C1', '\n', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x37', '\x3', '\x37', '\x6', '\x37', 
		'\x2C7', '\n', '\x37', '\r', '\x37', '\xE', '\x37', '\x2C8', '\x3', '\x37', 
		'\a', '\x37', '\x2CC', '\n', '\x37', '\f', '\x37', '\xE', '\x37', '\x2CF', 
		'\v', '\x37', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', 
		'\x3', '\x38', '\x3', '\x39', '\x6', '\x39', '\x2D7', '\n', '\x39', '\r', 
		'\x39', '\xE', '\x39', '\x2D8', '\x3', ':', '\x3', ':', '\x3', ':', '\x5', 
		':', '\x2DE', '\n', ':', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x5', ';', '\x2E6', '\n', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\a', ';', '\x2EB', '\n', ';', '\f', ';', '\xE', ';', 
		'\x2EE', '\v', ';', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '=', '\x5', 
		'=', '\x2F4', '\n', '=', '\x3', '=', '\x3', '=', '\x3', '>', '\x5', '>', 
		'\x2F9', '\n', '>', '\x3', '>', '\x3', '>', '\x3', '?', '\x3', '?', '\x3', 
		'?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', 
		'?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', 
		'?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', 
		'?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', 
		'?', '\x3', '?', '\x3', '?', '\x3', '?', '\x5', '?', '\x31B', '\n', '?', 
		'\x3', '@', '\x3', '@', '\x5', '@', '\x31F', '\n', '@', '\x3', '@', '\x3', 
		'@', '\x3', '\x41', '\x6', '\x41', '\x324', '\n', '\x41', '\r', '\x41', 
		'\xE', '\x41', '\x325', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', 
		'\x42', '\x5', '\x42', '\x32C', '\n', '\x42', '\x3', '\x42', '\x3', '\x42', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x5', '\x43', '\x333', '\n', 
		'\x43', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x337', '\n', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x33B', '\n', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x5', '\x45', '\x344', '\n', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\a', '\x45', '\x34A', '\n', 
		'\x45', '\f', '\x45', '\xE', '\x45', '\x34D', '\v', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x46', '\x3', '\x46', '\x5', '\x46', '\x353', '\n', 
		'\x46', '\x3', '\x46', '\x3', '\x46', '\x5', '\x46', '\x357', '\n', '\x46', 
		'\x3', 'G', '\x3', 'G', '\x5', 'G', '\x35B', '\n', 'G', '\x3', 'G', '\x3', 
		'G', '\x5', 'G', '\x35F', '\n', 'G', '\x3', 'G', '\x5', 'G', '\x362', 
		'\n', 'G', '\x3', 'G', '\x5', 'G', '\x365', '\n', 'G', '\x3', 'G', '\x5', 
		'G', '\x368', '\n', 'G', '\x3', 'G', '\x3', 'G', '\x5', 'G', '\x36C', 
		'\n', 'G', '\x3', 'G', '\x3', 'G', '\x5', 'G', '\x370', '\n', 'G', '\x3', 
		'G', '\x3', 'G', '\x5', 'G', '\x374', '\n', 'G', '\x5', 'G', '\x376', 
		'\n', 'G', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\a', 'H', '\x37B', '\n', 
		'H', '\f', 'H', '\xE', 'H', '\x37E', '\v', 'H', '\x3', 'I', '\x3', 'I', 
		'\x3', 'I', '\x5', 'I', '\x383', '\n', 'I', '\x3', 'I', '\x5', 'I', '\x386', 
		'\n', 'I', '\x3', 'I', '\x5', 'I', '\x389', '\n', 'I', '\x3', 'I', '\x3', 
		'I', '\x5', 'I', '\x38D', '\n', 'I', '\x3', 'I', '\x5', 'I', '\x390', 
		'\n', 'I', '\x3', 'J', '\x3', 'J', '\x3', 'K', '\x3', 'K', '\x3', 'K', 
		'\x5', 'K', '\x397', '\n', 'K', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 
		'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x5', 'L', '\x3A0', '\n', 'L', 
		'\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', 
		'\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', 
		'\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x5', 'M', 
		'\x3B3', '\n', 'M', '\x3', 'M', '\x3', 'M', '\x5', 'M', '\x3B7', '\n', 
		'M', '\x3', 'M', '\x3', 'M', '\x5', 'M', '\x3BB', '\n', 'M', '\x3', 'M', 
		'\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', 
		'\x3', 'M', '\x5', 'M', '\x3C5', '\n', 'M', '\x3', 'M', '\x3', 'M', '\x5', 
		'M', '\x3C9', '\n', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', 
		'\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x5', 'M', 
		'\x3D4', '\n', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 
		'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 
		'M', '\x5', 'M', '\x3E1', '\n', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', 
		'\x3', 'M', '\x5', 'M', '\x3E7', '\n', 'M', '\x3', 'N', '\x3', 'N', '\x3', 
		'O', '\x3', 'O', '\x3', 'O', '\x5', 'O', '\x3EE', '\n', 'O', '\x3', 'O', 
		'\x3', 'O', '\x3', 'P', '\x3', 'P', '\x3', 'P', '\x5', 'P', '\x3F5', '\n', 
		'P', '\x3', 'P', '\x3', 'P', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x5', 
		'Q', '\x3FC', '\n', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'R', '\x3', 'R', 
		'\x3', 'R', '\x5', 'R', '\x403', '\n', 'R', '\x3', 'R', '\x3', 'R', '\x3', 
		'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 
		'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 
		'U', '\x3', 'U', '\x5', 'U', '\x415', '\n', 'U', '\x3', 'U', '\x3', 'U', 
		'\x5', 'U', '\x419', '\n', 'U', '\x5', 'U', '\x41B', '\n', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'V', '\x6', 'V', '\x420', '\n', 'V', '\r', 'V', 
		'\xE', 'V', '\x421', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x5', 
		'W', '\x428', '\n', 'W', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x5', 'X', 
		'\x42D', '\n', 'X', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 
		'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', '[', '\x3', 
		'[', '\x3', '[', '\x3', '[', '\x5', '[', '\x43C', '\n', '[', '\x3', '[', 
		'\x5', '[', '\x43F', '\n', '[', '\x3', '\\', '\x3', '\\', '\x3', '\\', 
		'\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', ']', '\x3', ']', '\x3', 
		']', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', '_', '\x3', '_', '\x3', 
		'_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x5', 
		'_', '\x455', '\n', '_', '\x3', '`', '\x5', '`', '\x458', '\n', '`', '\x3', 
		'`', '\x3', '`', '\x3', '`', '\x5', '`', '\x45D', '\n', '`', '\x3', '`', 
		'\x3', '`', '\x3', '`', '\x3', '\x61', '\x5', '\x61', '\x463', '\n', '\x61', 
		'\x3', '\x61', '\x5', '\x61', '\x466', '\n', '\x61', '\x3', '\x62', '\x3', 
		'\x62', '\a', '\x62', '\x46A', '\n', '\x62', '\f', '\x62', '\xE', '\x62', 
		'\x46D', '\v', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x63', '\x3', 
		'\x63', '\x3', '\x63', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', 
		'\x65', '\x3', '\x65', '\x5', '\x65', '\x479', '\n', '\x65', '\x3', '\x65', 
		'\x3', '\x65', '\x3', '\x65', '\x5', '\x65', '\x47E', '\n', '\x65', '\x3', 
		'\x66', '\x3', '\x66', '\x3', '\x66', '\x5', '\x66', '\x483', '\n', '\x66', 
		'\x3', '\x66', '\x5', '\x66', '\x486', '\n', '\x66', '\x3', '\x66', '\x5', 
		'\x66', '\x489', '\n', '\x66', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', 
		'\x3', '\x66', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', 
		'\x3', '\x66', '\x3', '\x66', '\x5', '\x66', '\x495', '\n', '\x66', '\x3', 
		'\x66', '\x3', '\x66', '\x3', '\x66', '\x5', '\x66', '\x49A', '\n', '\x66', 
		'\x3', '\x66', '\x5', '\x66', '\x49D', '\n', '\x66', '\x3', 'g', '\x5', 
		'g', '\x4A0', '\n', 'g', '\x3', 'g', '\x5', 'g', '\x4A3', '\n', 'g', '\x3', 
		'g', '\x5', 'g', '\x4A6', '\n', 'g', '\x3', 'g', '\x5', 'g', '\x4A9', 
		'\n', 'g', '\x3', 'h', '\x3', 'h', '\x3', 'h', '\x3', 'i', '\x5', 'i', 
		'\x4AF', '\n', 'i', '\x3', 'i', '\x3', 'i', '\x3', 'i', '\x5', 'i', '\x4B4', 
		'\n', 'i', '\x3', 'i', '\x3', 'i', '\x3', 'i', '\x3', 'i', '\x3', 'i', 
		'\x3', 'j', '\x3', 'j', '\x3', 'j', '\x5', 'j', '\x4BE', '\n', 'j', '\x3', 
		'j', '\x3', 'j', '\x5', 'j', '\x4C2', '\n', 'j', '\x3', 'j', '\x3', 'j', 
		'\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'k', '\x3', 'k', '\x3', 'k', 
		'\x3', 'k', '\a', 'k', '\x4CD', '\n', 'k', '\f', 'k', '\xE', 'k', '\x4D0', 
		'\v', 'k', '\x3', 'k', '\x5', 'k', '\x4D3', '\n', 'k', '\x3', 'k', '\x3', 
		'k', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'm', '\x3', 'm', '\x3', 
		'm', '\x3', 'm', '\a', 'm', '\x4DE', '\n', 'm', '\f', 'm', '\xE', 'm', 
		'\x4E1', '\v', 'm', '\x3', 'm', '\x5', 'm', '\x4E4', '\n', 'm', '\x3', 
		'm', '\x3', 'm', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 
		'n', '\x5', 'n', '\x4ED', '\n', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', 
		'\x3', 'n', '\x3', 'n', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\a', 'o', 
		'\x4F7', '\n', 'o', '\f', 'o', '\xE', 'o', '\x4FA', '\v', 'o', '\x3', 
		'o', '\x3', 'o', '\x5', 'o', '\x4FE', '\n', 'o', '\x3', 'o', '\x3', 'o', 
		'\x3', 'o', '\x3', 'o', '\x3', 'o', '\x5', 'o', '\x505', '\n', 'o', '\x5', 
		'o', '\x507', '\n', 'o', '\x3', 'p', '\x5', 'p', '\x50A', '\n', 'p', '\x3', 
		'p', '\x5', 'p', '\x50D', '\n', 'p', '\x3', 'p', '\x3', 'p', '\x5', 'p', 
		'\x511', '\n', 'p', '\x3', 'p', '\x5', 'p', '\x514', '\n', 'p', '\x3', 
		'p', '\x3', 'p', '\x5', 'p', '\x518', '\n', 'p', '\x3', 'q', '\x3', 'q', 
		'\x3', 'q', '\x3', 'r', '\x5', 'r', '\x51E', '\n', 'r', '\x3', 's', '\x6', 
		's', '\x521', '\n', 's', '\r', 's', '\xE', 's', '\x522', '\x3', 't', '\x3', 
		't', '\x5', 't', '\x527', '\n', 't', '\x3', 't', '\x3', 't', '\x3', 'u', 
		'\x3', 'u', '\x6', 'u', '\x52D', '\n', 'u', '\r', 'u', '\xE', 'u', '\x52E', 
		'\x3', 'u', '\a', 'u', '\x532', '\n', 'u', '\f', 'u', '\xE', 'u', '\x535', 
		'\v', 'u', '\x3', 'v', '\x5', 'v', '\x538', '\n', 'v', '\x3', 'v', '\x3', 
		'v', '\x5', 'v', '\x53C', '\n', 'v', '\x3', 'v', '\x5', 'v', '\x53F', 
		'\n', 'v', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\a', 'w', 
		'\x545', '\n', 'w', '\f', 'w', '\xE', 'w', '\x548', '\v', 'w', '\x3', 
		'w', '\x5', 'w', '\x54B', '\n', 'w', '\x5', 'w', '\x54D', '\n', 'w', '\x3', 
		'w', '\x3', 'w', '\x3', 'x', '\x3', 'x', '\x3', 'x', '\x3', 'x', '\x3', 
		'x', '\x3', 'x', '\x3', 'x', '\x3', 'x', '\x3', 'x', '\x3', 'x', '\x3', 
		'x', '\x3', 'x', '\x3', 'x', '\x3', 'x', '\x3', 'x', '\x5', 'x', '\x560', 
		'\n', 'x', '\x3', 'y', '\x3', 'y', '\x3', 'y', '\x3', 'y', '\x5', 'y', 
		'\x566', '\n', 'y', '\x3', 'y', '\x3', 'y', '\x3', 'y', '\x3', 'y', '\x3', 
		'z', '\x3', 'z', '\x3', 'z', '\x3', 'z', '\x5', 'z', '\x570', '\n', 'z', 
		'\x3', 'z', '\x5', 'z', '\x573', '\n', 'z', '\x3', 'z', '\x3', 'z', '\x3', 
		'z', '\x3', 'z', '\x3', 'z', '\x3', '{', '\x3', '{', '\x3', '{', '\x5', 
		'{', '\x57D', '\n', '{', '\x3', '|', '\x3', '|', '\x3', '|', '\x5', '|', 
		'\x582', '\n', '|', '\x5', '|', '\x584', '\n', '|', '\x3', '|', '\x3', 
		'|', '\x3', '}', '\x3', '}', '\x3', '}', '\a', '}', '\x58B', '\n', '}', 
		'\f', '}', '\xE', '}', '\x58E', '\v', '}', '\x3', '~', '\x5', '~', '\x591', 
		'\n', '~', '\x3', '~', '\x3', '~', '\x5', '~', '\x595', '\n', '~', '\x3', 
		'\x7F', '\x3', '\x7F', '\x3', '\x7F', '\a', '\x7F', '\x59A', '\n', '\x7F', 
		'\f', '\x7F', '\xE', '\x7F', '\x59D', '\v', '\x7F', '\x3', '\x80', '\x3', 
		'\x80', '\x5', '\x80', '\x5A1', '\n', '\x80', '\x3', '\x80', '\x3', '\x80', 
		'\x5', '\x80', '\x5A5', '\n', '\x80', '\x3', '\x80', '\x3', '\x80', '\x5', 
		'\x80', '\x5A9', '\n', '\x80', '\x3', '\x80', '\x3', '\x80', '\x3', '\x80', 
		'\x3', '\x80', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', 
		'\x3', '\x81', '\x5', '\x81', '\x5B4', '\n', '\x81', '\x3', '\x81', '\x3', 
		'\x81', '\x3', '\x81', '\x3', '\x81', '\x5', '\x81', '\x5BA', '\n', '\x81', 
		'\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', 
		'\x5', '\x81', '\x5C1', '\n', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', 
		'\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', 
		'\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', 
		'\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', 
		'\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', 
		'\x81', '\x3', '\x81', '\x3', '\x81', '\x5', '\x81', '\x5DC', '\n', '\x81', 
		'\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', 
		'\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', 
		'\x5', '\x81', '\x5E8', '\n', '\x81', '\x5', '\x81', '\x5EA', '\n', '\x81', 
		'\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', 
		'\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', 
		'\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', 
		'\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', 
		'\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', 
		'\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', 
		'\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', 
		'\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', 
		'\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', 
		'\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', 
		'\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', 
		'\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x5', '\x81', '\x626', '\n', 
		'\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', 
		'\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', 
		'\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\a', '\x81', '\x635', 
		'\n', '\x81', '\f', '\x81', '\xE', '\x81', '\x638', '\v', '\x81', '\x3', 
		'\x82', '\x3', '\x82', '\x3', '\x82', '\x5', '\x82', '\x63D', '\n', '\x82', 
		'\x3', '\x82', '\x5', '\x82', '\x640', '\n', '\x82', '\x3', '\x83', '\x5', 
		'\x83', '\x643', '\n', '\x83', '\x3', '\x83', '\x3', '\x83', '\x5', '\x83', 
		'\x647', '\n', '\x83', '\x3', '\x83', '\x3', '\x83', '\x3', '\x83', '\x3', 
		'\x84', '\x3', '\x84', '\x3', '\x84', '\x5', '\x84', '\x64F', '\n', '\x84', 
		'\x3', '\x84', '\x5', '\x84', '\x652', '\n', '\x84', '\x3', '\x85', '\x3', 
		'\x85', '\x3', '\x85', '\x3', '\x85', '\x3', '\x85', '\x5', '\x85', '\x659', 
		'\n', '\x85', '\x3', '\x86', '\x3', '\x86', '\x3', '\x87', '\x3', '\x87', 
		'\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x5', '\x87', 
		'\x663', '\n', '\x87', '\x3', '\x88', '\x3', '\x88', '\a', '\x88', '\x667', 
		'\n', '\x88', '\f', '\x88', '\xE', '\x88', '\x66A', '\v', '\x88', '\x3', 
		'\x88', '\x3', '\x88', '\x3', '\x89', '\x3', '\x89', '\x3', '\x89', '\x3', 
		'\x89', '\x3', '\x89', '\x5', '\x89', '\x673', '\n', '\x89', '\x3', '\x8A', 
		'\x3', '\x8A', '\x3', '\x8B', '\x3', '\x8B', '\x5', '\x8B', '\x679', '\n', 
		'\x8B', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8D', '\x3', '\x8D', '\x3', 
		'\x8D', '\x5', '\x8D', '\x680', '\n', '\x8D', '\x3', '\x8E', '\x3', '\x8E', 
		'\x3', '\x8F', '\x3', '\x8F', '\x3', '\x8F', '\x3', '\x90', '\x3', '\x90', 
		'\x3', '\x90', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', 
		'\x5', '\x91', '\x68E', '\n', '\x91', '\x3', '\x91', '\x2', '\x6', '\x16', 
		'\x18', 't', '\x100', '\x92', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', 
		':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 
		'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 
		'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', 
		'\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', '\x96', 
		'\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', '\xA8', 
		'\xAA', '\xAC', '\xAE', '\xB0', '\xB2', '\xB4', '\xB6', '\xB8', '\xBA', 
		'\xBC', '\xBE', '\xC0', '\xC2', '\xC4', '\xC6', '\xC8', '\xCA', '\xCC', 
		'\xCE', '\xD0', '\xD2', '\xD4', '\xD6', '\xD8', '\xDA', '\xDC', '\xDE', 
		'\xE0', '\xE2', '\xE4', '\xE6', '\xE8', '\xEA', '\xEC', '\xEE', '\xF0', 
		'\xF2', '\xF4', '\xF6', '\xF8', '\xFA', '\xFC', '\xFE', '\x100', '\x102', 
		'\x104', '\x106', '\x108', '\x10A', '\x10C', '\x10E', '\x110', '\x112', 
		'\x114', '\x116', '\x118', '\x11A', '\x11C', '\x11E', '\x120', '\x2', 
		'\x11', '\x4', '\x2', 'K', 'K', 'n', 'r', '\x3', '\x2', '\r', '\xE', '\x4', 
		'\x2', 'g', 'h', 'k', 'k', '\x4', '\x2', 'o', 'o', 'q', 'q', '\x5', '\x2', 
		'G', 'G', '\x62', '\x62', '\x66', '\x66', '\x4', '\x2', '\xF', '\xF', 
		'\x11', '\x11', '\x3', '\x2', '\x1A', '\x1C', '\x3', '\x2', '\x16', '\x17', 
		'\x3', '\x2', '\x1D', '\x1F', '\x3', '\x2', ' ', '#', '\x3', '\x2', '$', 
		'\'', '\x3', '\x2', '-', '\x37', '\x3', '\x2', ';', '?', '\x5', '\x2', 
		's', 's', 'x', 'x', '~', '~', '\a', '\x2', '@', 'Y', '[', 'm', 'q', 'q', 
		's', 'u', 'x', 'x', '\x2', '\x73D', '\x2', '\x122', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x127', '\x3', '\x2', '\x2', '\x2', '\x6', '\x129', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x12F', '\x3', '\x2', '\x2', '\x2', '\n', 
		'\x13C', '\x3', '\x2', '\x2', '\x2', '\f', '\x13E', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '\x141', '\x3', '\x2', '\x2', '\x2', '\x10', '\x147', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x156', '\x3', '\x2', '\x2', '\x2', '\x16', '\x158', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x178', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x183', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x185', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\x18B', '\x3', '\x2', '\x2', '\x2', ' ', '\x18D', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\x191', '\x3', '\x2', '\x2', '\x2', '$', '\x19E', '\x3', 
		'\x2', '\x2', '\x2', '&', '\x1A0', '\x3', '\x2', '\x2', '\x2', '(', '\x1A6', 
		'\x3', '\x2', '\x2', '\x2', '*', '\x1AA', '\x3', '\x2', '\x2', '\x2', 
		',', '\x1BB', '\x3', '\x2', '\x2', '\x2', '.', '\x1BD', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x1C2', '\x3', '\x2', '\x2', '\x2', '\x32', '\x1C6', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x1CF', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x1D9', '\x3', '\x2', '\x2', '\x2', '\x38', '\x1E5', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x1F2', '\x3', '\x2', '\x2', '\x2', '<', '\x1F5', 
		'\x3', '\x2', '\x2', '\x2', '>', '\x202', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x206', '\x3', '\x2', '\x2', '\x2', '\x42', '\x21D', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x21F', '\x3', '\x2', '\x2', '\x2', '\x46', '\x229', 
		'\x3', '\x2', '\x2', '\x2', 'H', '\x22C', '\x3', '\x2', '\x2', '\x2', 
		'J', '\x23C', '\x3', '\x2', '\x2', '\x2', 'L', '\x242', '\x3', '\x2', 
		'\x2', '\x2', 'N', '\x24B', '\x3', '\x2', '\x2', '\x2', 'P', '\x24F', 
		'\x3', '\x2', '\x2', '\x2', 'R', '\x251', '\x3', '\x2', '\x2', '\x2', 
		'T', '\x25D', '\x3', '\x2', '\x2', '\x2', 'V', '\x264', '\x3', '\x2', 
		'\x2', '\x2', 'X', '\x26A', '\x3', '\x2', '\x2', '\x2', 'Z', '\x274', 
		'\x3', '\x2', '\x2', '\x2', '\\', '\x284', '\x3', '\x2', '\x2', '\x2', 
		'^', '\x295', '\x3', '\x2', '\x2', '\x2', '`', '\x298', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x2A1', '\x3', '\x2', '\x2', '\x2', '\x64', '\x2AB', 
		'\x3', '\x2', '\x2', '\x2', '\x66', '\x2AF', '\x3', '\x2', '\x2', '\x2', 
		'h', '\x2B7', '\x3', '\x2', '\x2', '\x2', 'j', '\x2BC', '\x3', '\x2', 
		'\x2', '\x2', 'l', '\x2C4', '\x3', '\x2', '\x2', '\x2', 'n', '\x2D0', 
		'\x3', '\x2', '\x2', '\x2', 'p', '\x2D6', '\x3', '\x2', '\x2', '\x2', 
		'r', '\x2DA', '\x3', '\x2', '\x2', '\x2', 't', '\x2E5', '\x3', '\x2', 
		'\x2', '\x2', 'v', '\x2EF', '\x3', '\x2', '\x2', '\x2', 'x', '\x2F3', 
		'\x3', '\x2', '\x2', '\x2', 'z', '\x2F8', '\x3', '\x2', '\x2', '\x2', 
		'|', '\x31A', '\x3', '\x2', '\x2', '\x2', '~', '\x31C', '\x3', '\x2', 
		'\x2', '\x2', '\x80', '\x323', '\x3', '\x2', '\x2', '\x2', '\x82', '\x327', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x32F', '\x3', '\x2', '\x2', '\x2', 
		'\x86', '\x336', '\x3', '\x2', '\x2', '\x2', '\x88', '\x343', '\x3', '\x2', 
		'\x2', '\x2', '\x8A', '\x350', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x375', 
		'\x3', '\x2', '\x2', '\x2', '\x8E', '\x377', '\x3', '\x2', '\x2', '\x2', 
		'\x90', '\x382', '\x3', '\x2', '\x2', '\x2', '\x92', '\x391', '\x3', '\x2', 
		'\x2', '\x2', '\x94', '\x393', '\x3', '\x2', '\x2', '\x2', '\x96', '\x398', 
		'\x3', '\x2', '\x2', '\x2', '\x98', '\x3E6', '\x3', '\x2', '\x2', '\x2', 
		'\x9A', '\x3E8', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x3EA', '\x3', '\x2', 
		'\x2', '\x2', '\x9E', '\x3F1', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x3F8', 
		'\x3', '\x2', '\x2', '\x2', '\xA2', '\x3FF', '\x3', '\x2', '\x2', '\x2', 
		'\xA4', '\x406', '\x3', '\x2', '\x2', '\x2', '\xA6', '\x40C', '\x3', '\x2', 
		'\x2', '\x2', '\xA8', '\x412', '\x3', '\x2', '\x2', '\x2', '\xAA', '\x41F', 
		'\x3', '\x2', '\x2', '\x2', '\xAC', '\x423', '\x3', '\x2', '\x2', '\x2', 
		'\xAE', '\x429', '\x3', '\x2', '\x2', '\x2', '\xB0', '\x42E', '\x3', '\x2', 
		'\x2', '\x2', '\xB2', '\x432', '\x3', '\x2', '\x2', '\x2', '\xB4', '\x437', 
		'\x3', '\x2', '\x2', '\x2', '\xB6', '\x440', '\x3', '\x2', '\x2', '\x2', 
		'\xB8', '\x446', '\x3', '\x2', '\x2', '\x2', '\xBA', '\x449', '\x3', '\x2', 
		'\x2', '\x2', '\xBC', '\x44C', '\x3', '\x2', '\x2', '\x2', '\xBE', '\x457', 
		'\x3', '\x2', '\x2', '\x2', '\xC0', '\x462', '\x3', '\x2', '\x2', '\x2', 
		'\xC2', '\x467', '\x3', '\x2', '\x2', '\x2', '\xC4', '\x470', '\x3', '\x2', 
		'\x2', '\x2', '\xC6', '\x473', '\x3', '\x2', '\x2', '\x2', '\xC8', '\x47D', 
		'\x3', '\x2', '\x2', '\x2', '\xCA', '\x49C', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\x49F', '\x3', '\x2', '\x2', '\x2', '\xCE', '\x4AA', '\x3', '\x2', 
		'\x2', '\x2', '\xD0', '\x4AE', '\x3', '\x2', '\x2', '\x2', '\xD2', '\x4BA', 
		'\x3', '\x2', '\x2', '\x2', '\xD4', '\x4C8', '\x3', '\x2', '\x2', '\x2', 
		'\xD6', '\x4D6', '\x3', '\x2', '\x2', '\x2', '\xD8', '\x4D9', '\x3', '\x2', 
		'\x2', '\x2', '\xDA', '\x4E7', '\x3', '\x2', '\x2', '\x2', '\xDC', '\x506', 
		'\x3', '\x2', '\x2', '\x2', '\xDE', '\x509', '\x3', '\x2', '\x2', '\x2', 
		'\xE0', '\x519', '\x3', '\x2', '\x2', '\x2', '\xE2', '\x51D', '\x3', '\x2', 
		'\x2', '\x2', '\xE4', '\x520', '\x3', '\x2', '\x2', '\x2', '\xE6', '\x524', 
		'\x3', '\x2', '\x2', '\x2', '\xE8', '\x52A', '\x3', '\x2', '\x2', '\x2', 
		'\xEA', '\x537', '\x3', '\x2', '\x2', '\x2', '\xEC', '\x540', '\x3', '\x2', 
		'\x2', '\x2', '\xEE', '\x55F', '\x3', '\x2', '\x2', '\x2', '\xF0', '\x561', 
		'\x3', '\x2', '\x2', '\x2', '\xF2', '\x56B', '\x3', '\x2', '\x2', '\x2', 
		'\xF4', '\x57C', '\x3', '\x2', '\x2', '\x2', '\xF6', '\x57E', '\x3', '\x2', 
		'\x2', '\x2', '\xF8', '\x587', '\x3', '\x2', '\x2', '\x2', '\xFA', '\x590', 
		'\x3', '\x2', '\x2', '\x2', '\xFC', '\x596', '\x3', '\x2', '\x2', '\x2', 
		'\xFE', '\x59E', '\x3', '\x2', '\x2', '\x2', '\x100', '\x5E9', '\x3', 
		'\x2', '\x2', '\x2', '\x102', '\x63F', '\x3', '\x2', '\x2', '\x2', '\x104', 
		'\x642', '\x3', '\x2', '\x2', '\x2', '\x106', '\x651', '\x3', '\x2', '\x2', 
		'\x2', '\x108', '\x658', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x65A', 
		'\x3', '\x2', '\x2', '\x2', '\x10C', '\x662', '\x3', '\x2', '\x2', '\x2', 
		'\x10E', '\x664', '\x3', '\x2', '\x2', '\x2', '\x110', '\x672', '\x3', 
		'\x2', '\x2', '\x2', '\x112', '\x674', '\x3', '\x2', '\x2', '\x2', '\x114', 
		'\x678', '\x3', '\x2', '\x2', '\x2', '\x116', '\x67A', '\x3', '\x2', '\x2', 
		'\x2', '\x118', '\x67F', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x681', 
		'\x3', '\x2', '\x2', '\x2', '\x11C', '\x683', '\x3', '\x2', '\x2', '\x2', 
		'\x11E', '\x686', '\x3', '\x2', '\x2', '\x2', '\x120', '\x68D', '\x3', 
		'\x2', '\x2', '\x2', '\x122', '\x123', '\a', '\xF', '\x2', '\x2', '\x123', 
		'\x124', '\x5', '\x100', '\x81', '\x2', '\x124', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x125', '\x128', '\x5', '\xE6', 't', '\x2', '\x126', '\x128', 
		'\x5', '\xEC', 'w', '\x2', '\x127', '\x125', '\x3', '\x2', '\x2', '\x2', 
		'\x127', '\x126', '\x3', '\x2', '\x2', '\x2', '\x128', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x129', '\x12B', '\a', ' ', '\x2', '\x2', '\x12A', '\x12C', 
		'\x5', '\b', '\x5', '\x2', '\x12B', '\x12A', '\x3', '\x2', '\x2', '\x2', 
		'\x12B', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12D', '\x3', 
		'\x2', '\x2', '\x2', '\x12D', '\x12E', '\a', '!', '\x2', '\x2', '\x12E', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x134', '\x5', '\n', '\x6', 
		'\x2', '\x130', '\x131', '\a', '\xE', '\x2', '\x2', '\x131', '\x133', 
		'\x5', '\n', '\x6', '\x2', '\x132', '\x130', '\x3', '\x2', '\x2', '\x2', 
		'\x133', '\x136', '\x3', '\x2', '\x2', '\x2', '\x134', '\x132', '\x3', 
		'\x2', '\x2', '\x2', '\x134', '\x135', '\x3', '\x2', '\x2', '\x2', '\x135', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x136', '\x134', '\x3', '\x2', '\x2', 
		'\x2', '\x137', '\x139', '\a', '~', '\x2', '\x2', '\x138', '\x13A', '\x5', 
		'\f', '\a', '\x2', '\x139', '\x138', '\x3', '\x2', '\x2', '\x2', '\x139', 
		'\x13A', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13D', '\x3', '\x2', '\x2', 
		'\x2', '\x13B', '\x13D', '\x5', '\x6', '\x4', '\x2', '\x13C', '\x137', 
		'\x3', '\x2', '\x2', '\x2', '\x13C', '\x13B', '\x3', '\x2', '\x2', '\x2', 
		'\x13D', '\v', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x13F', '\a', '`', 
		'\x2', '\x2', '\x13F', '\x140', '\x5', '\x14', '\v', '\x2', '\x140', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\x141', '\x143', '\a', ' ', '\x2', '\x2', 
		'\x142', '\x144', '\x5', '\x10', '\t', '\x2', '\x143', '\x142', '\x3', 
		'\x2', '\x2', '\x2', '\x143', '\x144', '\x3', '\x2', '\x2', '\x2', '\x144', 
		'\x145', '\x3', '\x2', '\x2', '\x2', '\x145', '\x146', '\a', '!', '\x2', 
		'\x2', '\x146', '\xF', '\x3', '\x2', '\x2', '\x2', '\x147', '\x14C', '\x5', 
		'\x12', '\n', '\x2', '\x148', '\x149', '\a', '\xE', '\x2', '\x2', '\x149', 
		'\x14B', '\x5', '\x12', '\n', '\x2', '\x14A', '\x148', '\x3', '\x2', '\x2', 
		'\x2', '\x14B', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14A', 
		'\x3', '\x2', '\x2', '\x2', '\x14C', '\x14D', '\x3', '\x2', '\x2', '\x2', 
		'\x14D', '\x11', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x14C', '\x3', 
		'\x2', '\x2', '\x2', '\x14F', '\x150', '\x5', '\x14', '\v', '\x2', '\x150', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x151', '\x157', '\x5', '\x16', '\f', 
		'\x2', '\x152', '\x157', '\x5', '\x34', '\x1B', '\x2', '\x153', '\x157', 
		'\x5', '\x36', '\x1C', '\x2', '\x154', '\x157', '\x5', ' ', '\x11', '\x2', 
		'\x155', '\x157', '\a', '\x7F', '\x2', '\x2', '\x156', '\x151', '\x3', 
		'\x2', '\x2', '\x2', '\x156', '\x152', '\x3', '\x2', '\x2', '\x2', '\x156', 
		'\x153', '\x3', '\x2', '\x2', '\x2', '\x156', '\x154', '\x3', '\x2', '\x2', 
		'\x2', '\x156', '\x155', '\x3', '\x2', '\x2', '\x2', '\x157', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x158', '\x159', '\b', '\f', '\x1', '\x2', 
		'\x159', '\x15A', '\x5', '\x18', '\r', '\x2', '\x15A', '\x163', '\x3', 
		'\x2', '\x2', '\x2', '\x15B', '\x15C', '\f', '\x5', '\x2', '\x2', '\x15C', 
		'\x15D', '\a', '*', '\x2', '\x2', '\x15D', '\x162', '\x5', '\x16', '\f', 
		'\x6', '\x15E', '\x15F', '\f', '\x4', '\x2', '\x2', '\x15F', '\x160', 
		'\a', '(', '\x2', '\x2', '\x160', '\x162', '\x5', '\x16', '\f', '\x5', 
		'\x161', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x161', '\x15E', '\x3', 
		'\x2', '\x2', '\x2', '\x162', '\x165', '\x3', '\x2', '\x2', '\x2', '\x163', 
		'\x161', '\x3', '\x2', '\x2', '\x2', '\x163', '\x164', '\x3', '\x2', '\x2', 
		'\x2', '\x164', '\x17', '\x3', '\x2', '\x2', '\x2', '\x165', '\x163', 
		'\x3', '\x2', '\x2', '\x2', '\x166', '\x167', '\b', '\r', '\x1', '\x2', 
		'\x167', '\x168', '\a', '\b', '\x2', '\x2', '\x168', '\x169', '\x5', '\x14', 
		'\v', '\x2', '\x169', '\x16A', '\a', '\t', '\x2', '\x2', '\x16A', '\x179', 
		'\x3', '\x2', '\x2', '\x2', '\x16B', '\x179', '\x5', '\x1A', '\xE', '\x2', 
		'\x16C', '\x179', '\x5', '\x1C', '\xF', '\x2', '\x16D', '\x179', '\x5', 
		'&', '\x14', '\x2', '\x16E', '\x16F', '\a', '\x6', '\x2', '\x2', '\x16F', 
		'\x170', '\x5', '\x32', '\x1A', '\x2', '\x170', '\x171', '\a', '\a', '\x2', 
		'\x2', '\x171', '\x179', '\x3', '\x2', '\x2', '\x2', '\x172', '\x179', 
		'\x5', '\x38', '\x1D', '\x2', '\x173', '\x179', '\a', 'R', '\x2', '\x2', 
		'\x174', '\x175', '\x5', '\x1C', '\xF', '\x2', '\x175', '\x176', '\a', 
		'|', '\x2', '\x2', '\x176', '\x177', '\x5', '\x18', '\r', '\x3', '\x177', 
		'\x179', '\x3', '\x2', '\x2', '\x2', '\x178', '\x166', '\x3', '\x2', '\x2', 
		'\x2', '\x178', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x178', '\x16C', 
		'\x3', '\x2', '\x2', '\x2', '\x178', '\x16D', '\x3', '\x2', '\x2', '\x2', 
		'\x178', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x178', '\x172', '\x3', 
		'\x2', '\x2', '\x2', '\x178', '\x173', '\x3', '\x2', '\x2', '\x2', '\x178', 
		'\x174', '\x3', '\x2', '\x2', '\x2', '\x179', '\x180', '\x3', '\x2', '\x2', 
		'\x2', '\x17A', '\x17B', '\f', '\a', '\x2', '\x2', '\x17B', '\x17C', '\x6', 
		'\r', '\x5', '\x2', '\x17C', '\x17D', '\a', '\x6', '\x2', '\x2', '\x17D', 
		'\x17F', '\a', '\a', '\x2', '\x2', '\x17E', '\x17A', '\x3', '\x2', '\x2', 
		'\x2', '\x17F', '\x182', '\x3', '\x2', '\x2', '\x2', '\x180', '\x17E', 
		'\x3', '\x2', '\x2', '\x2', '\x180', '\x181', '\x3', '\x2', '\x2', '\x2', 
		'\x181', '\x19', '\x3', '\x2', '\x2', '\x2', '\x182', '\x180', '\x3', 
		'\x2', '\x2', '\x2', '\x183', '\x184', '\t', '\x2', '\x2', '\x2', '\x184', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x185', '\x187', '\x5', '$', '\x13', 
		'\x2', '\x186', '\x188', '\x5', '\x1E', '\x10', '\x2', '\x187', '\x186', 
		'\x3', '\x2', '\x2', '\x2', '\x187', '\x188', '\x3', '\x2', '\x2', '\x2', 
		'\x188', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x189', '\x18C', '\x5', 
		'\"', '\x12', '\x2', '\x18A', '\x18C', '\x5', ' ', '\x11', '\x2', '\x18B', 
		'\x189', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x18A', '\x3', '\x2', '\x2', 
		'\x2', '\x18C', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x18E', 
		'\a', ' ', '\x2', '\x2', '\x18E', '\x18F', '\x5', '\x10', '\t', '\x2', 
		'\x18F', '\x190', '\a', '!', '\x2', '\x2', '\x190', '!', '\x3', '\x2', 
		'\x2', '\x2', '\x191', '\x192', '\a', ' ', '\x2', '\x2', '\x192', '\x193', 
		'\x5', '\x10', '\t', '\x2', '\x193', '\x194', '\a', ' ', '\x2', '\x2', 
		'\x194', '\x19A', '\x5', '\x10', '\t', '\x2', '\x195', '\x196', '\a', 
		'!', '\x2', '\x2', '\x196', '\x197', '\x5', '\x4', '\x3', '\x2', '\x197', 
		'\x198', '\a', '!', '\x2', '\x2', '\x198', '\x19B', '\x3', '\x2', '\x2', 
		'\x2', '\x199', '\x19B', '\a', '\x1D', '\x2', '\x2', '\x19A', '\x195', 
		'\x3', '\x2', '\x2', '\x2', '\x19A', '\x199', '\x3', '\x2', '\x2', '\x2', 
		'\x19B', '#', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x19F', '\a', '~', 
		'\x2', '\x2', '\x19D', '\x19F', '\x5', 'l', '\x37', '\x2', '\x19E', '\x19C', 
		'\x3', '\x2', '\x2', '\x2', '\x19E', '\x19D', '\x3', '\x2', '\x2', '\x2', 
		'\x19F', '%', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x1A2', '\a', '\n', 
		'\x2', '\x2', '\x1A1', '\x1A3', '\x5', '(', '\x15', '\x2', '\x1A2', '\x1A1', 
		'\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A3', '\x3', '\x2', '\x2', '\x2', 
		'\x1A3', '\x1A4', '\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1A5', '\a', 
		'\f', '\x2', '\x2', '\x1A5', '\'', '\x3', '\x2', '\x2', '\x2', '\x1A6', 
		'\x1A8', '\x5', '*', '\x16', '\x2', '\x1A7', '\x1A9', '\t', '\x3', '\x2', 
		'\x2', '\x1A8', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1A9', 
		'\x3', '\x2', '\x2', '\x2', '\x1A9', ')', '\x3', '\x2', '\x2', '\x2', 
		'\x1AA', '\x1AF', '\x5', ',', '\x17', '\x2', '\x1AB', '\x1AC', '\t', '\x3', 
		'\x2', '\x2', '\x1AC', '\x1AE', '\x5', ',', '\x17', '\x2', '\x1AD', '\x1AB', 
		'\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1B1', '\x3', '\x2', '\x2', '\x2', 
		'\x1AF', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1B0', '\x3', 
		'\x2', '\x2', '\x2', '\x1B0', '+', '\x3', '\x2', '\x2', '\x2', '\x1B1', 
		'\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1BC', '\x5', '<', '\x1F', 
		'\x2', '\x1B3', '\x1BC', '\x5', '@', '!', '\x2', '\x1B4', '\x1BC', '\x5', 
		'R', '*', '\x2', '\x1B5', '\x1BC', '\x5', 'T', '+', '\x2', '\x1B6', '\x1B9', 
		'\x5', 'V', ',', '\x2', '\x1B7', '\x1B8', '\a', '\x38', '\x2', '\x2', 
		'\x1B8', '\x1BA', '\x5', '\x14', '\v', '\x2', '\x1B9', '\x1B7', '\x3', 
		'\x2', '\x2', '\x2', '\x1B9', '\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1BA', 
		'\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1B2', '\x3', '\x2', '\x2', 
		'\x2', '\x1BB', '\x1B3', '\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1B4', 
		'\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1B5', '\x3', '\x2', '\x2', '\x2', 
		'\x1BB', '\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1BC', '-', '\x3', '\x2', 
		'\x2', '\x2', '\x1BD', '\x1BE', '\x5', '\x18', '\r', '\x2', '\x1BE', '\x1BF', 
		'\x6', '\x18', '\x6', '\x2', '\x1BF', '\x1C0', '\a', '\x6', '\x2', '\x2', 
		'\x1C0', '\x1C1', '\a', '\a', '\x2', '\x2', '\x1C1', '/', '\x3', '\x2', 
		'\x2', '\x2', '\x1C2', '\x1C3', '\a', '\x6', '\x2', '\x2', '\x1C3', '\x1C4', 
		'\x5', '\x32', '\x1A', '\x2', '\x1C4', '\x1C5', '\a', '\a', '\x2', '\x2', 
		'\x1C5', '\x31', '\x3', '\x2', '\x2', '\x2', '\x1C6', '\x1CB', '\x5', 
		'\x14', '\v', '\x2', '\x1C7', '\x1C8', '\a', '\xE', '\x2', '\x2', '\x1C8', 
		'\x1CA', '\x5', '\x14', '\v', '\x2', '\x1C9', '\x1C7', '\x3', '\x2', '\x2', 
		'\x2', '\x1CA', '\x1CD', '\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1C9', 
		'\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1CC', '\x3', '\x2', '\x2', '\x2', 
		'\x1CC', '\x33', '\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1CB', '\x3', 
		'\x2', '\x2', '\x2', '\x1CE', '\x1D0', '\x5', '\x6', '\x4', '\x2', '\x1CF', 
		'\x1CE', '\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1D0', '\x3', '\x2', '\x2', 
		'\x2', '\x1D0', '\x1D1', '\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1D3', 
		'\a', '\b', '\x2', '\x2', '\x1D2', '\x1D4', '\x5', '\x42', '\"', '\x2', 
		'\x1D3', '\x1D2', '\x3', '\x2', '\x2', '\x2', '\x1D3', '\x1D4', '\x3', 
		'\x2', '\x2', '\x2', '\x1D4', '\x1D5', '\x3', '\x2', '\x2', '\x2', '\x1D5', 
		'\x1D6', '\a', '\t', '\x2', '\x2', '\x1D6', '\x1D7', '\a', '\x38', '\x2', 
		'\x2', '\x1D7', '\x1D8', '\x5', '\x14', '\v', '\x2', '\x1D8', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1DB', '\a', '\x46', '\x2', '\x2', 
		'\x1DA', '\x1DC', '\x5', '\x6', '\x4', '\x2', '\x1DB', '\x1DA', '\x3', 
		'\x2', '\x2', '\x2', '\x1DB', '\x1DC', '\x3', '\x2', '\x2', '\x2', '\x1DC', 
		'\x1DD', '\x3', '\x2', '\x2', '\x2', '\x1DD', '\x1DF', '\a', '\b', '\x2', 
		'\x2', '\x1DE', '\x1E0', '\x5', '\x42', '\"', '\x2', '\x1DF', '\x1DE', 
		'\x3', '\x2', '\x2', '\x2', '\x1DF', '\x1E0', '\x3', '\x2', '\x2', '\x2', 
		'\x1E0', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\x1E1', '\x1E2', '\a', 
		'\t', '\x2', '\x2', '\x1E2', '\x1E3', '\a', '\x38', '\x2', '\x2', '\x1E3', 
		'\x1E4', '\x5', '\x14', '\v', '\x2', '\x1E4', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x1E5', '\x1E6', '\a', '\x43', '\x2', '\x2', '\x1E6', '\x1E7', 
		'\x5', ':', '\x1E', '\x2', '\x1E7', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\x1E8', '\x1F3', '\a', '~', '\x2', '\x2', '\x1E9', '\x1EA', '\x5', '\x114', 
		'\x8B', '\x2', '\x1EA', '\x1EB', '\a', '\x13', '\x2', '\x2', '\x1EB', 
		'\x1ED', '\x3', '\x2', '\x2', '\x2', '\x1EC', '\x1E9', '\x3', '\x2', '\x2', 
		'\x2', '\x1ED', '\x1EE', '\x3', '\x2', '\x2', '\x2', '\x1EE', '\x1EC', 
		'\x3', '\x2', '\x2', '\x2', '\x1EE', '\x1EF', '\x3', '\x2', '\x2', '\x2', 
		'\x1EF', '\x1F0', '\x3', '\x2', '\x2', '\x2', '\x1F0', '\x1F1', '\x5', 
		'\x114', '\x8B', '\x2', '\x1F1', '\x1F3', '\x3', '\x2', '\x2', '\x2', 
		'\x1F2', '\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1EC', '\x3', 
		'\x2', '\x2', '\x2', '\x1F3', ';', '\x3', '\x2', '\x2', '\x2', '\x1F4', 
		'\x1F6', '\a', '\\', '\x2', '\x2', '\x1F5', '\x1F4', '\x3', '\x2', '\x2', 
		'\x2', '\x1F5', '\x1F6', '\x3', '\x2', '\x2', '\x2', '\x1F6', '\x1F7', 
		'\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1F9', '\x5', '\xF4', '{', '\x2', 
		'\x1F8', '\x1FA', '\a', '\x10', '\x2', '\x2', '\x1F9', '\x1F8', '\x3', 
		'\x2', '\x2', '\x2', '\x1F9', '\x1FA', '\x3', '\x2', '\x2', '\x2', '\x1FA', 
		'\x1FC', '\x3', '\x2', '\x2', '\x2', '\x1FB', '\x1FD', '\x5', '>', ' ', 
		'\x2', '\x1FC', '\x1FB', '\x3', '\x2', '\x2', '\x2', '\x1FC', '\x1FD', 
		'\x3', '\x2', '\x2', '\x2', '\x1FD', '\x200', '\x3', '\x2', '\x2', '\x2', 
		'\x1FE', '\x1FF', '\a', '\x38', '\x2', '\x2', '\x1FF', '\x201', '\x5', 
		'\x14', '\v', '\x2', '\x200', '\x1FE', '\x3', '\x2', '\x2', '\x2', '\x200', 
		'\x201', '\x3', '\x2', '\x2', '\x2', '\x201', '=', '\x3', '\x2', '\x2', 
		'\x2', '\x202', '\x203', '\a', '\x11', '\x2', '\x2', '\x203', '\x204', 
		'\x5', '\x14', '\v', '\x2', '\x204', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x205', '\x207', '\x5', '\x6', '\x4', '\x2', '\x206', '\x205', '\x3', 
		'\x2', '\x2', '\x2', '\x206', '\x207', '\x3', '\x2', '\x2', '\x2', '\x207', 
		'\x208', '\x3', '\x2', '\x2', '\x2', '\x208', '\x20A', '\a', '\b', '\x2', 
		'\x2', '\x209', '\x20B', '\x5', '\x42', '\"', '\x2', '\x20A', '\x209', 
		'\x3', '\x2', '\x2', '\x2', '\x20A', '\x20B', '\x3', '\x2', '\x2', '\x2', 
		'\x20B', '\x20C', '\x3', '\x2', '\x2', '\x2', '\x20C', '\x20E', '\a', 
		'\t', '\x2', '\x2', '\x20D', '\x20F', '\x5', '>', ' ', '\x2', '\x20E', 
		'\x20D', '\x3', '\x2', '\x2', '\x2', '\x20E', '\x20F', '\x3', '\x2', '\x2', 
		'\x2', '\x20F', '\x41', '\x3', '\x2', '\x2', '\x2', '\x210', '\x21E', 
		'\x5', 'J', '&', '\x2', '\x211', '\x216', '\x5', '\x46', '$', '\x2', '\x212', 
		'\x213', '\a', '\xE', '\x2', '\x2', '\x213', '\x215', '\x5', '\x46', '$', 
		'\x2', '\x214', '\x212', '\x3', '\x2', '\x2', '\x2', '\x215', '\x218', 
		'\x3', '\x2', '\x2', '\x2', '\x216', '\x214', '\x3', '\x2', '\x2', '\x2', 
		'\x216', '\x217', '\x3', '\x2', '\x2', '\x2', '\x217', '\x21B', '\x3', 
		'\x2', '\x2', '\x2', '\x218', '\x216', '\x3', '\x2', '\x2', '\x2', '\x219', 
		'\x21A', '\a', '\xE', '\x2', '\x2', '\x21A', '\x21C', '\x5', 'J', '&', 
		'\x2', '\x21B', '\x219', '\x3', '\x2', '\x2', '\x2', '\x21B', '\x21C', 
		'\x3', '\x2', '\x2', '\x2', '\x21C', '\x21E', '\x3', '\x2', '\x2', '\x2', 
		'\x21D', '\x210', '\x3', '\x2', '\x2', '\x2', '\x21D', '\x211', '\x3', 
		'\x2', '\x2', '\x2', '\x21E', '\x43', '\x3', '\x2', '\x2', '\x2', '\x21F', 
		'\x224', '\x5', 'L', '\'', '\x2', '\x220', '\x221', '\a', '\xE', '\x2', 
		'\x2', '\x221', '\x223', '\x5', 'L', '\'', '\x2', '\x222', '\x220', '\x3', 
		'\x2', '\x2', '\x2', '\x223', '\x226', '\x3', '\x2', '\x2', '\x2', '\x224', 
		'\x222', '\x3', '\x2', '\x2', '\x2', '\x224', '\x225', '\x3', '\x2', '\x2', 
		'\x2', '\x225', '\x45', '\x3', '\x2', '\x2', '\x2', '\x226', '\x224', 
		'\x3', '\x2', '\x2', '\x2', '\x227', '\x22A', '\x5', 'L', '\'', '\x2', 
		'\x228', '\x22A', '\x5', 'H', '%', '\x2', '\x229', '\x227', '\x3', '\x2', 
		'\x2', '\x2', '\x229', '\x228', '\x3', '\x2', '\x2', '\x2', '\x22A', 'G', 
		'\x3', '\x2', '\x2', '\x2', '\x22B', '\x22D', '\x5', 'p', '\x39', '\x2', 
		'\x22C', '\x22B', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x22D', '\x3', 
		'\x2', '\x2', '\x2', '\x22D', '\x22F', '\x3', '\x2', '\x2', '\x2', '\x22E', 
		'\x230', '\x5', 'N', '(', '\x2', '\x22F', '\x22E', '\x3', '\x2', '\x2', 
		'\x2', '\x22F', '\x230', '\x3', '\x2', '\x2', '\x2', '\x230', '\x231', 
		'\x3', '\x2', '\x2', '\x2', '\x231', '\x23A', '\x5', 'P', ')', '\x2', 
		'\x232', '\x234', '\a', '\x10', '\x2', '\x2', '\x233', '\x235', '\x5', 
		'>', ' ', '\x2', '\x234', '\x233', '\x3', '\x2', '\x2', '\x2', '\x234', 
		'\x235', '\x3', '\x2', '\x2', '\x2', '\x235', '\x23B', '\x3', '\x2', '\x2', 
		'\x2', '\x236', '\x238', '\x5', '>', ' ', '\x2', '\x237', '\x236', '\x3', 
		'\x2', '\x2', '\x2', '\x237', '\x238', '\x3', '\x2', '\x2', '\x2', '\x238', 
		'\x239', '\x3', '\x2', '\x2', '\x2', '\x239', '\x23B', '\x5', '\x2', '\x2', 
		'\x2', '\x23A', '\x232', '\x3', '\x2', '\x2', '\x2', '\x23A', '\x237', 
		'\x3', '\x2', '\x2', '\x2', '\x23B', 'I', '\x3', '\x2', '\x2', '\x2', 
		'\x23C', '\x23D', '\a', '\x12', '\x2', '\x2', '\x23D', '\x23F', '\x5', 
		'\x100', '\x81', '\x2', '\x23E', '\x240', '\x5', '>', ' ', '\x2', '\x23F', 
		'\x23E', '\x3', '\x2', '\x2', '\x2', '\x23F', '\x240', '\x3', '\x2', '\x2', 
		'\x2', '\x240', 'K', '\x3', '\x2', '\x2', '\x2', '\x241', '\x243', '\x5', 
		'p', '\x39', '\x2', '\x242', '\x241', '\x3', '\x2', '\x2', '\x2', '\x242', 
		'\x243', '\x3', '\x2', '\x2', '\x2', '\x243', '\x245', '\x3', '\x2', '\x2', 
		'\x2', '\x244', '\x246', '\x5', 'N', '(', '\x2', '\x245', '\x244', '\x3', 
		'\x2', '\x2', '\x2', '\x245', '\x246', '\x3', '\x2', '\x2', '\x2', '\x246', 
		'\x247', '\x3', '\x2', '\x2', '\x2', '\x247', '\x249', '\x5', 'P', ')', 
		'\x2', '\x248', '\x24A', '\x5', '>', ' ', '\x2', '\x249', '\x248', '\x3', 
		'\x2', '\x2', '\x2', '\x249', '\x24A', '\x3', '\x2', '\x2', '\x2', '\x24A', 
		'M', '\x3', '\x2', '\x2', '\x2', '\x24B', '\x24C', '\t', '\x4', '\x2', 
		'\x2', '\x24C', 'O', '\x3', '\x2', '\x2', '\x2', '\x24D', '\x250', '\x5', 
		'\x114', '\x8B', '\x2', '\x24E', '\x250', '\x5', '\x4', '\x3', '\x2', 
		'\x24F', '\x24D', '\x3', '\x2', '\x2', '\x2', '\x24F', '\x24E', '\x3', 
		'\x2', '\x2', '\x2', '\x250', 'Q', '\x3', '\x2', '\x2', '\x2', '\x251', 
		'\x253', '\a', '\x46', '\x2', '\x2', '\x252', '\x254', '\x5', '\x6', '\x4', 
		'\x2', '\x253', '\x252', '\x3', '\x2', '\x2', '\x2', '\x253', '\x254', 
		'\x3', '\x2', '\x2', '\x2', '\x254', '\x255', '\x3', '\x2', '\x2', '\x2', 
		'\x255', '\x257', '\a', '\b', '\x2', '\x2', '\x256', '\x258', '\x5', '\x42', 
		'\"', '\x2', '\x257', '\x256', '\x3', '\x2', '\x2', '\x2', '\x257', '\x258', 
		'\x3', '\x2', '\x2', '\x2', '\x258', '\x259', '\x3', '\x2', '\x2', '\x2', 
		'\x259', '\x25B', '\a', '\t', '\x2', '\x2', '\x25A', '\x25C', '\x5', '>', 
		' ', '\x2', '\x25B', '\x25A', '\x3', '\x2', '\x2', '\x2', '\x25B', '\x25C', 
		'\x3', '\x2', '\x2', '\x2', '\x25C', 'S', '\x3', '\x2', '\x2', '\x2', 
		'\x25D', '\x25E', '\a', '\x6', '\x2', '\x2', '\x25E', '\x25F', '\a', '~', 
		'\x2', '\x2', '\x25F', '\x260', '\a', '\x11', '\x2', '\x2', '\x260', '\x261', 
		'\t', '\x5', '\x2', '\x2', '\x261', '\x262', '\a', '\a', '\x2', '\x2', 
		'\x262', '\x263', '\x5', '>', ' ', '\x2', '\x263', 'U', '\x3', '\x2', 
		'\x2', '\x2', '\x264', '\x266', '\x5', '\xF4', '{', '\x2', '\x265', '\x267', 
		'\a', '\x10', '\x2', '\x2', '\x266', '\x265', '\x3', '\x2', '\x2', '\x2', 
		'\x266', '\x267', '\x3', '\x2', '\x2', '\x2', '\x267', '\x268', '\x3', 
		'\x2', '\x2', '\x2', '\x268', '\x269', '\x5', '@', '!', '\x2', '\x269', 
		'W', '\x3', '\x2', '\x2', '\x2', '\x26A', '\x26B', '\a', 's', '\x2', '\x2', 
		'\x26B', '\x26D', '\a', '~', '\x2', '\x2', '\x26C', '\x26E', '\x5', '\x6', 
		'\x4', '\x2', '\x26D', '\x26C', '\x3', '\x2', '\x2', '\x2', '\x26D', '\x26E', 
		'\x3', '\x2', '\x2', '\x2', '\x26E', '\x26F', '\x3', '\x2', '\x2', '\x2', 
		'\x26F', '\x270', '\a', '\xF', '\x2', '\x2', '\x270', '\x271', '\x5', 
		'\x14', '\v', '\x2', '\x271', '\x272', '\a', '\r', '\x2', '\x2', '\x272', 
		'Y', '\x3', '\x2', '\x2', '\x2', '\x273', '\x275', '\x5', 'N', '(', '\x2', 
		'\x274', '\x273', '\x3', '\x2', '\x2', '\x2', '\x274', '\x275', '\x3', 
		'\x2', '\x2', '\x2', '\x275', '\x276', '\x3', '\x2', '\x2', '\x2', '\x276', 
		'\x277', '\a', 'v', '\x2', '\x2', '\x277', '\x279', '\a', '\b', '\x2', 
		'\x2', '\x278', '\x27A', '\x5', '\xDC', 'o', '\x2', '\x279', '\x278', 
		'\x3', '\x2', '\x2', '\x2', '\x279', '\x27A', '\x3', '\x2', '\x2', '\x2', 
		'\x27A', '\x27B', '\x3', '\x2', '\x2', '\x2', '\x27B', '\x281', '\a', 
		'\t', '\x2', '\x2', '\x27C', '\x27D', '\a', '\n', '\x2', '\x2', '\x27D', 
		'\x27E', '\x5', '\xE2', 'r', '\x2', '\x27E', '\x27F', '\a', '\f', '\x2', 
		'\x2', '\x27F', '\x282', '\x3', '\x2', '\x2', '\x2', '\x280', '\x282', 
		'\a', '\r', '\x2', '\x2', '\x281', '\x27C', '\x3', '\x2', '\x2', '\x2', 
		'\x281', '\x280', '\x3', '\x2', '\x2', '\x2', '\x281', '\x282', '\x3', 
		'\x2', '\x2', '\x2', '\x282', '[', '\x3', '\x2', '\x2', '\x2', '\x283', 
		'\x285', '\a', '\x63', '\x2', '\x2', '\x284', '\x283', '\x3', '\x2', '\x2', 
		'\x2', '\x284', '\x285', '\x3', '\x2', '\x2', '\x2', '\x285', '\x287', 
		'\x3', '\x2', '\x2', '\x2', '\x286', '\x288', '\a', 'z', '\x2', '\x2', 
		'\x287', '\x286', '\x3', '\x2', '\x2', '\x2', '\x287', '\x288', '\x3', 
		'\x2', '\x2', '\x2', '\x288', '\x289', '\x3', '\x2', '\x2', '\x2', '\x289', 
		'\x28A', '\a', 'i', '\x2', '\x2', '\x28A', '\x28C', '\a', '~', '\x2', 
		'\x2', '\x28B', '\x28D', '\x5', '\x6', '\x4', '\x2', '\x28C', '\x28B', 
		'\x3', '\x2', '\x2', '\x2', '\x28C', '\x28D', '\x3', '\x2', '\x2', '\x2', 
		'\x28D', '\x28F', '\x3', '\x2', '\x2', '\x2', '\x28E', '\x290', '\x5', 
		'^', '\x30', '\x2', '\x28F', '\x28E', '\x3', '\x2', '\x2', '\x2', '\x28F', 
		'\x290', '\x3', '\x2', '\x2', '\x2', '\x290', '\x291', '\x3', '\x2', '\x2', 
		'\x2', '\x291', '\x293', '\x5', '&', '\x14', '\x2', '\x292', '\x294', 
		'\a', '\r', '\x2', '\x2', '\x293', '\x292', '\x3', '\x2', '\x2', '\x2', 
		'\x293', '\x294', '\x3', '\x2', '\x2', '\x2', '\x294', ']', '\x3', '\x2', 
		'\x2', '\x2', '\x295', '\x296', '\a', '`', '\x2', '\x2', '\x296', '\x297', 
		'\x5', '`', '\x31', '\x2', '\x297', '_', '\x3', '\x2', '\x2', '\x2', '\x298', 
		'\x29D', '\x5', '\x1C', '\xF', '\x2', '\x299', '\x29A', '\a', '\xE', '\x2', 
		'\x2', '\x29A', '\x29C', '\x5', '\x1C', '\xF', '\x2', '\x29B', '\x299', 
		'\x3', '\x2', '\x2', '\x2', '\x29C', '\x29F', '\x3', '\x2', '\x2', '\x2', 
		'\x29D', '\x29B', '\x3', '\x2', '\x2', '\x2', '\x29D', '\x29E', '\x3', 
		'\x2', '\x2', '\x2', '\x29E', '\x61', '\x3', '\x2', '\x2', '\x2', '\x29F', 
		'\x29D', '\x3', '\x2', '\x2', '\x2', '\x2A0', '\x2A2', '\a', '\x62', '\x2', 
		'\x2', '\x2A1', '\x2A0', '\x3', '\x2', '\x2', '\x2', '\x2A1', '\x2A2', 
		'\x3', '\x2', '\x2', '\x2', '\x2A2', '\x2A3', '\x3', '\x2', '\x2', '\x2', 
		'\x2A3', '\x2A4', '\a', '_', '\x2', '\x2', '\x2A4', '\x2A5', '\a', '~', 
		'\x2', '\x2', '\x2A5', '\x2A7', '\a', '\n', '\x2', '\x2', '\x2A6', '\x2A8', 
		'\x5', '\x64', '\x33', '\x2', '\x2A7', '\x2A6', '\x3', '\x2', '\x2', '\x2', 
		'\x2A7', '\x2A8', '\x3', '\x2', '\x2', '\x2', '\x2A8', '\x2A9', '\x3', 
		'\x2', '\x2', '\x2', '\x2A9', '\x2AA', '\a', '\f', '\x2', '\x2', '\x2AA', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x2AB', '\x2AD', '\x5', '\x66', '\x34', 
		'\x2', '\x2AC', '\x2AE', '\a', '\xE', '\x2', '\x2', '\x2AD', '\x2AC', 
		'\x3', '\x2', '\x2', '\x2', '\x2AD', '\x2AE', '\x3', '\x2', '\x2', '\x2', 
		'\x2AE', '\x65', '\x3', '\x2', '\x2', '\x2', '\x2AF', '\x2B4', '\x5', 
		'h', '\x35', '\x2', '\x2B0', '\x2B1', '\a', '\xE', '\x2', '\x2', '\x2B1', 
		'\x2B3', '\x5', 'h', '\x35', '\x2', '\x2B2', '\x2B0', '\x3', '\x2', '\x2', 
		'\x2', '\x2B3', '\x2B6', '\x3', '\x2', '\x2', '\x2', '\x2B4', '\x2B2', 
		'\x3', '\x2', '\x2', '\x2', '\x2B4', '\x2B5', '\x3', '\x2', '\x2', '\x2', 
		'\x2B5', 'g', '\x3', '\x2', '\x2', '\x2', '\x2B6', '\x2B4', '\x3', '\x2', 
		'\x2', '\x2', '\x2B7', '\x2BA', '\x5', '\xF4', '{', '\x2', '\x2B8', '\x2B9', 
		'\a', '\xF', '\x2', '\x2', '\x2B9', '\x2BB', '\x5', '\x100', '\x81', '\x2', 
		'\x2BA', '\x2B8', '\x3', '\x2', '\x2', '\x2', '\x2BA', '\x2BB', '\x3', 
		'\x2', '\x2', '\x2', '\x2BB', 'i', '\x3', '\x2', '\x2', '\x2', '\x2BC', 
		'\x2BD', '\a', 'w', '\x2', '\x2', '\x2BD', '\x2BE', '\x5', 'l', '\x37', 
		'\x2', '\x2BE', '\x2C0', '\a', '\n', '\x2', '\x2', '\x2BF', '\x2C1', '\x5', 
		'\x80', '\x41', '\x2', '\x2C0', '\x2BF', '\x3', '\x2', '\x2', '\x2', '\x2C0', 
		'\x2C1', '\x3', '\x2', '\x2', '\x2', '\x2C1', '\x2C2', '\x3', '\x2', '\x2', 
		'\x2', '\x2C2', '\x2C3', '\a', '\f', '\x2', '\x2', '\x2C3', 'k', '\x3', 
		'\x2', '\x2', '\x2', '\x2C4', '\x2CD', '\a', '~', '\x2', '\x2', '\x2C5', 
		'\x2C7', '\a', '\x13', '\x2', '\x2', '\x2C6', '\x2C5', '\x3', '\x2', '\x2', 
		'\x2', '\x2C7', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x2C8', '\x2C6', 
		'\x3', '\x2', '\x2', '\x2', '\x2C8', '\x2C9', '\x3', '\x2', '\x2', '\x2', 
		'\x2C9', '\x2CA', '\x3', '\x2', '\x2', '\x2', '\x2CA', '\x2CC', '\a', 
		'~', '\x2', '\x2', '\x2CB', '\x2C6', '\x3', '\x2', '\x2', '\x2', '\x2CC', 
		'\x2CF', '\x3', '\x2', '\x2', '\x2', '\x2CD', '\x2CB', '\x3', '\x2', '\x2', 
		'\x2', '\x2CD', '\x2CE', '\x3', '\x2', '\x2', '\x2', '\x2CE', 'm', '\x3', 
		'\x2', '\x2', '\x2', '\x2CF', '\x2CD', '\x3', '\x2', '\x2', '\x2', '\x2D0', 
		'\x2D1', '\a', '~', '\x2', '\x2', '\x2D1', '\x2D2', '\a', '\xF', '\x2', 
		'\x2', '\x2D2', '\x2D3', '\x5', 'l', '\x37', '\x2', '\x2D3', '\x2D4', 
		'\a', '\r', '\x2', '\x2', '\x2D4', 'o', '\x3', '\x2', '\x2', '\x2', '\x2D5', 
		'\x2D7', '\x5', 'r', ':', '\x2', '\x2D6', '\x2D5', '\x3', '\x2', '\x2', 
		'\x2', '\x2D7', '\x2D8', '\x3', '\x2', '\x2', '\x2', '\x2D8', '\x2D6', 
		'\x3', '\x2', '\x2', '\x2', '\x2D8', '\x2D9', '\x3', '\x2', '\x2', '\x2', 
		'\x2D9', 'q', '\x3', '\x2', '\x2', '\x2', '\x2DA', '\x2DD', '\a', '}', 
		'\x2', '\x2', '\x2DB', '\x2DE', '\x5', 't', ';', '\x2', '\x2DC', '\x2DE', 
		'\x5', 'v', '<', '\x2', '\x2DD', '\x2DB', '\x3', '\x2', '\x2', '\x2', 
		'\x2DD', '\x2DC', '\x3', '\x2', '\x2', '\x2', '\x2DE', 's', '\x3', '\x2', 
		'\x2', '\x2', '\x2DF', '\x2E0', '\b', ';', '\x1', '\x2', '\x2E0', '\x2E6', 
		'\a', '~', '\x2', '\x2', '\x2E1', '\x2E2', '\a', '\b', '\x2', '\x2', '\x2E2', 
		'\x2E3', '\x5', '\x100', '\x81', '\x2', '\x2E3', '\x2E4', '\a', '\t', 
		'\x2', '\x2', '\x2E4', '\x2E6', '\x3', '\x2', '\x2', '\x2', '\x2E5', '\x2DF', 
		'\x3', '\x2', '\x2', '\x2', '\x2E5', '\x2E1', '\x3', '\x2', '\x2', '\x2', 
		'\x2E6', '\x2EC', '\x3', '\x2', '\x2', '\x2', '\x2E7', '\x2E8', '\f', 
		'\x4', '\x2', '\x2', '\x2E8', '\x2E9', '\a', '\x13', '\x2', '\x2', '\x2E9', 
		'\x2EB', '\x5', '\x114', '\x8B', '\x2', '\x2EA', '\x2E7', '\x3', '\x2', 
		'\x2', '\x2', '\x2EB', '\x2EE', '\x3', '\x2', '\x2', '\x2', '\x2EC', '\x2EA', 
		'\x3', '\x2', '\x2', '\x2', '\x2EC', '\x2ED', '\x3', '\x2', '\x2', '\x2', 
		'\x2ED', 'u', '\x3', '\x2', '\x2', '\x2', '\x2EE', '\x2EC', '\x3', '\x2', 
		'\x2', '\x2', '\x2EF', '\x2F0', '\x5', 't', ';', '\x2', '\x2F0', '\x2F1', 
		'\x5', '\xF6', '|', '\x2', '\x2F1', 'w', '\x3', '\x2', '\x2', '\x2', '\x2F2', 
		'\x2F4', '\x5', '\xE4', 's', '\x2', '\x2F3', '\x2F2', '\x3', '\x2', '\x2', 
		'\x2', '\x2F3', '\x2F4', '\x3', '\x2', '\x2', '\x2', '\x2F4', '\x2F5', 
		'\x3', '\x2', '\x2', '\x2', '\x2F5', '\x2F6', '\a', '\x2', '\x2', '\x3', 
		'\x2F6', 'y', '\x3', '\x2', '\x2', '\x2', '\x2F7', '\x2F9', '\a', '\x63', 
		'\x2', '\x2', '\x2F8', '\x2F7', '\x3', '\x2', '\x2', '\x2', '\x2F8', '\x2F9', 
		'\x3', '\x2', '\x2', '\x2', '\x2F9', '\x2FA', '\x3', '\x2', '\x2', '\x2', 
		'\x2FA', '\x2FB', '\x5', '|', '?', '\x2', '\x2FB', '{', '\x3', '\x2', 
		'\x2', '\x2', '\x2FC', '\x31B', '\x5', '~', '@', '\x2', '\x2FD', '\x31B', 
		'\x5', '\x84', '\x43', '\x2', '\x2FE', '\x31B', '\x5', '\x8A', '\x46', 
		'\x2', '\x2FF', '\x31B', '\x5', '\x92', 'J', '\x2', '\x300', '\x31B', 
		'\x5', '\x82', '\x42', '\x2', '\x301', '\x31B', '\x5', 'p', '\x39', '\x2', 
		'\x302', '\x31B', '\x5', '\xBE', '`', '\x2', '\x303', '\x31B', '\x5', 
		'\\', '/', '\x2', '\x304', '\x31B', '\x5', 'j', '\x36', '\x2', '\x305', 
		'\x31B', '\x5', '\x96', 'L', '\x2', '\x306', '\x31B', '\x5', '\x98', 'M', 
		'\x2', '\x307', '\x31B', '\x5', '\x9C', 'O', '\x2', '\x308', '\x31B', 
		'\x5', '\x9E', 'P', '\x2', '\x309', '\x31B', '\x5', '\xA0', 'Q', '\x2', 
		'\x30A', '\x31B', '\x5', '\xA2', 'R', '\x2', '\x30B', '\x31B', '\x5', 
		'\xA4', 'S', '\x2', '\x30C', '\x31B', '\x5', '\xB0', 'Y', '\x2', '\x30D', 
		'\x31B', '\x5', '\xA6', 'T', '\x2', '\x30E', '\x31B', '\x5', '\xB2', 'Z', 
		'\x2', '\x30F', '\x31B', '\x5', '\xB4', '[', '\x2', '\x310', '\x31B', 
		'\x5', '\xBA', '^', '\x2', '\x311', '\x31B', '\x5', '\xBC', '_', '\x2', 
		'\x312', '\x31B', '\x5', '\x104', '\x83', '\x2', '\x313', '\x31B', '\x5', 
		'\xD2', 'j', '\x2', '\x314', '\x31B', '\x5', '\x8C', 'G', '\x2', '\x315', 
		'\x31B', '\x5', 'X', '-', '\x2', '\x316', '\x31B', '\x5', '\x62', '\x32', 
		'\x2', '\x317', '\x31B', '\x5', '\x94', 'K', '\x2', '\x318', '\x319', 
		'\a', '\x63', '\x2', '\x2', '\x319', '\x31B', '\x5', '|', '?', '\x2', 
		'\x31A', '\x2FC', '\x3', '\x2', '\x2', '\x2', '\x31A', '\x2FD', '\x3', 
		'\x2', '\x2', '\x2', '\x31A', '\x2FE', '\x3', '\x2', '\x2', '\x2', '\x31A', 
		'\x2FF', '\x3', '\x2', '\x2', '\x2', '\x31A', '\x300', '\x3', '\x2', '\x2', 
		'\x2', '\x31A', '\x301', '\x3', '\x2', '\x2', '\x2', '\x31A', '\x302', 
		'\x3', '\x2', '\x2', '\x2', '\x31A', '\x303', '\x3', '\x2', '\x2', '\x2', 
		'\x31A', '\x304', '\x3', '\x2', '\x2', '\x2', '\x31A', '\x305', '\x3', 
		'\x2', '\x2', '\x2', '\x31A', '\x306', '\x3', '\x2', '\x2', '\x2', '\x31A', 
		'\x307', '\x3', '\x2', '\x2', '\x2', '\x31A', '\x308', '\x3', '\x2', '\x2', 
		'\x2', '\x31A', '\x309', '\x3', '\x2', '\x2', '\x2', '\x31A', '\x30A', 
		'\x3', '\x2', '\x2', '\x2', '\x31A', '\x30B', '\x3', '\x2', '\x2', '\x2', 
		'\x31A', '\x30C', '\x3', '\x2', '\x2', '\x2', '\x31A', '\x30D', '\x3', 
		'\x2', '\x2', '\x2', '\x31A', '\x30E', '\x3', '\x2', '\x2', '\x2', '\x31A', 
		'\x30F', '\x3', '\x2', '\x2', '\x2', '\x31A', '\x310', '\x3', '\x2', '\x2', 
		'\x2', '\x31A', '\x311', '\x3', '\x2', '\x2', '\x2', '\x31A', '\x312', 
		'\x3', '\x2', '\x2', '\x2', '\x31A', '\x313', '\x3', '\x2', '\x2', '\x2', 
		'\x31A', '\x314', '\x3', '\x2', '\x2', '\x2', '\x31A', '\x315', '\x3', 
		'\x2', '\x2', '\x2', '\x31A', '\x316', '\x3', '\x2', '\x2', '\x2', '\x31A', 
		'\x317', '\x3', '\x2', '\x2', '\x2', '\x31A', '\x318', '\x3', '\x2', '\x2', 
		'\x2', '\x31B', '}', '\x3', '\x2', '\x2', '\x2', '\x31C', '\x31E', '\a', 
		'\n', '\x2', '\x2', '\x31D', '\x31F', '\x5', '\x80', '\x41', '\x2', '\x31E', 
		'\x31D', '\x3', '\x2', '\x2', '\x2', '\x31E', '\x31F', '\x3', '\x2', '\x2', 
		'\x2', '\x31F', '\x320', '\x3', '\x2', '\x2', '\x2', '\x320', '\x321', 
		'\a', '\f', '\x2', '\x2', '\x321', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'\x322', '\x324', '\x5', '|', '?', '\x2', '\x323', '\x322', '\x3', '\x2', 
		'\x2', '\x2', '\x324', '\x325', '\x3', '\x2', '\x2', '\x2', '\x325', '\x323', 
		'\x3', '\x2', '\x2', '\x2', '\x325', '\x326', '\x3', '\x2', '\x2', '\x2', 
		'\x326', '\x81', '\x3', '\x2', '\x2', '\x2', '\x327', '\x32B', '\a', '{', 
		'\x2', '\x2', '\x328', '\x329', '\a', '~', '\x2', '\x2', '\x329', '\x32C', 
		'\x5', '@', '!', '\x2', '\x32A', '\x32C', '\x5', '\x8C', 'G', '\x2', '\x32B', 
		'\x328', '\x3', '\x2', '\x2', '\x2', '\x32B', '\x32A', '\x3', '\x2', '\x2', 
		'\x2', '\x32C', '\x32D', '\x3', '\x2', '\x2', '\x2', '\x32D', '\x32E', 
		'\x5', '\x120', '\x91', '\x2', '\x32E', '\x83', '\x3', '\x2', '\x2', '\x2', 
		'\x32F', '\x332', '\a', '\x64', '\x2', '\x2', '\x330', '\x333', '\x5', 
		'\x86', '\x44', '\x2', '\x331', '\x333', '\x5', 'n', '\x38', '\x2', '\x332', 
		'\x330', '\x3', '\x2', '\x2', '\x2', '\x332', '\x331', '\x3', '\x2', '\x2', 
		'\x2', '\x333', '\x85', '\x3', '\x2', '\x2', '\x2', '\x334', '\x337', 
		'\a', '\x1A', '\x2', '\x2', '\x335', '\x337', '\x5', '\x88', '\x45', '\x2', 
		'\x336', '\x334', '\x3', '\x2', '\x2', '\x2', '\x336', '\x335', '\x3', 
		'\x2', '\x2', '\x2', '\x337', '\x33A', '\x3', '\x2', '\x2', '\x2', '\x338', 
		'\x339', '\a', 'Z', '\x2', '\x2', '\x339', '\x33B', '\x5', '\x114', '\x8B', 
		'\x2', '\x33A', '\x338', '\x3', '\x2', '\x2', '\x2', '\x33A', '\x33B', 
		'\x3', '\x2', '\x2', '\x2', '\x33B', '\x33C', '\x3', '\x2', '\x2', '\x2', 
		'\x33C', '\x33D', '\a', '[', '\x2', '\x2', '\x33D', '\x33E', '\a', '\x7F', 
		'\x2', '\x2', '\x33E', '\x33F', '\x5', '\x120', '\x91', '\x2', '\x33F', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x340', '\x341', '\x5', '\x114', 
		'\x8B', '\x2', '\x341', '\x342', '\a', '\xE', '\x2', '\x2', '\x342', '\x344', 
		'\x3', '\x2', '\x2', '\x2', '\x343', '\x340', '\x3', '\x2', '\x2', '\x2', 
		'\x343', '\x344', '\x3', '\x2', '\x2', '\x2', '\x344', '\x345', '\x3', 
		'\x2', '\x2', '\x2', '\x345', '\x346', '\a', '\n', '\x2', '\x2', '\x346', 
		'\x34B', '\x5', '\x114', '\x8B', '\x2', '\x347', '\x348', '\a', '\xE', 
		'\x2', '\x2', '\x348', '\x34A', '\x5', '\x114', '\x8B', '\x2', '\x349', 
		'\x347', '\x3', '\x2', '\x2', '\x2', '\x34A', '\x34D', '\x3', '\x2', '\x2', 
		'\x2', '\x34B', '\x349', '\x3', '\x2', '\x2', '\x2', '\x34B', '\x34C', 
		'\x3', '\x2', '\x2', '\x2', '\x34C', '\x34E', '\x3', '\x2', '\x2', '\x2', 
		'\x34D', '\x34B', '\x3', '\x2', '\x2', '\x2', '\x34E', '\x34F', '\a', 
		'\f', '\x2', '\x2', '\x34F', '\x89', '\x3', '\x2', '\x2', '\x2', '\x350', 
		'\x352', '\a', '\x63', '\x2', '\x2', '\x351', '\x353', '\a', 'T', '\x2', 
		'\x2', '\x352', '\x351', '\x3', '\x2', '\x2', '\x2', '\x352', '\x353', 
		'\x3', '\x2', '\x2', '\x2', '\x353', '\x356', '\x3', '\x2', '\x2', '\x2', 
		'\x354', '\x357', '\x5', '\x86', '\x44', '\x2', '\x355', '\x357', '\x5', 
		'|', '?', '\x2', '\x356', '\x354', '\x3', '\x2', '\x2', '\x2', '\x356', 
		'\x355', '\x3', '\x2', '\x2', '\x2', '\x357', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x358', '\x35A', '\x5', '\x4', '\x3', '\x2', '\x359', '\x35B', 
		'\x5', '>', ' ', '\x2', '\x35A', '\x359', '\x3', '\x2', '\x2', '\x2', 
		'\x35A', '\x35B', '\x3', '\x2', '\x2', '\x2', '\x35B', '\x35C', '\x3', 
		'\x2', '\x2', '\x2', '\x35C', '\x35E', '\x5', '\x2', '\x2', '\x2', '\x35D', 
		'\x35F', '\a', '\r', '\x2', '\x2', '\x35E', '\x35D', '\x3', '\x2', '\x2', 
		'\x2', '\x35E', '\x35F', '\x3', '\x2', '\x2', '\x2', '\x35F', '\x376', 
		'\x3', '\x2', '\x2', '\x2', '\x360', '\x362', '\x5', 'N', '(', '\x2', 
		'\x361', '\x360', '\x3', '\x2', '\x2', '\x2', '\x361', '\x362', '\x3', 
		'\x2', '\x2', '\x2', '\x362', '\x364', '\x3', '\x2', '\x2', '\x2', '\x363', 
		'\x365', '\x5', '\x9A', 'N', '\x2', '\x364', '\x363', '\x3', '\x2', '\x2', 
		'\x2', '\x364', '\x365', '\x3', '\x2', '\x2', '\x2', '\x365', '\x367', 
		'\x3', '\x2', '\x2', '\x2', '\x366', '\x368', '\a', '\\', '\x2', '\x2', 
		'\x367', '\x366', '\x3', '\x2', '\x2', '\x2', '\x367', '\x368', '\x3', 
		'\x2', '\x2', '\x2', '\x368', '\x369', '\x3', '\x2', '\x2', '\x2', '\x369', 
		'\x36B', '\x5', '\x8E', 'H', '\x2', '\x36A', '\x36C', '\a', '\r', '\x2', 
		'\x2', '\x36B', '\x36A', '\x3', '\x2', '\x2', '\x2', '\x36B', '\x36C', 
		'\x3', '\x2', '\x2', '\x2', '\x36C', '\x376', '\x3', '\x2', '\x2', '\x2', 
		'\x36D', '\x36F', '\a', 'z', '\x2', '\x2', '\x36E', '\x370', '\x5', '\x9A', 
		'N', '\x2', '\x36F', '\x36E', '\x3', '\x2', '\x2', '\x2', '\x36F', '\x370', 
		'\x3', '\x2', '\x2', '\x2', '\x370', '\x371', '\x3', '\x2', '\x2', '\x2', 
		'\x371', '\x373', '\x5', '\x8E', 'H', '\x2', '\x372', '\x374', '\a', '\r', 
		'\x2', '\x2', '\x373', '\x372', '\x3', '\x2', '\x2', '\x2', '\x373', '\x374', 
		'\x3', '\x2', '\x2', '\x2', '\x374', '\x376', '\x3', '\x2', '\x2', '\x2', 
		'\x375', '\x358', '\x3', '\x2', '\x2', '\x2', '\x375', '\x361', '\x3', 
		'\x2', '\x2', '\x2', '\x375', '\x36D', '\x3', '\x2', '\x2', '\x2', '\x376', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x377', '\x37C', '\x5', '\x90', 'I', 
		'\x2', '\x378', '\x379', '\a', '\xE', '\x2', '\x2', '\x379', '\x37B', 
		'\x5', '\x90', 'I', '\x2', '\x37A', '\x378', '\x3', '\x2', '\x2', '\x2', 
		'\x37B', '\x37E', '\x3', '\x2', '\x2', '\x2', '\x37C', '\x37A', '\x3', 
		'\x2', '\x2', '\x2', '\x37C', '\x37D', '\x3', '\x2', '\x2', '\x2', '\x37D', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x37E', '\x37C', '\x3', '\x2', '\x2', 
		'\x2', '\x37F', '\x383', '\x5', '\x116', '\x8C', '\x2', '\x380', '\x383', 
		'\x5', '\xE6', 't', '\x2', '\x381', '\x383', '\x5', '\xEC', 'w', '\x2', 
		'\x382', '\x37F', '\x3', '\x2', '\x2', '\x2', '\x382', '\x380', '\x3', 
		'\x2', '\x2', '\x2', '\x382', '\x381', '\x3', '\x2', '\x2', '\x2', '\x383', 
		'\x385', '\x3', '\x2', '\x2', '\x2', '\x384', '\x386', '\x5', '>', ' ', 
		'\x2', '\x385', '\x384', '\x3', '\x2', '\x2', '\x2', '\x385', '\x386', 
		'\x3', '\x2', '\x2', '\x2', '\x386', '\x388', '\x3', '\x2', '\x2', '\x2', 
		'\x387', '\x389', '\x5', '\x100', '\x81', '\x2', '\x388', '\x387', '\x3', 
		'\x2', '\x2', '\x2', '\x388', '\x389', '\x3', '\x2', '\x2', '\x2', '\x389', 
		'\x38F', '\x3', '\x2', '\x2', '\x2', '\x38A', '\x38C', '\a', '\xF', '\x2', 
		'\x2', '\x38B', '\x38D', '\x5', '\x6', '\x4', '\x2', '\x38C', '\x38B', 
		'\x3', '\x2', '\x2', '\x2', '\x38C', '\x38D', '\x3', '\x2', '\x2', '\x2', 
		'\x38D', '\x38E', '\x3', '\x2', '\x2', '\x2', '\x38E', '\x390', '\x5', 
		'\x100', '\x81', '\x2', '\x38F', '\x38A', '\x3', '\x2', '\x2', '\x2', 
		'\x38F', '\x390', '\x3', '\x2', '\x2', '\x2', '\x390', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '\x391', '\x392', '\a', '\r', '\x2', '\x2', '\x392', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\x393', '\x394', '\x6', 'K', '\b', 
		'\x2', '\x394', '\x396', '\x5', '\xFC', '\x7F', '\x2', '\x395', '\x397', 
		'\a', '\r', '\x2', '\x2', '\x396', '\x395', '\x3', '\x2', '\x2', '\x2', 
		'\x396', '\x397', '\x3', '\x2', '\x2', '\x2', '\x397', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x398', '\x399', '\a', 'U', '\x2', '\x2', '\x399', 
		'\x39A', '\a', '\b', '\x2', '\x2', '\x39A', '\x39B', '\x5', '\xFC', '\x7F', 
		'\x2', '\x39B', '\x39C', '\a', '\t', '\x2', '\x2', '\x39C', '\x39F', '\x5', 
		'|', '?', '\x2', '\x39D', '\x39E', '\a', '\x45', '\x2', '\x2', '\x39E', 
		'\x3A0', '\x5', '|', '?', '\x2', '\x39F', '\x39D', '\x3', '\x2', '\x2', 
		'\x2', '\x39F', '\x3A0', '\x3', '\x2', '\x2', '\x2', '\x3A0', '\x97', 
		'\x3', '\x2', '\x2', '\x2', '\x3A1', '\x3A2', '\a', '\x41', '\x2', '\x2', 
		'\x3A2', '\x3A3', '\x5', '|', '?', '\x2', '\x3A3', '\x3A4', '\a', 'O', 
		'\x2', '\x2', '\x3A4', '\x3A5', '\a', '\b', '\x2', '\x2', '\x3A5', '\x3A6', 
		'\x5', '\xFC', '\x7F', '\x2', '\x3A6', '\x3A7', '\a', '\t', '\x2', '\x2', 
		'\x3A7', '\x3A8', '\x5', '\x120', '\x91', '\x2', '\x3A8', '\x3E7', '\x3', 
		'\x2', '\x2', '\x2', '\x3A9', '\x3AA', '\a', 'O', '\x2', '\x2', '\x3AA', 
		'\x3AB', '\a', '\b', '\x2', '\x2', '\x3AB', '\x3AC', '\x5', '\xFC', '\x7F', 
		'\x2', '\x3AC', '\x3AD', '\a', '\t', '\x2', '\x2', '\x3AD', '\x3AE', '\x5', 
		'|', '?', '\x2', '\x3AE', '\x3E7', '\x3', '\x2', '\x2', '\x2', '\x3AF', 
		'\x3B0', '\a', 'M', '\x2', '\x2', '\x3B0', '\x3B2', '\a', '\b', '\x2', 
		'\x2', '\x3B1', '\x3B3', '\x5', '\xFC', '\x7F', '\x2', '\x3B2', '\x3B1', 
		'\x3', '\x2', '\x2', '\x2', '\x3B2', '\x3B3', '\x3', '\x2', '\x2', '\x2', 
		'\x3B3', '\x3B4', '\x3', '\x2', '\x2', '\x2', '\x3B4', '\x3B6', '\a', 
		'\r', '\x2', '\x2', '\x3B5', '\x3B7', '\x5', '\xFC', '\x7F', '\x2', '\x3B6', 
		'\x3B5', '\x3', '\x2', '\x2', '\x2', '\x3B6', '\x3B7', '\x3', '\x2', '\x2', 
		'\x2', '\x3B7', '\x3B8', '\x3', '\x2', '\x2', '\x2', '\x3B8', '\x3BA', 
		'\a', '\r', '\x2', '\x2', '\x3B9', '\x3BB', '\x5', '\xFC', '\x7F', '\x2', 
		'\x3BA', '\x3B9', '\x3', '\x2', '\x2', '\x2', '\x3BA', '\x3BB', '\x3', 
		'\x2', '\x2', '\x2', '\x3BB', '\x3BC', '\x3', '\x2', '\x2', '\x2', '\x3BC', 
		'\x3BD', '\a', '\t', '\x2', '\x2', '\x3BD', '\x3E7', '\x5', '|', '?', 
		'\x2', '\x3BE', '\x3BF', '\a', 'M', '\x2', '\x2', '\x3BF', '\x3C0', '\a', 
		'\b', '\x2', '\x2', '\x3C0', '\x3C1', '\x5', '\x9A', 'N', '\x2', '\x3C1', 
		'\x3C2', '\x5', '\x8E', 'H', '\x2', '\x3C2', '\x3C4', '\a', '\r', '\x2', 
		'\x2', '\x3C3', '\x3C5', '\x5', '\xFC', '\x7F', '\x2', '\x3C4', '\x3C3', 
		'\x3', '\x2', '\x2', '\x2', '\x3C4', '\x3C5', '\x3', '\x2', '\x2', '\x2', 
		'\x3C5', '\x3C6', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x3C8', '\a', 
		'\r', '\x2', '\x2', '\x3C7', '\x3C9', '\x5', '\xFC', '\x7F', '\x2', '\x3C8', 
		'\x3C7', '\x3', '\x2', '\x2', '\x2', '\x3C8', '\x3C9', '\x3', '\x2', '\x2', 
		'\x2', '\x3C9', '\x3CA', '\x3', '\x2', '\x2', '\x2', '\x3CA', '\x3CB', 
		'\a', '\t', '\x2', '\x2', '\x3CB', '\x3CC', '\x5', '|', '?', '\x2', '\x3CC', 
		'\x3E7', '\x3', '\x2', '\x2', '\x2', '\x3CD', '\x3CE', '\a', 'M', '\x2', 
		'\x2', '\x3CE', '\x3CF', '\a', '\b', '\x2', '\x2', '\x3CF', '\x3D3', '\x5', 
		'\x100', '\x81', '\x2', '\x3D0', '\x3D4', '\a', 'X', '\x2', '\x2', '\x3D1', 
		'\x3D2', '\a', '~', '\x2', '\x2', '\x3D2', '\x3D4', '\x6', 'M', '\t', 
		'\x2', '\x3D3', '\x3D0', '\x3', '\x2', '\x2', '\x2', '\x3D3', '\x3D1', 
		'\x3', '\x2', '\x2', '\x2', '\x3D4', '\x3D5', '\x3', '\x2', '\x2', '\x2', 
		'\x3D5', '\x3D6', '\x5', '\xFC', '\x7F', '\x2', '\x3D6', '\x3D7', '\a', 
		'\t', '\x2', '\x2', '\x3D7', '\x3D8', '\x5', '|', '?', '\x2', '\x3D8', 
		'\x3E7', '\x3', '\x2', '\x2', '\x2', '\x3D9', '\x3DA', '\a', 'M', '\x2', 
		'\x2', '\x3DA', '\x3DB', '\a', '\b', '\x2', '\x2', '\x3DB', '\x3DC', '\x5', 
		'\x9A', 'N', '\x2', '\x3DC', '\x3E0', '\x5', '\x90', 'I', '\x2', '\x3DD', 
		'\x3E1', '\a', 'X', '\x2', '\x2', '\x3DE', '\x3DF', '\a', '~', '\x2', 
		'\x2', '\x3DF', '\x3E1', '\x6', 'M', '\n', '\x2', '\x3E0', '\x3DD', '\x3', 
		'\x2', '\x2', '\x2', '\x3E0', '\x3DE', '\x3', '\x2', '\x2', '\x2', '\x3E1', 
		'\x3E2', '\x3', '\x2', '\x2', '\x2', '\x3E2', '\x3E3', '\x5', '\xFC', 
		'\x7F', '\x2', '\x3E3', '\x3E4', '\a', '\t', '\x2', '\x2', '\x3E4', '\x3E5', 
		'\x5', '|', '?', '\x2', '\x3E5', '\x3E7', '\x3', '\x2', '\x2', '\x2', 
		'\x3E6', '\x3A1', '\x3', '\x2', '\x2', '\x2', '\x3E6', '\x3A9', '\x3', 
		'\x2', '\x2', '\x2', '\x3E6', '\x3AF', '\x3', '\x2', '\x2', '\x2', '\x3E6', 
		'\x3BE', '\x3', '\x2', '\x2', '\x2', '\x3E6', '\x3CD', '\x3', '\x2', '\x2', 
		'\x2', '\x3E6', '\x3D9', '\x3', '\x2', '\x2', '\x2', '\x3E7', '\x99', 
		'\x3', '\x2', '\x2', '\x2', '\x3E8', '\x3E9', '\t', '\x6', '\x2', '\x2', 
		'\x3E9', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x3EA', '\x3ED', '\a', 'L', 
		'\x2', '\x2', '\x3EB', '\x3EC', '\x6', 'O', '\v', '\x2', '\x3EC', '\x3EE', 
		'\a', '~', '\x2', '\x2', '\x3ED', '\x3EB', '\x3', '\x2', '\x2', '\x2', 
		'\x3ED', '\x3EE', '\x3', '\x2', '\x2', '\x2', '\x3EE', '\x3EF', '\x3', 
		'\x2', '\x2', '\x2', '\x3EF', '\x3F0', '\x5', '\x120', '\x91', '\x2', 
		'\x3F0', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x3F1', '\x3F4', '\a', '@', 
		'\x2', '\x2', '\x3F2', '\x3F3', '\x6', 'P', '\f', '\x2', '\x3F3', '\x3F5', 
		'\a', '~', '\x2', '\x2', '\x3F4', '\x3F2', '\x3', '\x2', '\x2', '\x2', 
		'\x3F4', '\x3F5', '\x3', '\x2', '\x2', '\x2', '\x3F5', '\x3F6', '\x3', 
		'\x2', '\x2', '\x2', '\x3F6', '\x3F7', '\x5', '\x120', '\x91', '\x2', 
		'\x3F7', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x3F8', '\x3FB', '\a', 'J', 
		'\x2', '\x2', '\x3F9', '\x3FA', '\x6', 'Q', '\r', '\x2', '\x3FA', '\x3FC', 
		'\x5', '\xFC', '\x7F', '\x2', '\x3FB', '\x3F9', '\x3', '\x2', '\x2', '\x2', 
		'\x3FB', '\x3FC', '\x3', '\x2', '\x2', '\x2', '\x3FC', '\x3FD', '\x3', 
		'\x2', '\x2', '\x2', '\x3FD', '\x3FE', '\x5', '\x120', '\x91', '\x2', 
		'\x3FE', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x3FF', '\x402', '\a', 'm', 
		'\x2', '\x2', '\x400', '\x401', '\x6', 'R', '\xE', '\x2', '\x401', '\x403', 
		'\x5', '\xFC', '\x7F', '\x2', '\x402', '\x400', '\x3', '\x2', '\x2', '\x2', 
		'\x402', '\x403', '\x3', '\x2', '\x2', '\x2', '\x403', '\x404', '\x3', 
		'\x2', '\x2', '\x2', '\x404', '\x405', '\x5', '\x120', '\x91', '\x2', 
		'\x405', '\xA3', '\x3', '\x2', '\x2', '\x2', '\x406', '\x407', '\a', 'S', 
		'\x2', '\x2', '\x407', '\x408', '\a', '\b', '\x2', '\x2', '\x408', '\x409', 
		'\x5', '\xFC', '\x7F', '\x2', '\x409', '\x40A', '\a', '\t', '\x2', '\x2', 
		'\x40A', '\x40B', '\x5', '|', '?', '\x2', '\x40B', '\xA5', '\x3', '\x2', 
		'\x2', '\x2', '\x40C', '\x40D', '\a', 'N', '\x2', '\x2', '\x40D', '\x40E', 
		'\a', '\b', '\x2', '\x2', '\x40E', '\x40F', '\x5', '\xFC', '\x7F', '\x2', 
		'\x40F', '\x410', '\a', '\t', '\x2', '\x2', '\x410', '\x411', '\x5', '\xA8', 
		'U', '\x2', '\x411', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x412', '\x414', 
		'\a', '\n', '\x2', '\x2', '\x413', '\x415', '\x5', '\xAA', 'V', '\x2', 
		'\x414', '\x413', '\x3', '\x2', '\x2', '\x2', '\x414', '\x415', '\x3', 
		'\x2', '\x2', '\x2', '\x415', '\x41A', '\x3', '\x2', '\x2', '\x2', '\x416', 
		'\x418', '\x5', '\xAE', 'X', '\x2', '\x417', '\x419', '\x5', '\xAA', 'V', 
		'\x2', '\x418', '\x417', '\x3', '\x2', '\x2', '\x2', '\x418', '\x419', 
		'\x3', '\x2', '\x2', '\x2', '\x419', '\x41B', '\x3', '\x2', '\x2', '\x2', 
		'\x41A', '\x416', '\x3', '\x2', '\x2', '\x2', '\x41A', '\x41B', '\x3', 
		'\x2', '\x2', '\x2', '\x41B', '\x41C', '\x3', '\x2', '\x2', '\x2', '\x41C', 
		'\x41D', '\a', '\f', '\x2', '\x2', '\x41D', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\x41E', '\x420', '\x5', '\xAC', 'W', '\x2', '\x41F', '\x41E', 
		'\x3', '\x2', '\x2', '\x2', '\x420', '\x421', '\x3', '\x2', '\x2', '\x2', 
		'\x421', '\x41F', '\x3', '\x2', '\x2', '\x2', '\x421', '\x422', '\x3', 
		'\x2', '\x2', '\x2', '\x422', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x423', 
		'\x424', '\a', '\x44', '\x2', '\x2', '\x424', '\x425', '\x5', '\xFC', 
		'\x7F', '\x2', '\x425', '\x427', '\a', '\x11', '\x2', '\x2', '\x426', 
		'\x428', '\x5', '\x80', '\x41', '\x2', '\x427', '\x426', '\x3', '\x2', 
		'\x2', '\x2', '\x427', '\x428', '\x3', '\x2', '\x2', '\x2', '\x428', '\xAD', 
		'\x3', '\x2', '\x2', '\x2', '\x429', '\x42A', '\a', 'T', '\x2', '\x2', 
		'\x42A', '\x42C', '\a', '\x11', '\x2', '\x2', '\x42B', '\x42D', '\x5', 
		'\x80', '\x41', '\x2', '\x42C', '\x42B', '\x3', '\x2', '\x2', '\x2', '\x42C', 
		'\x42D', '\x3', '\x2', '\x2', '\x2', '\x42D', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '\x42E', '\x42F', '\a', '~', '\x2', '\x2', '\x42F', '\x430', '\a', 
		'\x11', '\x2', '\x2', '\x430', '\x431', '\x5', '|', '?', '\x2', '\x431', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\x432', '\x433', '\a', 'V', '\x2', 
		'\x2', '\x433', '\x434', '\x6', 'Z', '\xF', '\x2', '\x434', '\x435', '\x5', 
		'\xFC', '\x7F', '\x2', '\x435', '\x436', '\x5', '\x120', '\x91', '\x2', 
		'\x436', '\xB3', '\x3', '\x2', '\x2', '\x2', '\x437', '\x438', '\a', 'Y', 
		'\x2', '\x2', '\x438', '\x43E', '\x5', '~', '@', '\x2', '\x439', '\x43B', 
		'\x5', '\xB6', '\\', '\x2', '\x43A', '\x43C', '\x5', '\xB8', ']', '\x2', 
		'\x43B', '\x43A', '\x3', '\x2', '\x2', '\x2', '\x43B', '\x43C', '\x3', 
		'\x2', '\x2', '\x2', '\x43C', '\x43F', '\x3', '\x2', '\x2', '\x2', '\x43D', 
		'\x43F', '\x5', '\xB8', ']', '\x2', '\x43E', '\x439', '\x3', '\x2', '\x2', 
		'\x2', '\x43E', '\x43D', '\x3', '\x2', '\x2', '\x2', '\x43F', '\xB5', 
		'\x3', '\x2', '\x2', '\x2', '\x440', '\x441', '\a', 'H', '\x2', '\x2', 
		'\x441', '\x442', '\a', '\b', '\x2', '\x2', '\x442', '\x443', '\a', '~', 
		'\x2', '\x2', '\x443', '\x444', '\a', '\t', '\x2', '\x2', '\x444', '\x445', 
		'\x5', '~', '@', '\x2', '\x445', '\xB7', '\x3', '\x2', '\x2', '\x2', '\x446', 
		'\x447', '\a', 'I', '\x2', '\x2', '\x447', '\x448', '\x5', '~', '@', '\x2', 
		'\x448', '\xB9', '\x3', '\x2', '\x2', '\x2', '\x449', '\x44A', '\a', 'P', 
		'\x2', '\x2', '\x44A', '\x44B', '\x5', '\x120', '\x91', '\x2', '\x44B', 
		'\xBB', '\x3', '\x2', '\x2', '\x2', '\x44C', '\x44D', '\a', 'Q', '\x2', 
		'\x2', '\x44D', '\x44E', '\a', '~', '\x2', '\x2', '\x44E', '\x454', '\x5', 
		'@', '!', '\x2', '\x44F', '\x450', '\a', '\n', '\x2', '\x2', '\x450', 
		'\x451', '\x5', '\xE2', 'r', '\x2', '\x451', '\x452', '\a', '\f', '\x2', 
		'\x2', '\x452', '\x455', '\x3', '\x2', '\x2', '\x2', '\x453', '\x455', 
		'\a', '\r', '\x2', '\x2', '\x454', '\x44F', '\x3', '\x2', '\x2', '\x2', 
		'\x454', '\x453', '\x3', '\x2', '\x2', '\x2', '\x455', '\xBD', '\x3', 
		'\x2', '\x2', '\x2', '\x456', '\x458', '\a', '{', '\x2', '\x2', '\x457', 
		'\x456', '\x3', '\x2', '\x2', '\x2', '\x457', '\x458', '\x3', '\x2', '\x2', 
		'\x2', '\x458', '\x459', '\x3', '\x2', '\x2', '\x2', '\x459', '\x45A', 
		'\a', '^', '\x2', '\x2', '\x45A', '\x45C', '\a', '~', '\x2', '\x2', '\x45B', 
		'\x45D', '\x5', '\x6', '\x4', '\x2', '\x45C', '\x45B', '\x3', '\x2', '\x2', 
		'\x2', '\x45C', '\x45D', '\x3', '\x2', '\x2', '\x2', '\x45D', '\x45E', 
		'\x3', '\x2', '\x2', '\x2', '\x45E', '\x45F', '\x5', '\xC0', '\x61', '\x2', 
		'\x45F', '\x460', '\x5', '\xC2', '\x62', '\x2', '\x460', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\x461', '\x463', '\x5', '\xC4', '\x63', '\x2', '\x462', 
		'\x461', '\x3', '\x2', '\x2', '\x2', '\x462', '\x463', '\x3', '\x2', '\x2', 
		'\x2', '\x463', '\x465', '\x3', '\x2', '\x2', '\x2', '\x464', '\x466', 
		'\x5', '\xC6', '\x64', '\x2', '\x465', '\x464', '\x3', '\x2', '\x2', '\x2', 
		'\x465', '\x466', '\x3', '\x2', '\x2', '\x2', '\x466', '\xC1', '\x3', 
		'\x2', '\x2', '\x2', '\x467', '\x46B', '\a', '\n', '\x2', '\x2', '\x468', 
		'\x46A', '\x5', '\xC8', '\x65', '\x2', '\x469', '\x468', '\x3', '\x2', 
		'\x2', '\x2', '\x46A', '\x46D', '\x3', '\x2', '\x2', '\x2', '\x46B', '\x469', 
		'\x3', '\x2', '\x2', '\x2', '\x46B', '\x46C', '\x3', '\x2', '\x2', '\x2', 
		'\x46C', '\x46E', '\x3', '\x2', '\x2', '\x2', '\x46D', '\x46B', '\x3', 
		'\x2', '\x2', '\x2', '\x46E', '\x46F', '\a', '\f', '\x2', '\x2', '\x46F', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\x470', '\x471', '\a', '`', '\x2', 
		'\x2', '\x471', '\x472', '\x5', '\x1C', '\xF', '\x2', '\x472', '\xC5', 
		'\x3', '\x2', '\x2', '\x2', '\x473', '\x474', '\a', '\x65', '\x2', '\x2', 
		'\x474', '\x475', '\x5', '`', '\x31', '\x2', '\x475', '\xC7', '\x3', '\x2', 
		'\x2', '\x2', '\x476', '\x47E', '\x5', 'Z', '.', '\x2', '\x477', '\x479', 
		'\x5', 'p', '\x39', '\x2', '\x478', '\x477', '\x3', '\x2', '\x2', '\x2', 
		'\x478', '\x479', '\x3', '\x2', '\x2', '\x2', '\x479', '\x47A', '\x3', 
		'\x2', '\x2', '\x2', '\x47A', '\x47E', '\x5', '\xCA', '\x66', '\x2', '\x47B', 
		'\x47E', '\x5', '\xCE', 'h', '\x2', '\x47C', '\x47E', '\x5', '|', '?', 
		'\x2', '\x47D', '\x476', '\x3', '\x2', '\x2', '\x2', '\x47D', '\x478', 
		'\x3', '\x2', '\x2', '\x2', '\x47D', '\x47B', '\x3', '\x2', '\x2', '\x2', 
		'\x47D', '\x47C', '\x3', '\x2', '\x2', '\x2', '\x47E', '\xC9', '\x3', 
		'\x2', '\x2', '\x2', '\x47F', '\x480', '\x5', '\xCC', 'g', '\x2', '\x480', 
		'\x482', '\x5', '\xF4', '{', '\x2', '\x481', '\x483', '\a', '\x10', '\x2', 
		'\x2', '\x482', '\x481', '\x3', '\x2', '\x2', '\x2', '\x482', '\x483', 
		'\x3', '\x2', '\x2', '\x2', '\x483', '\x485', '\x3', '\x2', '\x2', '\x2', 
		'\x484', '\x486', '\x5', '>', ' ', '\x2', '\x485', '\x484', '\x3', '\x2', 
		'\x2', '\x2', '\x485', '\x486', '\x3', '\x2', '\x2', '\x2', '\x486', '\x488', 
		'\x3', '\x2', '\x2', '\x2', '\x487', '\x489', '\x5', '\x2', '\x2', '\x2', 
		'\x488', '\x487', '\x3', '\x2', '\x2', '\x2', '\x488', '\x489', '\x3', 
		'\x2', '\x2', '\x2', '\x489', '\x48A', '\x3', '\x2', '\x2', '\x2', '\x48A', 
		'\x48B', '\a', '\r', '\x2', '\x2', '\x48B', '\x49D', '\x3', '\x2', '\x2', 
		'\x2', '\x48C', '\x48D', '\x5', '\xCC', 'g', '\x2', '\x48D', '\x48E', 
		'\x5', '\xF4', '{', '\x2', '\x48E', '\x494', '\x5', '@', '!', '\x2', '\x48F', 
		'\x490', '\a', '\n', '\x2', '\x2', '\x490', '\x491', '\x5', '\xE2', 'r', 
		'\x2', '\x491', '\x492', '\a', '\f', '\x2', '\x2', '\x492', '\x495', '\x3', 
		'\x2', '\x2', '\x2', '\x493', '\x495', '\a', '\r', '\x2', '\x2', '\x494', 
		'\x48F', '\x3', '\x2', '\x2', '\x2', '\x494', '\x493', '\x3', '\x2', '\x2', 
		'\x2', '\x495', '\x49D', '\x3', '\x2', '\x2', '\x2', '\x496', '\x499', 
		'\x5', '\xCC', 'g', '\x2', '\x497', '\x49A', '\x5', '\xF0', 'y', '\x2', 
		'\x498', '\x49A', '\x5', '\xF2', 'z', '\x2', '\x499', '\x497', '\x3', 
		'\x2', '\x2', '\x2', '\x499', '\x498', '\x3', '\x2', '\x2', '\x2', '\x49A', 
		'\x49D', '\x3', '\x2', '\x2', '\x2', '\x49B', '\x49D', '\x5', '\x82', 
		'\x42', '\x2', '\x49C', '\x47F', '\x3', '\x2', '\x2', '\x2', '\x49C', 
		'\x48C', '\x3', '\x2', '\x2', '\x2', '\x49C', '\x496', '\x3', '\x2', '\x2', 
		'\x2', '\x49C', '\x49B', '\x3', '\x2', '\x2', '\x2', '\x49D', '\xCB', 
		'\x3', '\x2', '\x2', '\x2', '\x49E', '\x4A0', '\a', ']', '\x2', '\x2', 
		'\x49F', '\x49E', '\x3', '\x2', '\x2', '\x2', '\x49F', '\x4A0', '\x3', 
		'\x2', '\x2', '\x2', '\x4A0', '\x4A2', '\x3', '\x2', '\x2', '\x2', '\x4A1', 
		'\x4A3', '\x5', 'N', '(', '\x2', '\x4A2', '\x4A1', '\x3', '\x2', '\x2', 
		'\x2', '\x4A2', '\x4A3', '\x3', '\x2', '\x2', '\x2', '\x4A3', '\x4A5', 
		'\x3', '\x2', '\x2', '\x2', '\x4A4', '\x4A6', '\a', 'l', '\x2', '\x2', 
		'\x4A5', '\x4A4', '\x3', '\x2', '\x2', '\x2', '\x4A5', '\x4A6', '\x3', 
		'\x2', '\x2', '\x2', '\x4A6', '\x4A8', '\x3', '\x2', '\x2', '\x2', '\x4A7', 
		'\x4A9', '\a', '\\', '\x2', '\x2', '\x4A8', '\x4A7', '\x3', '\x2', '\x2', 
		'\x2', '\x4A8', '\x4A9', '\x3', '\x2', '\x2', '\x2', '\x4A9', '\xCD', 
		'\x3', '\x2', '\x2', '\x2', '\x4AA', '\x4AB', '\x5', 'T', '+', '\x2', 
		'\x4AB', '\x4AC', '\a', '\r', '\x2', '\x2', '\x4AC', '\xCF', '\x3', '\x2', 
		'\x2', '\x2', '\x4AD', '\x4AF', '\a', '\x1A', '\x2', '\x2', '\x4AE', '\x4AD', 
		'\x3', '\x2', '\x2', '\x2', '\x4AE', '\x4AF', '\x3', '\x2', '\x2', '\x2', 
		'\x4AF', '\x4B0', '\x3', '\x2', '\x2', '\x2', '\x4B0', '\x4B1', '\a', 
		'~', '\x2', '\x2', '\x4B1', '\x4B3', '\a', '\b', '\x2', '\x2', '\x4B2', 
		'\x4B4', '\x5', '\xDC', 'o', '\x2', '\x4B3', '\x4B2', '\x3', '\x2', '\x2', 
		'\x2', '\x4B3', '\x4B4', '\x3', '\x2', '\x2', '\x2', '\x4B4', '\x4B5', 
		'\x3', '\x2', '\x2', '\x2', '\x4B5', '\x4B6', '\a', '\t', '\x2', '\x2', 
		'\x4B6', '\x4B7', '\a', '\n', '\x2', '\x2', '\x4B7', '\x4B8', '\x5', '\xE2', 
		'r', '\x2', '\x4B8', '\x4B9', '\a', '\f', '\x2', '\x2', '\x4B9', '\xD1', 
		'\x3', '\x2', '\x2', '\x2', '\x4BA', '\x4BB', '\a', 'Q', '\x2', '\x2', 
		'\x4BB', '\x4BD', '\a', '\x1A', '\x2', '\x2', '\x4BC', '\x4BE', '\a', 
		'~', '\x2', '\x2', '\x4BD', '\x4BC', '\x3', '\x2', '\x2', '\x2', '\x4BD', 
		'\x4BE', '\x3', '\x2', '\x2', '\x2', '\x4BE', '\x4BF', '\x3', '\x2', '\x2', 
		'\x2', '\x4BF', '\x4C1', '\a', '\b', '\x2', '\x2', '\x4C0', '\x4C2', '\x5', 
		'\xDC', 'o', '\x2', '\x4C1', '\x4C0', '\x3', '\x2', '\x2', '\x2', '\x4C1', 
		'\x4C2', '\x3', '\x2', '\x2', '\x2', '\x4C2', '\x4C3', '\x3', '\x2', '\x2', 
		'\x2', '\x4C3', '\x4C4', '\a', '\t', '\x2', '\x2', '\x4C4', '\x4C5', '\a', 
		'\n', '\x2', '\x2', '\x4C5', '\x4C6', '\x5', '\xE2', 'r', '\x2', '\x4C6', 
		'\x4C7', '\a', '\f', '\x2', '\x2', '\x4C7', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\x4C8', '\x4C9', '\a', '\n', '\x2', '\x2', '\x4C9', '\x4CE', '\x5', 
		'\xD6', 'l', '\x2', '\x4CA', '\x4CB', '\a', '\xE', '\x2', '\x2', '\x4CB', 
		'\x4CD', '\x5', '\xD6', 'l', '\x2', '\x4CC', '\x4CA', '\x3', '\x2', '\x2', 
		'\x2', '\x4CD', '\x4D0', '\x3', '\x2', '\x2', '\x2', '\x4CE', '\x4CC', 
		'\x3', '\x2', '\x2', '\x2', '\x4CE', '\x4CF', '\x3', '\x2', '\x2', '\x2', 
		'\x4CF', '\x4D2', '\x3', '\x2', '\x2', '\x2', '\x4D0', '\x4CE', '\x3', 
		'\x2', '\x2', '\x2', '\x4D1', '\x4D3', '\a', '\xE', '\x2', '\x2', '\x4D2', 
		'\x4D1', '\x3', '\x2', '\x2', '\x2', '\x4D2', '\x4D3', '\x3', '\x2', '\x2', 
		'\x2', '\x4D3', '\x4D4', '\x3', '\x2', '\x2', '\x2', '\x4D4', '\x4D5', 
		'\a', '\f', '\x2', '\x2', '\x4D5', '\xD5', '\x3', '\x2', '\x2', '\x2', 
		'\x4D6', '\x4D7', '\a', '\x1A', '\x2', '\x2', '\x4D7', '\x4D8', '\x5', 
		'\xDA', 'n', '\x2', '\x4D8', '\xD7', '\x3', '\x2', '\x2', '\x2', '\x4D9', 
		'\x4DA', '\a', '\n', '\x2', '\x2', '\x4DA', '\x4DF', '\x5', '\xDA', 'n', 
		'\x2', '\x4DB', '\x4DC', '\a', '\xE', '\x2', '\x2', '\x4DC', '\x4DE', 
		'\x5', '\xDA', 'n', '\x2', '\x4DD', '\x4DB', '\x3', '\x2', '\x2', '\x2', 
		'\x4DE', '\x4E1', '\x3', '\x2', '\x2', '\x2', '\x4DF', '\x4DD', '\x3', 
		'\x2', '\x2', '\x2', '\x4DF', '\x4E0', '\x3', '\x2', '\x2', '\x2', '\x4E0', 
		'\x4E3', '\x3', '\x2', '\x2', '\x2', '\x4E1', '\x4DF', '\x3', '\x2', '\x2', 
		'\x2', '\x4E2', '\x4E4', '\a', '\xE', '\x2', '\x2', '\x4E3', '\x4E2', 
		'\x3', '\x2', '\x2', '\x2', '\x4E3', '\x4E4', '\x3', '\x2', '\x2', '\x2', 
		'\x4E4', '\x4E5', '\x3', '\x2', '\x2', '\x2', '\x4E5', '\x4E6', '\a', 
		'\f', '\x2', '\x2', '\x4E6', '\xD9', '\x3', '\x2', '\x2', '\x2', '\x4E7', 
		'\x4E8', '\a', '\x6', '\x2', '\x2', '\x4E8', '\x4E9', '\x5', '\x100', 
		'\x81', '\x2', '\x4E9', '\x4EA', '\a', '\a', '\x2', '\x2', '\x4EA', '\x4EC', 
		'\a', '\b', '\x2', '\x2', '\x4EB', '\x4ED', '\x5', '\xDC', 'o', '\x2', 
		'\x4EC', '\x4EB', '\x3', '\x2', '\x2', '\x2', '\x4EC', '\x4ED', '\x3', 
		'\x2', '\x2', '\x2', '\x4ED', '\x4EE', '\x3', '\x2', '\x2', '\x2', '\x4EE', 
		'\x4EF', '\a', '\t', '\x2', '\x2', '\x4EF', '\x4F0', '\a', '\n', '\x2', 
		'\x2', '\x4F0', '\x4F1', '\x5', '\xE2', 'r', '\x2', '\x4F1', '\x4F2', 
		'\a', '\f', '\x2', '\x2', '\x4F2', '\xDB', '\x3', '\x2', '\x2', '\x2', 
		'\x4F3', '\x4F8', '\x5', '\xDE', 'p', '\x2', '\x4F4', '\x4F5', '\a', '\xE', 
		'\x2', '\x2', '\x4F5', '\x4F7', '\x5', '\xDE', 'p', '\x2', '\x4F6', '\x4F4', 
		'\x3', '\x2', '\x2', '\x2', '\x4F7', '\x4FA', '\x3', '\x2', '\x2', '\x2', 
		'\x4F8', '\x4F6', '\x3', '\x2', '\x2', '\x2', '\x4F8', '\x4F9', '\x3', 
		'\x2', '\x2', '\x2', '\x4F9', '\x4FD', '\x3', '\x2', '\x2', '\x2', '\x4FA', 
		'\x4F8', '\x3', '\x2', '\x2', '\x2', '\x4FB', '\x4FC', '\a', '\xE', '\x2', 
		'\x2', '\x4FC', '\x4FE', '\x5', '\xE0', 'q', '\x2', '\x4FD', '\x4FB', 
		'\x3', '\x2', '\x2', '\x2', '\x4FD', '\x4FE', '\x3', '\x2', '\x2', '\x2', 
		'\x4FE', '\x507', '\x3', '\x2', '\x2', '\x2', '\x4FF', '\x507', '\x5', 
		'\xE0', 'q', '\x2', '\x500', '\x507', '\x5', '\xE6', 't', '\x2', '\x501', 
		'\x504', '\x5', '\xEC', 'w', '\x2', '\x502', '\x503', '\a', '\x11', '\x2', 
		'\x2', '\x503', '\x505', '\x5', '\xDC', 'o', '\x2', '\x504', '\x502', 
		'\x3', '\x2', '\x2', '\x2', '\x504', '\x505', '\x3', '\x2', '\x2', '\x2', 
		'\x505', '\x507', '\x3', '\x2', '\x2', '\x2', '\x506', '\x4F3', '\x3', 
		'\x2', '\x2', '\x2', '\x506', '\x4FF', '\x3', '\x2', '\x2', '\x2', '\x506', 
		'\x500', '\x3', '\x2', '\x2', '\x2', '\x506', '\x501', '\x3', '\x2', '\x2', 
		'\x2', '\x507', '\xDD', '\x3', '\x2', '\x2', '\x2', '\x508', '\x50A', 
		'\x5', 'r', ':', '\x2', '\x509', '\x508', '\x3', '\x2', '\x2', '\x2', 
		'\x509', '\x50A', '\x3', '\x2', '\x2', '\x2', '\x50A', '\x50C', '\x3', 
		'\x2', '\x2', '\x2', '\x50B', '\x50D', '\x5', 'N', '(', '\x2', '\x50C', 
		'\x50B', '\x3', '\x2', '\x2', '\x2', '\x50C', '\x50D', '\x3', '\x2', '\x2', 
		'\x2', '\x50D', '\x50E', '\x3', '\x2', '\x2', '\x2', '\x50E', '\x510', 
		'\x5', '\x116', '\x8C', '\x2', '\x50F', '\x511', '\a', '\x10', '\x2', 
		'\x2', '\x510', '\x50F', '\x3', '\x2', '\x2', '\x2', '\x510', '\x511', 
		'\x3', '\x2', '\x2', '\x2', '\x511', '\x513', '\x3', '\x2', '\x2', '\x2', 
		'\x512', '\x514', '\x5', '>', ' ', '\x2', '\x513', '\x512', '\x3', '\x2', 
		'\x2', '\x2', '\x513', '\x514', '\x3', '\x2', '\x2', '\x2', '\x514', '\x517', 
		'\x3', '\x2', '\x2', '\x2', '\x515', '\x516', '\a', '\xF', '\x2', '\x2', 
		'\x516', '\x518', '\x5', '\x100', '\x81', '\x2', '\x517', '\x515', '\x3', 
		'\x2', '\x2', '\x2', '\x517', '\x518', '\x3', '\x2', '\x2', '\x2', '\x518', 
		'\xDF', '\x3', '\x2', '\x2', '\x2', '\x519', '\x51A', '\a', '\x12', '\x2', 
		'\x2', '\x51A', '\x51B', '\a', '~', '\x2', '\x2', '\x51B', '\xE1', '\x3', 
		'\x2', '\x2', '\x2', '\x51C', '\x51E', '\x5', '\xE4', 's', '\x2', '\x51D', 
		'\x51C', '\x3', '\x2', '\x2', '\x2', '\x51D', '\x51E', '\x3', '\x2', '\x2', 
		'\x2', '\x51E', '\xE3', '\x3', '\x2', '\x2', '\x2', '\x51F', '\x521', 
		'\x5', 'z', '>', '\x2', '\x520', '\x51F', '\x3', '\x2', '\x2', '\x2', 
		'\x521', '\x522', '\x3', '\x2', '\x2', '\x2', '\x522', '\x520', '\x3', 
		'\x2', '\x2', '\x2', '\x522', '\x523', '\x3', '\x2', '\x2', '\x2', '\x523', 
		'\xE5', '\x3', '\x2', '\x2', '\x2', '\x524', '\x526', '\a', '\x6', '\x2', 
		'\x2', '\x525', '\x527', '\x5', '\xE8', 'u', '\x2', '\x526', '\x525', 
		'\x3', '\x2', '\x2', '\x2', '\x526', '\x527', '\x3', '\x2', '\x2', '\x2', 
		'\x527', '\x528', '\x3', '\x2', '\x2', '\x2', '\x528', '\x529', '\a', 
		'\a', '\x2', '\x2', '\x529', '\xE7', '\x3', '\x2', '\x2', '\x2', '\x52A', 
		'\x533', '\x5', '\xEA', 'v', '\x2', '\x52B', '\x52D', '\a', '\xE', '\x2', 
		'\x2', '\x52C', '\x52B', '\x3', '\x2', '\x2', '\x2', '\x52D', '\x52E', 
		'\x3', '\x2', '\x2', '\x2', '\x52E', '\x52C', '\x3', '\x2', '\x2', '\x2', 
		'\x52E', '\x52F', '\x3', '\x2', '\x2', '\x2', '\x52F', '\x530', '\x3', 
		'\x2', '\x2', '\x2', '\x530', '\x532', '\x5', '\xEA', 'v', '\x2', '\x531', 
		'\x52C', '\x3', '\x2', '\x2', '\x2', '\x532', '\x535', '\x3', '\x2', '\x2', 
		'\x2', '\x533', '\x531', '\x3', '\x2', '\x2', '\x2', '\x533', '\x534', 
		'\x3', '\x2', '\x2', '\x2', '\x534', '\xE9', '\x3', '\x2', '\x2', '\x2', 
		'\x535', '\x533', '\x3', '\x2', '\x2', '\x2', '\x536', '\x538', '\a', 
		'\x12', '\x2', '\x2', '\x537', '\x536', '\x3', '\x2', '\x2', '\x2', '\x537', 
		'\x538', '\x3', '\x2', '\x2', '\x2', '\x538', '\x53B', '\x3', '\x2', '\x2', 
		'\x2', '\x539', '\x53C', '\x5', '\x100', '\x81', '\x2', '\x53A', '\x53C', 
		'\a', '~', '\x2', '\x2', '\x53B', '\x539', '\x3', '\x2', '\x2', '\x2', 
		'\x53B', '\x53A', '\x3', '\x2', '\x2', '\x2', '\x53C', '\x53E', '\x3', 
		'\x2', '\x2', '\x2', '\x53D', '\x53F', '\a', '\xE', '\x2', '\x2', '\x53E', 
		'\x53D', '\x3', '\x2', '\x2', '\x2', '\x53E', '\x53F', '\x3', '\x2', '\x2', 
		'\x2', '\x53F', '\xEB', '\x3', '\x2', '\x2', '\x2', '\x540', '\x54C', 
		'\a', '\n', '\x2', '\x2', '\x541', '\x546', '\x5', '\xEE', 'x', '\x2', 
		'\x542', '\x543', '\a', '\xE', '\x2', '\x2', '\x543', '\x545', '\x5', 
		'\xEE', 'x', '\x2', '\x544', '\x542', '\x3', '\x2', '\x2', '\x2', '\x545', 
		'\x548', '\x3', '\x2', '\x2', '\x2', '\x546', '\x544', '\x3', '\x2', '\x2', 
		'\x2', '\x546', '\x547', '\x3', '\x2', '\x2', '\x2', '\x547', '\x54A', 
		'\x3', '\x2', '\x2', '\x2', '\x548', '\x546', '\x3', '\x2', '\x2', '\x2', 
		'\x549', '\x54B', '\a', '\xE', '\x2', '\x2', '\x54A', '\x549', '\x3', 
		'\x2', '\x2', '\x2', '\x54A', '\x54B', '\x3', '\x2', '\x2', '\x2', '\x54B', 
		'\x54D', '\x3', '\x2', '\x2', '\x2', '\x54C', '\x541', '\x3', '\x2', '\x2', 
		'\x2', '\x54C', '\x54D', '\x3', '\x2', '\x2', '\x2', '\x54D', '\x54E', 
		'\x3', '\x2', '\x2', '\x2', '\x54E', '\x54F', '\a', '\f', '\x2', '\x2', 
		'\x54F', '\xED', '\x3', '\x2', '\x2', '\x2', '\x550', '\x551', '\x5', 
		'\xF4', '{', '\x2', '\x551', '\x552', '\t', '\a', '\x2', '\x2', '\x552', 
		'\x553', '\x5', '\x100', '\x81', '\x2', '\x553', '\x560', '\x3', '\x2', 
		'\x2', '\x2', '\x554', '\x555', '\a', '\x6', '\x2', '\x2', '\x555', '\x556', 
		'\x5', '\x100', '\x81', '\x2', '\x556', '\x557', '\a', '\a', '\x2', '\x2', 
		'\x557', '\x558', '\a', '\x11', '\x2', '\x2', '\x558', '\x559', '\x5', 
		'\x100', '\x81', '\x2', '\x559', '\x560', '\x3', '\x2', '\x2', '\x2', 
		'\x55A', '\x560', '\x5', '\xF0', 'y', '\x2', '\x55B', '\x560', '\x5', 
		'\xF2', 'z', '\x2', '\x55C', '\x560', '\x5', '\xD0', 'i', '\x2', '\x55D', 
		'\x560', '\x5', '\x116', '\x8C', '\x2', '\x55E', '\x560', '\x5', 'J', 
		'&', '\x2', '\x55F', '\x550', '\x3', '\x2', '\x2', '\x2', '\x55F', '\x554', 
		'\x3', '\x2', '\x2', '\x2', '\x55F', '\x55A', '\x3', '\x2', '\x2', '\x2', 
		'\x55F', '\x55B', '\x3', '\x2', '\x2', '\x2', '\x55F', '\x55C', '\x3', 
		'\x2', '\x2', '\x2', '\x55F', '\x55D', '\x3', '\x2', '\x2', '\x2', '\x55F', 
		'\x55E', '\x3', '\x2', '\x2', '\x2', '\x560', '\xEF', '\x3', '\x2', '\x2', 
		'\x2', '\x561', '\x562', '\x5', '\x11C', '\x8F', '\x2', '\x562', '\x563', 
		'\a', '\b', '\x2', '\x2', '\x563', '\x565', '\a', '\t', '\x2', '\x2', 
		'\x564', '\x566', '\x5', '>', ' ', '\x2', '\x565', '\x564', '\x3', '\x2', 
		'\x2', '\x2', '\x565', '\x566', '\x3', '\x2', '\x2', '\x2', '\x566', '\x567', 
		'\x3', '\x2', '\x2', '\x2', '\x567', '\x568', '\a', '\n', '\x2', '\x2', 
		'\x568', '\x569', '\x5', '\xE2', 'r', '\x2', '\x569', '\x56A', '\a', '\f', 
		'\x2', '\x2', '\x56A', '\xF1', '\x3', '\x2', '\x2', '\x2', '\x56B', '\x56C', 
		'\x5', '\x11E', '\x90', '\x2', '\x56C', '\x56F', '\a', '\b', '\x2', '\x2', 
		'\x56D', '\x570', '\a', '~', '\x2', '\x2', '\x56E', '\x570', '\x5', '\x4', 
		'\x3', '\x2', '\x56F', '\x56D', '\x3', '\x2', '\x2', '\x2', '\x56F', '\x56E', 
		'\x3', '\x2', '\x2', '\x2', '\x570', '\x572', '\x3', '\x2', '\x2', '\x2', 
		'\x571', '\x573', '\x5', '>', ' ', '\x2', '\x572', '\x571', '\x3', '\x2', 
		'\x2', '\x2', '\x572', '\x573', '\x3', '\x2', '\x2', '\x2', '\x573', '\x574', 
		'\x3', '\x2', '\x2', '\x2', '\x574', '\x575', '\a', '\t', '\x2', '\x2', 
		'\x575', '\x576', '\a', '\n', '\x2', '\x2', '\x576', '\x577', '\x5', '\xE2', 
		'r', '\x2', '\x577', '\x578', '\a', '\f', '\x2', '\x2', '\x578', '\xF3', 
		'\x3', '\x2', '\x2', '\x2', '\x579', '\x57D', '\x5', '\x114', '\x8B', 
		'\x2', '\x57A', '\x57D', '\a', '\x7F', '\x2', '\x2', '\x57B', '\x57D', 
		'\x5', '\x112', '\x8A', '\x2', '\x57C', '\x579', '\x3', '\x2', '\x2', 
		'\x2', '\x57C', '\x57A', '\x3', '\x2', '\x2', '\x2', '\x57C', '\x57B', 
		'\x3', '\x2', '\x2', '\x2', '\x57D', '\xF5', '\x3', '\x2', '\x2', '\x2', 
		'\x57E', '\x583', '\a', '\b', '\x2', '\x2', '\x57F', '\x581', '\x5', '\xF8', 
		'}', '\x2', '\x580', '\x582', '\a', '\xE', '\x2', '\x2', '\x581', '\x580', 
		'\x3', '\x2', '\x2', '\x2', '\x581', '\x582', '\x3', '\x2', '\x2', '\x2', 
		'\x582', '\x584', '\x3', '\x2', '\x2', '\x2', '\x583', '\x57F', '\x3', 
		'\x2', '\x2', '\x2', '\x583', '\x584', '\x3', '\x2', '\x2', '\x2', '\x584', 
		'\x585', '\x3', '\x2', '\x2', '\x2', '\x585', '\x586', '\a', '\t', '\x2', 
		'\x2', '\x586', '\xF7', '\x3', '\x2', '\x2', '\x2', '\x587', '\x58C', 
		'\x5', '\xFA', '~', '\x2', '\x588', '\x589', '\a', '\xE', '\x2', '\x2', 
		'\x589', '\x58B', '\x5', '\xFA', '~', '\x2', '\x58A', '\x588', '\x3', 
		'\x2', '\x2', '\x2', '\x58B', '\x58E', '\x3', '\x2', '\x2', '\x2', '\x58C', 
		'\x58A', '\x3', '\x2', '\x2', '\x2', '\x58C', '\x58D', '\x3', '\x2', '\x2', 
		'\x2', '\x58D', '\xF9', '\x3', '\x2', '\x2', '\x2', '\x58E', '\x58C', 
		'\x3', '\x2', '\x2', '\x2', '\x58F', '\x591', '\a', '\x12', '\x2', '\x2', 
		'\x590', '\x58F', '\x3', '\x2', '\x2', '\x2', '\x590', '\x591', '\x3', 
		'\x2', '\x2', '\x2', '\x591', '\x594', '\x3', '\x2', '\x2', '\x2', '\x592', 
		'\x595', '\x5', '\x100', '\x81', '\x2', '\x593', '\x595', '\a', '~', '\x2', 
		'\x2', '\x594', '\x592', '\x3', '\x2', '\x2', '\x2', '\x594', '\x593', 
		'\x3', '\x2', '\x2', '\x2', '\x595', '\xFB', '\x3', '\x2', '\x2', '\x2', 
		'\x596', '\x59B', '\x5', '\x100', '\x81', '\x2', '\x597', '\x598', '\a', 
		'\xE', '\x2', '\x2', '\x598', '\x59A', '\x5', '\x100', '\x81', '\x2', 
		'\x599', '\x597', '\x3', '\x2', '\x2', '\x2', '\x59A', '\x59D', '\x3', 
		'\x2', '\x2', '\x2', '\x59B', '\x599', '\x3', '\x2', '\x2', '\x2', '\x59B', 
		'\x59C', '\x3', '\x2', '\x2', '\x2', '\x59C', '\xFD', '\x3', '\x2', '\x2', 
		'\x2', '\x59D', '\x59B', '\x3', '\x2', '\x2', '\x2', '\x59E', '\x5A0', 
		'\a', 'Q', '\x2', '\x2', '\x59F', '\x5A1', '\a', '~', '\x2', '\x2', '\x5A0', 
		'\x59F', '\x3', '\x2', '\x2', '\x2', '\x5A0', '\x5A1', '\x3', '\x2', '\x2', 
		'\x2', '\x5A1', '\x5A2', '\x3', '\x2', '\x2', '\x2', '\x5A2', '\x5A4', 
		'\a', '\b', '\x2', '\x2', '\x5A3', '\x5A5', '\x5', '\xDC', 'o', '\x2', 
		'\x5A4', '\x5A3', '\x3', '\x2', '\x2', '\x2', '\x5A4', '\x5A5', '\x3', 
		'\x2', '\x2', '\x2', '\x5A5', '\x5A6', '\x3', '\x2', '\x2', '\x2', '\x5A6', 
		'\x5A8', '\a', '\t', '\x2', '\x2', '\x5A7', '\x5A9', '\x5', '>', ' ', 
		'\x2', '\x5A8', '\x5A7', '\x3', '\x2', '\x2', '\x2', '\x5A8', '\x5A9', 
		'\x3', '\x2', '\x2', '\x2', '\x5A9', '\x5AA', '\x3', '\x2', '\x2', '\x2', 
		'\x5AA', '\x5AB', '\a', '\n', '\x2', '\x2', '\x5AB', '\x5AC', '\x5', '\xE2', 
		'r', '\x2', '\x5AC', '\x5AD', '\a', '\f', '\x2', '\x2', '\x5AD', '\xFF', 
		'\x3', '\x2', '\x2', '\x2', '\x5AE', '\x5AF', '\b', '\x81', '\x1', '\x2', 
		'\x5AF', '\x5EA', '\x5', '\xFE', '\x80', '\x2', '\x5B0', '\x5EA', '\x5', 
		'\x104', '\x83', '\x2', '\x5B1', '\x5B3', '\a', '^', '\x2', '\x2', '\x5B2', 
		'\x5B4', '\a', '~', '\x2', '\x2', '\x5B3', '\x5B2', '\x3', '\x2', '\x2', 
		'\x2', '\x5B3', '\x5B4', '\x3', '\x2', '\x2', '\x2', '\x5B4', '\x5B5', 
		'\x3', '\x2', '\x2', '\x2', '\x5B5', '\x5EA', '\x5', '\xC2', '\x62', '\x2', 
		'\x5B6', '\x5B7', '\a', '\x46', '\x2', '\x2', '\x5B7', '\x5B9', '\x5', 
		'\x100', '\x81', '\x2', '\x5B8', '\x5BA', '\x5', '\xE', '\b', '\x2', '\x5B9', 
		'\x5B8', '\x3', '\x2', '\x2', '\x2', '\x5B9', '\x5BA', '\x3', '\x2', '\x2', 
		'\x2', '\x5BA', '\x5BB', '\x3', '\x2', '\x2', '\x2', '\x5BB', '\x5BC', 
		'\x5', '\xF6', '|', '\x2', '\x5BC', '\x5EA', '\x3', '\x2', '\x2', '\x2', 
		'\x5BD', '\x5BE', '\a', '\x46', '\x2', '\x2', '\x5BE', '\x5C0', '\x5', 
		'\x100', '\x81', '\x2', '\x5BF', '\x5C1', '\x5', '\xE', '\b', '\x2', '\x5C0', 
		'\x5BF', '\x3', '\x2', '\x2', '\x2', '\x5C0', '\x5C1', '\x3', '\x2', '\x2', 
		'\x2', '\x5C1', '\x5EA', '\x3', '\x2', '\x2', '\x2', '\x5C2', '\x5C3', 
		'\a', 'W', '\x2', '\x2', '\x5C3', '\x5EA', '\x5', '\x100', '\x81', '(', 
		'\x5C4', '\x5C5', '\a', 'K', '\x2', '\x2', '\x5C5', '\x5EA', '\x5', '\x100', 
		'\x81', '\'', '\x5C6', '\x5C7', '\a', '\x43', '\x2', '\x2', '\x5C7', '\x5EA', 
		'\x5', '\x100', '\x81', '&', '\x5C8', '\x5C9', '\a', '\x14', '\x2', '\x2', 
		'\x5C9', '\x5EA', '\x5', '\x100', '\x81', '%', '\x5CA', '\x5CB', '\a', 
		'\x15', '\x2', '\x2', '\x5CB', '\x5EA', '\x5', '\x100', '\x81', '$', '\x5CC', 
		'\x5CD', '\a', '\x16', '\x2', '\x2', '\x5CD', '\x5EA', '\x5', '\x100', 
		'\x81', '#', '\x5CE', '\x5CF', '\a', '\x17', '\x2', '\x2', '\x5CF', '\x5EA', 
		'\x5', '\x100', '\x81', '\"', '\x5D0', '\x5D1', '\a', '\x18', '\x2', '\x2', 
		'\x5D1', '\x5EA', '\x5', '\x100', '\x81', '!', '\x5D2', '\x5D3', '\a', 
		'\x19', '\x2', '\x2', '\x5D3', '\x5EA', '\x5', '\x100', '\x81', ' ', '\x5D4', 
		'\x5EA', '\x5', '\xD8', 'm', '\x2', '\x5D5', '\x5EA', '\x5', '\xD4', 'k', 
		'\x2', '\x5D6', '\x5EA', '\x5', '\xD2', 'j', '\x2', '\x5D7', '\x5EA', 
		'\x5', '\xA2', 'R', '\x2', '\x5D8', '\x5EA', '\a', 'R', '\x2', '\x2', 
		'\x5D9', '\x5DB', '\x5', '\x114', '\x8B', '\x2', '\x5DA', '\x5DC', '\x5', 
		'\x100', '\x81', '\x2', '\x5DB', '\x5DA', '\x3', '\x2', '\x2', '\x2', 
		'\x5DB', '\x5DC', '\x3', '\x2', '\x2', '\x2', '\x5DC', '\x5EA', '\x3', 
		'\x2', '\x2', '\x2', '\x5DD', '\x5EA', '\a', '\x61', '\x2', '\x2', '\x5DE', 
		'\x5EA', '\x5', '\x10C', '\x87', '\x2', '\x5DF', '\x5EA', '\x5', '\xE6', 
		't', '\x2', '\x5E0', '\x5EA', '\x5', '\xEC', 'w', '\x2', '\x5E1', '\x5E2', 
		'\a', '\b', '\x2', '\x2', '\x5E2', '\x5E3', '\x5', '\xFC', '\x7F', '\x2', 
		'\x5E3', '\x5E4', '\a', '\t', '\x2', '\x2', '\x5E4', '\x5EA', '\x3', '\x2', 
		'\x2', '\x2', '\x5E5', '\x5E7', '\x5', '\xE', '\b', '\x2', '\x5E6', '\x5E8', 
		'\x5', '\xFC', '\x7F', '\x2', '\x5E7', '\x5E6', '\x3', '\x2', '\x2', '\x2', 
		'\x5E7', '\x5E8', '\x3', '\x2', '\x2', '\x2', '\x5E8', '\x5EA', '\x3', 
		'\x2', '\x2', '\x2', '\x5E9', '\x5AE', '\x3', '\x2', '\x2', '\x2', '\x5E9', 
		'\x5B0', '\x3', '\x2', '\x2', '\x2', '\x5E9', '\x5B1', '\x3', '\x2', '\x2', 
		'\x2', '\x5E9', '\x5B6', '\x3', '\x2', '\x2', '\x2', '\x5E9', '\x5BD', 
		'\x3', '\x2', '\x2', '\x2', '\x5E9', '\x5C2', '\x3', '\x2', '\x2', '\x2', 
		'\x5E9', '\x5C4', '\x3', '\x2', '\x2', '\x2', '\x5E9', '\x5C6', '\x3', 
		'\x2', '\x2', '\x2', '\x5E9', '\x5C8', '\x3', '\x2', '\x2', '\x2', '\x5E9', 
		'\x5CA', '\x3', '\x2', '\x2', '\x2', '\x5E9', '\x5CC', '\x3', '\x2', '\x2', 
		'\x2', '\x5E9', '\x5CE', '\x3', '\x2', '\x2', '\x2', '\x5E9', '\x5D0', 
		'\x3', '\x2', '\x2', '\x2', '\x5E9', '\x5D2', '\x3', '\x2', '\x2', '\x2', 
		'\x5E9', '\x5D4', '\x3', '\x2', '\x2', '\x2', '\x5E9', '\x5D5', '\x3', 
		'\x2', '\x2', '\x2', '\x5E9', '\x5D6', '\x3', '\x2', '\x2', '\x2', '\x5E9', 
		'\x5D7', '\x3', '\x2', '\x2', '\x2', '\x5E9', '\x5D8', '\x3', '\x2', '\x2', 
		'\x2', '\x5E9', '\x5D9', '\x3', '\x2', '\x2', '\x2', '\x5E9', '\x5DD', 
		'\x3', '\x2', '\x2', '\x2', '\x5E9', '\x5DE', '\x3', '\x2', '\x2', '\x2', 
		'\x5E9', '\x5DF', '\x3', '\x2', '\x2', '\x2', '\x5E9', '\x5E0', '\x3', 
		'\x2', '\x2', '\x2', '\x5E9', '\x5E1', '\x3', '\x2', '\x2', '\x2', '\x5E9', 
		'\x5E5', '\x3', '\x2', '\x2', '\x2', '\x5EA', '\x636', '\x3', '\x2', '\x2', 
		'\x2', '\x5EB', '\x5EC', '\f', '\x1F', '\x2', '\x2', '\x5EC', '\x5ED', 
		'\t', '\b', '\x2', '\x2', '\x5ED', '\x635', '\x5', '\x100', '\x81', ' ', 
		'\x5EE', '\x5EF', '\f', '\x1E', '\x2', '\x2', '\x5EF', '\x5F0', '\t', 
		'\t', '\x2', '\x2', '\x5F0', '\x635', '\x5', '\x100', '\x81', '\x1F', 
		'\x5F1', '\x5F2', '\f', '\x1D', '\x2', '\x2', '\x5F2', '\x5F3', '\t', 
		'\n', '\x2', '\x2', '\x5F3', '\x635', '\x5', '\x100', '\x81', '\x1E', 
		'\x5F4', '\x5F5', '\f', '\x1C', '\x2', '\x2', '\x5F5', '\x5F6', '\t', 
		'\v', '\x2', '\x2', '\x5F6', '\x635', '\x5', '\x100', '\x81', '\x1D', 
		'\x5F7', '\x5F8', '\f', '\x1B', '\x2', '\x2', '\x5F8', '\x5F9', '\a', 
		'\x42', '\x2', '\x2', '\x5F9', '\x635', '\x5', '\x100', '\x81', '\x1C', 
		'\x5FA', '\x5FB', '\f', '\x1A', '\x2', '\x2', '\x5FB', '\x5FC', '\a', 
		'X', '\x2', '\x2', '\x5FC', '\x635', '\x5', '\x100', '\x81', '\x1B', '\x5FD', 
		'\x5FE', '\f', '\x19', '\x2', '\x2', '\x5FE', '\x5FF', '\t', '\f', '\x2', 
		'\x2', '\x5FF', '\x635', '\x5', '\x100', '\x81', '\x1A', '\x600', '\x601', 
		'\f', '\x18', '\x2', '\x2', '\x601', '\x602', '\a', '(', '\x2', '\x2', 
		'\x602', '\x635', '\x5', '\x100', '\x81', '\x19', '\x603', '\x604', '\f', 
		'\x17', '\x2', '\x2', '\x604', '\x605', '\a', ')', '\x2', '\x2', '\x605', 
		'\x635', '\x5', '\x100', '\x81', '\x18', '\x606', '\x607', '\f', '\x16', 
		'\x2', '\x2', '\x607', '\x608', '\a', '*', '\x2', '\x2', '\x608', '\x635', 
		'\x5', '\x100', '\x81', '\x17', '\x609', '\x60A', '\f', '\x15', '\x2', 
		'\x2', '\x60A', '\x60B', '\a', '+', '\x2', '\x2', '\x60B', '\x635', '\x5', 
		'\x100', '\x81', '\x16', '\x60C', '\x60D', '\f', '\x14', '\x2', '\x2', 
		'\x60D', '\x60E', '\a', ',', '\x2', '\x2', '\x60E', '\x635', '\x5', '\x100', 
		'\x81', '\x15', '\x60F', '\x610', '\f', '\x13', '\x2', '\x2', '\x610', 
		'\x611', '\a', '\x10', '\x2', '\x2', '\x611', '\x612', '\x5', '\x100', 
		'\x81', '\x2', '\x612', '\x613', '\a', '\x11', '\x2', '\x2', '\x613', 
		'\x614', '\x5', '\x100', '\x81', '\x14', '\x614', '\x635', '\x3', '\x2', 
		'\x2', '\x2', '\x615', '\x616', '\f', '\x12', '\x2', '\x2', '\x616', '\x617', 
		'\a', '\xF', '\x2', '\x2', '\x617', '\x635', '\x5', '\x100', '\x81', '\x13', 
		'\x618', '\x619', '\f', '\x11', '\x2', '\x2', '\x619', '\x61A', '\x5', 
		'\x10A', '\x86', '\x2', '\x61A', '\x61B', '\x5', '\x100', '\x81', '\x12', 
		'\x61B', '\x635', '\x3', '\x2', '\x2', '\x2', '\x61C', '\x61D', '\f', 
		'/', '\x2', '\x2', '\x61D', '\x61E', '\a', '\x6', '\x2', '\x2', '\x61E', 
		'\x61F', '\x5', '\xFC', '\x7F', '\x2', '\x61F', '\x620', '\a', '\a', '\x2', 
		'\x2', '\x620', '\x635', '\x3', '\x2', '\x2', '\x2', '\x621', '\x622', 
		'\f', '.', '\x2', '\x2', '\x622', '\x623', '\a', '\x13', '\x2', '\x2', 
		'\x623', '\x625', '\x5', '\x114', '\x8B', '\x2', '\x624', '\x626', '\x5', 
		'\x1E', '\x10', '\x2', '\x625', '\x624', '\x3', '\x2', '\x2', '\x2', '\x625', 
		'\x626', '\x3', '\x2', '\x2', '\x2', '\x626', '\x635', '\x3', '\x2', '\x2', 
		'\x2', '\x627', '\x628', '\f', '+', '\x2', '\x2', '\x628', '\x635', '\x5', 
		'\xF6', '|', '\x2', '\x629', '\x62A', '\f', '*', '\x2', '\x2', '\x62A', 
		'\x62B', '\x6', '\x81', '#', '\x2', '\x62B', '\x635', '\a', '\x14', '\x2', 
		'\x2', '\x62C', '\x62D', '\f', ')', '\x2', '\x2', '\x62D', '\x62E', '\x6', 
		'\x81', '%', '\x2', '\x62E', '\x635', '\a', '\x15', '\x2', '\x2', '\x62F', 
		'\x630', '\f', '\x10', '\x2', '\x2', '\x630', '\x635', '\x5', '\x10E', 
		'\x88', '\x2', '\x631', '\x632', '\f', '\x3', '\x2', '\x2', '\x632', '\x633', 
		'\a', 'Z', '\x2', '\x2', '\x633', '\x635', '\x5', '\x102', '\x82', '\x2', 
		'\x634', '\x5EB', '\x3', '\x2', '\x2', '\x2', '\x634', '\x5EE', '\x3', 
		'\x2', '\x2', '\x2', '\x634', '\x5F1', '\x3', '\x2', '\x2', '\x2', '\x634', 
		'\x5F4', '\x3', '\x2', '\x2', '\x2', '\x634', '\x5F7', '\x3', '\x2', '\x2', 
		'\x2', '\x634', '\x5FA', '\x3', '\x2', '\x2', '\x2', '\x634', '\x5FD', 
		'\x3', '\x2', '\x2', '\x2', '\x634', '\x600', '\x3', '\x2', '\x2', '\x2', 
		'\x634', '\x603', '\x3', '\x2', '\x2', '\x2', '\x634', '\x606', '\x3', 
		'\x2', '\x2', '\x2', '\x634', '\x609', '\x3', '\x2', '\x2', '\x2', '\x634', 
		'\x60C', '\x3', '\x2', '\x2', '\x2', '\x634', '\x60F', '\x3', '\x2', '\x2', 
		'\x2', '\x634', '\x615', '\x3', '\x2', '\x2', '\x2', '\x634', '\x618', 
		'\x3', '\x2', '\x2', '\x2', '\x634', '\x61C', '\x3', '\x2', '\x2', '\x2', 
		'\x634', '\x621', '\x3', '\x2', '\x2', '\x2', '\x634', '\x627', '\x3', 
		'\x2', '\x2', '\x2', '\x634', '\x629', '\x3', '\x2', '\x2', '\x2', '\x634', 
		'\x62C', '\x3', '\x2', '\x2', '\x2', '\x634', '\x62F', '\x3', '\x2', '\x2', 
		'\x2', '\x634', '\x631', '\x3', '\x2', '\x2', '\x2', '\x635', '\x638', 
		'\x3', '\x2', '\x2', '\x2', '\x636', '\x634', '\x3', '\x2', '\x2', '\x2', 
		'\x636', '\x637', '\x3', '\x2', '\x2', '\x2', '\x637', '\x101', '\x3', 
		'\x2', '\x2', '\x2', '\x638', '\x636', '\x3', '\x2', '\x2', '\x2', '\x639', 
		'\x63C', '\x5', '\x1A', '\xE', '\x2', '\x63A', '\x63B', '\a', '\x6', '\x2', 
		'\x2', '\x63B', '\x63D', '\a', '\a', '\x2', '\x2', '\x63C', '\x63A', '\x3', 
		'\x2', '\x2', '\x2', '\x63C', '\x63D', '\x3', '\x2', '\x2', '\x2', '\x63D', 
		'\x640', '\x3', '\x2', '\x2', '\x2', '\x63E', '\x640', '\x5', '\x100', 
		'\x81', '\x2', '\x63F', '\x639', '\x3', '\x2', '\x2', '\x2', '\x63F', 
		'\x63E', '\x3', '\x2', '\x2', '\x2', '\x640', '\x103', '\x3', '\x2', '\x2', 
		'\x2', '\x641', '\x643', '\a', ']', '\x2', '\x2', '\x642', '\x641', '\x3', 
		'\x2', '\x2', '\x2', '\x642', '\x643', '\x3', '\x2', '\x2', '\x2', '\x643', 
		'\x644', '\x3', '\x2', '\x2', '\x2', '\x644', '\x646', '\x5', '\x106', 
		'\x84', '\x2', '\x645', '\x647', '\x5', '>', ' ', '\x2', '\x646', '\x645', 
		'\x3', '\x2', '\x2', '\x2', '\x646', '\x647', '\x3', '\x2', '\x2', '\x2', 
		'\x647', '\x648', '\x3', '\x2', '\x2', '\x2', '\x648', '\x649', '\a', 
		'\x38', '\x2', '\x2', '\x649', '\x64A', '\x5', '\x108', '\x85', '\x2', 
		'\x64A', '\x105', '\x3', '\x2', '\x2', '\x2', '\x64B', '\x652', '\a', 
		'~', '\x2', '\x2', '\x64C', '\x64E', '\a', '\b', '\x2', '\x2', '\x64D', 
		'\x64F', '\x5', '\xDC', 'o', '\x2', '\x64E', '\x64D', '\x3', '\x2', '\x2', 
		'\x2', '\x64E', '\x64F', '\x3', '\x2', '\x2', '\x2', '\x64F', '\x650', 
		'\x3', '\x2', '\x2', '\x2', '\x650', '\x652', '\a', '\t', '\x2', '\x2', 
		'\x651', '\x64B', '\x3', '\x2', '\x2', '\x2', '\x651', '\x64C', '\x3', 
		'\x2', '\x2', '\x2', '\x652', '\x107', '\x3', '\x2', '\x2', '\x2', '\x653', 
		'\x659', '\x5', '\x100', '\x81', '\x2', '\x654', '\x655', '\a', '\n', 
		'\x2', '\x2', '\x655', '\x656', '\x5', '\xE2', 'r', '\x2', '\x656', '\x657', 
		'\a', '\f', '\x2', '\x2', '\x657', '\x659', '\x3', '\x2', '\x2', '\x2', 
		'\x658', '\x653', '\x3', '\x2', '\x2', '\x2', '\x658', '\x654', '\x3', 
		'\x2', '\x2', '\x2', '\x659', '\x109', '\x3', '\x2', '\x2', '\x2', '\x65A', 
		'\x65B', '\t', '\r', '\x2', '\x2', '\x65B', '\x10B', '\x3', '\x2', '\x2', 
		'\x2', '\x65C', '\x663', '\a', '\x39', '\x2', '\x2', '\x65D', '\x663', 
		'\a', ':', '\x2', '\x2', '\x65E', '\x663', '\a', '\x7F', '\x2', '\x2', 
		'\x65F', '\x663', '\x5', '\x10E', '\x88', '\x2', '\x660', '\x663', '\a', 
		'\x5', '\x2', '\x2', '\x661', '\x663', '\x5', '\x112', '\x8A', '\x2', 
		'\x662', '\x65C', '\x3', '\x2', '\x2', '\x2', '\x662', '\x65D', '\x3', 
		'\x2', '\x2', '\x2', '\x662', '\x65E', '\x3', '\x2', '\x2', '\x2', '\x662', 
		'\x65F', '\x3', '\x2', '\x2', '\x2', '\x662', '\x660', '\x3', '\x2', '\x2', 
		'\x2', '\x662', '\x661', '\x3', '\x2', '\x2', '\x2', '\x663', '\x10D', 
		'\x3', '\x2', '\x2', '\x2', '\x664', '\x668', '\a', '\x80', '\x2', '\x2', 
		'\x665', '\x667', '\x5', '\x110', '\x89', '\x2', '\x666', '\x665', '\x3', 
		'\x2', '\x2', '\x2', '\x667', '\x66A', '\x3', '\x2', '\x2', '\x2', '\x668', 
		'\x666', '\x3', '\x2', '\x2', '\x2', '\x668', '\x669', '\x3', '\x2', '\x2', 
		'\x2', '\x669', '\x66B', '\x3', '\x2', '\x2', '\x2', '\x66A', '\x668', 
		'\x3', '\x2', '\x2', '\x2', '\x66B', '\x66C', '\a', '\x80', '\x2', '\x2', 
		'\x66C', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x66D', '\x673', '\a', 
		'\x87', '\x2', '\x2', '\x66E', '\x66F', '\a', '\x86', '\x2', '\x2', '\x66F', 
		'\x670', '\x5', '\x100', '\x81', '\x2', '\x670', '\x671', '\a', '\v', 
		'\x2', '\x2', '\x671', '\x673', '\x3', '\x2', '\x2', '\x2', '\x672', '\x66D', 
		'\x3', '\x2', '\x2', '\x2', '\x672', '\x66E', '\x3', '\x2', '\x2', '\x2', 
		'\x673', '\x111', '\x3', '\x2', '\x2', '\x2', '\x674', '\x675', '\t', 
		'\xE', '\x2', '\x2', '\x675', '\x113', '\x3', '\x2', '\x2', '\x2', '\x676', 
		'\x679', '\a', '~', '\x2', '\x2', '\x677', '\x679', '\x5', '\x118', '\x8D', 
		'\x2', '\x678', '\x676', '\x3', '\x2', '\x2', '\x2', '\x678', '\x677', 
		'\x3', '\x2', '\x2', '\x2', '\x679', '\x115', '\x3', '\x2', '\x2', '\x2', 
		'\x67A', '\x67B', '\t', '\xF', '\x2', '\x2', '\x67B', '\x117', '\x3', 
		'\x2', '\x2', '\x2', '\x67C', '\x680', '\x5', '\x11A', '\x8E', '\x2', 
		'\x67D', '\x680', '\a', '\x39', '\x2', '\x2', '\x67E', '\x680', '\a', 
		':', '\x2', '\x2', '\x67F', '\x67C', '\x3', '\x2', '\x2', '\x2', '\x67F', 
		'\x67D', '\x3', '\x2', '\x2', '\x2', '\x67F', '\x67E', '\x3', '\x2', '\x2', 
		'\x2', '\x680', '\x119', '\x3', '\x2', '\x2', '\x2', '\x681', '\x682', 
		'\t', '\x10', '\x2', '\x2', '\x682', '\x11B', '\x3', '\x2', '\x2', '\x2', 
		'\x683', '\x684', '\a', 't', '\x2', '\x2', '\x684', '\x685', '\x5', '\xF4', 
		'{', '\x2', '\x685', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x686', '\x687', 
		'\a', 'u', '\x2', '\x2', '\x687', '\x688', '\x5', '\xF4', '{', '\x2', 
		'\x688', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x689', '\x68E', '\a', 
		'\r', '\x2', '\x2', '\x68A', '\x68E', '\a', '\x2', '\x2', '\x3', '\x68B', 
		'\x68E', '\x6', '\x91', '(', '\x2', '\x68C', '\x68E', '\x6', '\x91', ')', 
		'\x2', '\x68D', '\x689', '\x3', '\x2', '\x2', '\x2', '\x68D', '\x68A', 
		'\x3', '\x2', '\x2', '\x2', '\x68D', '\x68B', '\x3', '\x2', '\x2', '\x2', 
		'\x68D', '\x68C', '\x3', '\x2', '\x2', '\x2', '\x68E', '\x121', '\x3', 
		'\x2', '\x2', '\x2', '\xD3', '\x127', '\x12B', '\x134', '\x139', '\x13C', 
		'\x143', '\x14C', '\x156', '\x161', '\x163', '\x178', '\x180', '\x187', 
		'\x18B', '\x19A', '\x19E', '\x1A2', '\x1A8', '\x1AF', '\x1B9', '\x1BB', 
		'\x1CB', '\x1CF', '\x1D3', '\x1DB', '\x1DF', '\x1EE', '\x1F2', '\x1F5', 
		'\x1F9', '\x1FC', '\x200', '\x206', '\x20A', '\x20E', '\x216', '\x21B', 
		'\x21D', '\x224', '\x229', '\x22C', '\x22F', '\x234', '\x237', '\x23A', 
		'\x23F', '\x242', '\x245', '\x249', '\x24F', '\x253', '\x257', '\x25B', 
		'\x266', '\x26D', '\x274', '\x279', '\x281', '\x284', '\x287', '\x28C', 
		'\x28F', '\x293', '\x29D', '\x2A1', '\x2A7', '\x2AD', '\x2B4', '\x2BA', 
		'\x2C0', '\x2C8', '\x2CD', '\x2D8', '\x2DD', '\x2E5', '\x2EC', '\x2F3', 
		'\x2F8', '\x31A', '\x31E', '\x325', '\x32B', '\x332', '\x336', '\x33A', 
		'\x343', '\x34B', '\x352', '\x356', '\x35A', '\x35E', '\x361', '\x364', 
		'\x367', '\x36B', '\x36F', '\x373', '\x375', '\x37C', '\x382', '\x385', 
		'\x388', '\x38C', '\x38F', '\x396', '\x39F', '\x3B2', '\x3B6', '\x3BA', 
		'\x3C4', '\x3C8', '\x3D3', '\x3E0', '\x3E6', '\x3ED', '\x3F4', '\x3FB', 
		'\x402', '\x414', '\x418', '\x41A', '\x421', '\x427', '\x42C', '\x43B', 
		'\x43E', '\x454', '\x457', '\x45C', '\x462', '\x465', '\x46B', '\x478', 
		'\x47D', '\x482', '\x485', '\x488', '\x494', '\x499', '\x49C', '\x49F', 
		'\x4A2', '\x4A5', '\x4A8', '\x4AE', '\x4B3', '\x4BD', '\x4C1', '\x4CE', 
		'\x4D2', '\x4DF', '\x4E3', '\x4EC', '\x4F8', '\x4FD', '\x504', '\x506', 
		'\x509', '\x50C', '\x510', '\x513', '\x517', '\x51D', '\x522', '\x526', 
		'\x52E', '\x533', '\x537', '\x53B', '\x53E', '\x546', '\x54A', '\x54C', 
		'\x55F', '\x565', '\x56F', '\x572', '\x57C', '\x581', '\x583', '\x58C', 
		'\x590', '\x594', '\x59B', '\x5A0', '\x5A4', '\x5A8', '\x5B3', '\x5B9', 
		'\x5C0', '\x5DB', '\x5E7', '\x5E9', '\x625', '\x634', '\x636', '\x63C', 
		'\x63F', '\x642', '\x646', '\x64E', '\x651', '\x658', '\x662', '\x668', 
		'\x672', '\x678', '\x67F', '\x68D',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
